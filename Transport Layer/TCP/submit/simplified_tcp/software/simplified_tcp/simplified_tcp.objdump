
simplified_tcp.elf:     file format elf32-littlenios2
simplified_tcp.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080240

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00008a14 memsz 0x00008a14 flags r-x
    LOAD off    0x00009a34 vaddr 0x00088a34 paddr 0x0008a508 align 2**12
         filesz 0x00001ad4 memsz 0x00001ad4 flags rw-
    LOAD off    0x0000bfdc vaddr 0x0008bfdc paddr 0x0008bfdc align 2**12
         filesz 0x00000000 memsz 0x00000220 flags rw-
    LOAD off    0x0000c000 vaddr 0x00100000 paddr 0x0008c1fc align 2**12
         filesz 0x00000080 memsz 0x00000080 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00007fc8  00080240  00080240  00001240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000082c  00088208  00088208  00009208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ad4  00088a34  0008a508  00009a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000220  0008bfdc  0008bfdc  0000bfdc  2**2
                  ALLOC, SMALL_DATA
  6 .main_memory  00000000  0008c1fc  0008c1fc  0000c080  2**0
                  CONTENTS
  7 .descriptor_memory 00000080  00100000  0008c1fc  0000c000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .comment      00000023  00000000  00000000  0000c080  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000998  00000000  00000000  0000c0a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00016aaf  00000000  00000000  0000ca40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000061c2  00000000  00000000  000234ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000689c  00000000  00000000  000296b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000018e0  00000000  00000000  0002ff50  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002a22  00000000  00000000  00031830  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00002d54  00000000  00000000  00034252  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00036fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000001d0  00000000  00000000  00036fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00039dcc  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  00039dcf  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00039dd4  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00039dd5  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  00039dd6  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  00039ddf  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  00039de8  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000b  00000000  00000000  00039df1  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000011  00000000  00000000  00039dfc  2**0
                  CONTENTS, READONLY
 27 .jdi          00004541  00000000  00000000  00039e0d  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00073a2b  00000000  00000000  0003e34e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080240 l    d  .text	00000000 .text
00088208 l    d  .rodata	00000000 .rodata
00088a34 l    d  .rwdata	00000000 .rwdata
0008bfdc l    d  .bss	00000000 .bss
0008c1fc l    d  .main_memory	00000000 .main_memory
00100000 l    d  .descriptor_memory	00000000 .descriptor_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../simplified_tcp_bsp//obj/HAL/src/crt0.o
00080288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 tx_rx.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_load.c
00082b30 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00082ef8 l     F .text	00000038 alt_dev_reg
00088a34 l     O .rwdata	00001060 jtag_uart
00089a94 l     O .rwdata	00000030 sgdma_rx
00089ac4 l     O .rwdata	00000030 sgdma_tx
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00083210 l     F .text	00000204 altera_avalon_jtag_uart_irq
00083414 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
00083a34 l     F .text	00000050 alt_get_errno
00084648 l     F .text	000000b8 alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000847a4 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
000849e0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev.c
00084b74 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00084ba0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000850dc l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00085214 l     F .text	00000050 alt_get_errno
00085264 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00089c9c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000863fc l     F .text	00000008 __fp_lock
00086404 l     F .text	00000008 __fp_unlock
00086418 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00087b6c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00087c6c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00087d60 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00087ec4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
0008a504 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000880c0 l     F .text	00000050 alt_get_errno
0008c014 g     O .bss	00000004 alt_instruction_exception_handler
00087a2c g     F .text	00000054 _isatty_r
00082c14 g     F .text	00000078 alt_main
00081308 g     F .text	00001368 rx_ethernet_isr
0008c0fc g     O .bss	00000100 alt_irq
00087a80 g     F .text	0000005c _lseek_r
0008a508 g       *ABS*	00000000 __flash_rwdata_start
0008c1fc g       *ABS*	00000000 __alt_heap_start
00083ba8 g     F .text	00000110 alt_avalon_sgdma_do_sync_transfer
000877ac g     F .text	0000005c __sseek
0008674c g     F .text	00000010 __sinit
00085c5c g     F .text	00000154 __swbuf_r
000865b8 g     F .text	00000064 __sfmoreglue
00087ea4 g     F .text	00000020 __malloc_unlock
00084294 g     F .text	000003b4 alt_avalon_sgdma_construct_descriptor_burst
00086734 g     F .text	00000018 _cleanup
0008bfec g     O .bss	00000004 in
0008bfe9 g     O .bss	00000001 retr_count
00085684 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000001c __reset
00083e04 g     F .text	00000074 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
00080020 g       *ABS*	00000000 __flash_exceptions_start
000879d4 g     F .text	00000058 _fstat_r
0008c018 g     O .bss	00000004 errno
00087728 g     F .text	00000008 __seofread
0008c000 g     O .bss	00000004 alt_argv
000924c8 g       *ABS*	00000000 _gp
00089b1c g     O .rwdata	00000180 alt_fd_list
00084d4c g     F .text	00000090 alt_find_dev
00082890 g     F .text	00000138 memcpy
0008640c g     F .text	0000000c _cleanup_r
0008519c g     F .text	00000078 alt_io_redirect
00088208 g       *ABS*	00000000 __DTOR_END__
000858f8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0008bfe4 g     O .bss	00000004 succ_rxed
00083ef0 g     F .text	00000088 alt_avalon_sgdma_construct_mem_to_stream_desc_burst
00083610 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00087cbc g     F .text	000000a4 isatty
00082670 g     F .text	00000174 create_pkt
0008586c g     F .text	0000008c alt_icache_flush
0008c024 g     O .bss	00000004 __malloc_top_pad
0008401c g     F .text	00000058 alt_avalon_sgdma_stop
00087680 g     F .text	00000054 _sbrk_r
00087adc g     F .text	0000005c _read_r
00084b00 g     F .text	00000074 alt_dcache_flush
0008a4e0 g     O .rwdata	00000004 alt_max_fd
000878c0 g     F .text	00000100 _fclose_r
000863cc g     F .text	00000030 fflush
0008c020 g     O .bss	00000004 __malloc_max_sbrked_mem
00080000 g       *ABS*	00000000 __alt_mem_main_memory
00087db0 g     F .text	000000d4 lseek
0008a4f4 g     O .rwdata	00000004 _global_impure_ptr
0008c1fc g       *ABS*	00000000 __bss_end
00084fec g     F .text	000000f0 alt_iic_isr_register
00083a84 g     F .text	00000124 alt_avalon_sgdma_do_async_transfer
00085580 g     F .text	00000104 alt_tick
00100060 g     O .descriptor_memory	00000020 rx_descriptor_end
0008676c g     F .text	00000018 __fp_lock_all
00084fa0 g     F .text	0000004c alt_ic_irq_enabled
000854e8 g     F .text	00000098 alt_alarm_stop
00100000 g       *ABS*	00000000 __alt_mem_descriptor_memory
0008c008 g     O .bss	00000004 alt_irq_active
0008c068 g     O .bss	00000040 tx_frame
000800fc g     F .exceptions	000000d0 alt_irq_handler
00089af4 g     O .rwdata	00000028 alt_dev_null
00084074 g     F .text	00000064 alt_avalon_sgdma_check_descriptor_status
000827e4 g     F .text	000000ac statistics_counter
00082aec g     F .text	00000044 alt_dcache_flush_all
0008bff0 g     O .bss	00000001 data_flag
00100040 g     O .descriptor_memory	00000020 rx_descriptor
0008a508 g       *ABS*	00000000 __ram_rwdata_end
0008a4d8 g     O .rwdata	00000008 alt_dev_list
00088110 g     F .text	000000f8 write
000841b4 g     F .text	00000080 alt_avalon_sgdma_enable_desc_poll
00085a5c g     F .text	000000a0 _putc_r
0008bfe8 g     O .bss	00000001 flag_syn
00088a34 g       *ABS*	00000000 __ram_rodata_end
00087bbc g     F .text	000000b0 fstat
00083e78 g     F .text	00000078 alt_avalon_sgdma_construct_mem_to_stream_desc
00083f78 g     F .text	00000050 alt_avalon_sgdma_register_callback
0008c1fc g       *ABS*	00000000 end
0008314c g     F .text	000000c4 altera_avalon_jtag_uart_init
000801cc g     F .exceptions	00000074 alt_instruction_exception_entry
00088208 g       *ABS*	00000000 __CTOR_LIST__
000cb000 g       *ABS*	00000000 __alt_stack_pointer
00084234 g     F .text	00000060 alt_avalon_sgdma_disable_desc_poll
00084818 g     F .text	00000088 alt_avalon_timer_sc_init
0008381c g     F .text	00000218 altera_avalon_jtag_uart_write
00083cb8 g     F .text	00000070 alt_avalon_sgdma_construct_mem_to_mem_desc
0008bfe0 g     O .bss	00000004 pckt_rxed
0008675c g     F .text	00000004 __sfp_lock_acquire
00083da8 g     F .text	0000005c alt_avalon_sgdma_construct_stream_to_mem_desc
000868c0 g     F .text	000002f0 _free_r
00082c8c g     F .text	00000228 alt_printf
00086010 g     F .text	00000194 __call_exitprocs
0008a4fc g     O .rwdata	00000004 __malloc_sbrk_base
00080240 g     F .text	0000004c _start
0008c00c g     O .bss	00000004 _alt_tick_rate
0008bff4 g     O .bss	00000004 sgdma_tx_dev
000840d8 g     F .text	00000054 alt_avalon_sgdma_open
0008c010 g     O .bss	00000004 _alt_nticks
00087f14 g     F .text	000000fc read
00082f64 g     F .text	00000084 alt_sys_init
00085efc g     F .text	00000114 __register_exitproc
000834bc g     F .text	00000068 altera_avalon_jtag_uart_close
00088a34 g       *ABS*	00000000 __ram_rwdata_start
00088208 g       *ABS*	00000000 __ram_rodata_start
0008c0a8 g     O .bss	00000028 __malloc_current_mallinfo
00082fe8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000857b8 g     F .text	000000b4 alt_get_fd
0008786c g     F .text	00000054 _close_r
000859e0 g     F .text	0000007c memcmp
000830a8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0008c1fc g       *ABS*	00000000 __alt_stack_base
000830f8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00085dcc g     F .text	00000130 __swsetup_r
0008661c g     F .text	00000118 __sfp
0008a0c0 g     O .rwdata	00000408 __malloc_av_
00086768 g     F .text	00000004 __sinit_lock_release
000876d4 g     F .text	00000054 __sread
000856a4 g     F .text	00000114 alt_find_file
00084bf0 g     F .text	000000a4 alt_dev_llist_insert
00087e84 g     F .text	00000020 __malloc_lock
00088010 g     F .text	000000b0 sbrk
00083fc8 g     F .text	00000054 alt_avalon_sgdma_start
000861a4 g     F .text	00000228 _fflush_r
0008bfdc g       *ABS*	00000000 __bss_start
000829c8 g     F .text	00000124 memset
0008028c g     F .text	0000107c main
0008c004 g     O .bss	00000004 alt_envp
0008c01c g     O .bss	00000004 __malloc_max_total_mem
00083048 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00085db0 g     F .text	0000001c __swbuf
0008a4c8 g     O .rwdata	00000008 alt_sgdma_list
00087808 g     F .text	00000008 __sclose
000cb000 g       *ABS*	00000000 __alt_heap_limit
000879c0 g     F .text	00000014 fclose
00086ed8 g     F .text	000007a8 _malloc_r
0008a4e4 g     O .rwdata	00000004 alt_errno
00100000 g     O .descriptor_memory	00000020 tx_descriptor
0008c028 g     O .bss	00000040 rx_frame
00086bb0 g     F .text	000000b8 _fwalk
00085afc g     F .text	000000c8 putc
0008679c g     F .text	00000124 _malloc_trim_r
00088208 g       *ABS*	00000000 __CTOR_END__
00088208 g       *ABS*	00000000 __flash_rodata_start
00088208 g       *ABS*	00000000 __DTOR_LIST__
00082f30 g     F .text	00000034 alt_irq_init
00085488 g     F .text	00000060 alt_release_fd
00085994 g     F .text	00000014 atexit
00087810 g     F .text	0000005c _write_r
0008a4f8 g     O .rwdata	00000004 _impure_ptr
0008bffc g     O .bss	00000004 alt_argc
00084cf0 g     F .text	0000005c _do_dtors
00080020 g       .exceptions	00000000 alt_irq_entry
00086784 g     F .text	00000018 __fp_unlock_all
0008c0d0 g     O .bss	0000002c TCP
0008a4d0 g     O .rwdata	00000008 alt_fs_list
0008bfdd g     O .bss	00000001 loss_flag
00080020 g       *ABS*	00000000 __ram_exceptions_start
0008bfdc g     O .bss	00000001 loss_count
00084e0c g     F .text	00000050 alt_ic_isr_register
0008a508 g       *ABS*	00000000 _edata
0008c1fc g       *ABS*	00000000 _end
00080240 g       *ABS*	00000000 __ram_exceptions_end
00083524 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00084efc g     F .text	000000a4 alt_ic_irq_disable
00100020 g     O .descriptor_memory	00000020 tx_descriptor_end
0008412c g     F .text	00000088 alt_avalon_sgdma_construct_descriptor
00087730 g     F .text	0000007c __swrite
0008a500 g     O .rwdata	00000004 __malloc_trim_threshold
000859a8 g     F .text	00000038 exit
00086c68 g     F .text	000000b8 _fwalk_reent
000cb000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00086760 g     F .text	00000004 __sfp_lock_release
0008bff8 g     O .bss	00000004 sgdma_rx_dev
00087b38 g     F .text	00000034 _exit
000848a0 g     F .text	00000140 alt_alarm_start
00086d20 g     F .text	000001b8 __smakebuf_r
00085bc4 g     F .text	00000098 strlen
00085330 g     F .text	00000158 open
00082eb4 g     F .text	00000044 alt_putchar
00084ddc g     F .text	00000030 alt_icache_flush_all
0008a4e8 g     O .rwdata	00000004 alt_priority_mask
00084e5c g     F .text	000000a0 alt_ic_irq_enable
00083d28 g     F .text	00000080 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
0008a4ec g     O .rwdata	00000008 alt_alarm_list
00084c94 g     F .text	0000005c _do_ctors
00084a30 g     F .text	000000d0 close
00082b94 g     F .text	00000080 alt_load
00084700 g     F .text	000000a4 alt_avalon_sgdma_init
00000000  w      *UND*	00000000 free
00086764 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <rx_descriptor_end+0xfff7ffa4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80014:	08409014 	ori	at,at,576
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__reset-0x80000>

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800fc0 	call	800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000706 	br	800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   80094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   80098:	00801cc0 	call	801cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   8009c:	1000021e 	bne	r2,zero,800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800f8:	ef80083a 	eret

000800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800fc:	defff904 	addi	sp,sp,-28
   80100:	dfc00615 	stw	ra,24(sp)
   80104:	df000515 	stw	fp,20(sp)
   80108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   8010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80110:	0005313a 	rdctl	r2,ipending
   80114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80124:	00800044 	movi	r2,1
   80128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8012c:	e0fffb17 	ldw	r3,-20(fp)
   80130:	e0bffc17 	ldw	r2,-16(fp)
   80134:	1884703a 	and	r2,r3,r2
   80138:	10001426 	beq	r2,zero,8018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8013c:	00800274 	movhi	r2,9
   80140:	10b03f04 	addi	r2,r2,-16132
   80144:	e0fffd17 	ldw	r3,-12(fp)
   80148:	180690fa 	slli	r3,r3,3
   8014c:	10c5883a 	add	r2,r2,r3
   80150:	10c00017 	ldw	r3,0(r2)
   80154:	00800274 	movhi	r2,9
   80158:	10b03f04 	addi	r2,r2,-16132
   8015c:	e13ffd17 	ldw	r4,-12(fp)
   80160:	200890fa 	slli	r4,r4,3
   80164:	1105883a 	add	r2,r2,r4
   80168:	10800104 	addi	r2,r2,4
   8016c:	10800017 	ldw	r2,0(r2)
   80170:	1009883a 	mov	r4,r2
   80174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8017c:	0005313a 	rdctl	r2,ipending
   80180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80184:	e0bfff17 	ldw	r2,-4(fp)
   80188:	00000706 	br	801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   8018c:	e0bffc17 	ldw	r2,-16(fp)
   80190:	1085883a 	add	r2,r2,r2
   80194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80198:	e0bffd17 	ldw	r2,-12(fp)
   8019c:	10800044 	addi	r2,r2,1
   801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a4:	003fe106 	br	8012c <rx_descriptor_end+0xfff800cc>

    active = alt_irq_pending ();
   801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   801ac:	e0bffb17 	ldw	r2,-20(fp)
   801b0:	103fdb1e 	bne	r2,zero,80120 <rx_descriptor_end+0xfff800c0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801b4:	0001883a 	nop
}
   801b8:	e037883a 	mov	sp,fp
   801bc:	dfc00117 	ldw	ra,4(sp)
   801c0:	df000017 	ldw	fp,0(sp)
   801c4:	dec00204 	addi	sp,sp,8
   801c8:	f800283a 	ret

000801cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   801cc:	defffb04 	addi	sp,sp,-20
   801d0:	dfc00415 	stw	ra,16(sp)
   801d4:	df000315 	stw	fp,12(sp)
   801d8:	df000304 	addi	fp,sp,12
   801dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   801e0:	000531fa 	rdctl	r2,exception
   801e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   801e8:	e0bffd17 	ldw	r2,-12(fp)
   801ec:	10801f0c 	andi	r2,r2,124
   801f0:	1004d0ba 	srli	r2,r2,2
   801f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   801f8:	0005333a 	rdctl	r2,badaddr
   801fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   80200:	d0a6d317 	ldw	r2,-25780(gp)
   80204:	10000726 	beq	r2,zero,80224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   80208:	d0a6d317 	ldw	r2,-25780(gp)
   8020c:	e0fffd17 	ldw	r3,-12(fp)
   80210:	1809883a 	mov	r4,r3
   80214:	e17fff17 	ldw	r5,-4(fp)
   80218:	e1bffe17 	ldw	r6,-8(fp)
   8021c:	103ee83a 	callr	r2
   80220:	00000206 	br	8022c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   80224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   80228:	0005883a 	mov	r2,zero
}
   8022c:	e037883a 	mov	sp,fp
   80230:	dfc00117 	ldw	ra,4(sp)
   80234:	df000017 	ldw	fp,0(sp)
   80238:	dec00204 	addi	sp,sp,8
   8023c:	f800283a 	ret

Disassembly of section .text:

00080240 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   80240:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   80244:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   80248:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   8024c:	00bffd16 	blt	zero,r2,80244 <rx_descriptor_end+0xfff801e4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80250:	06c00334 	movhi	sp,12
    ori sp, sp, %lo(__alt_stack_pointer)
   80254:	deec0014 	ori	sp,sp,45056
    movhi gp, %hi(_gp)
   80258:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   8025c:	d6893214 	ori	gp,gp,9416
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80260:	00800234 	movhi	r2,8
    ori r2, r2, %lo(__bss_start)
   80264:	10aff714 	ori	r2,r2,49116

    movhi r3, %hi(__bss_end)
   80268:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
   8026c:	18f07f14 	ori	r3,r3,49660

    beq r2, r3, 1f
   80270:	10c00326 	beq	r2,r3,80280 <_start+0x40>

0:
    stw zero, (r2)
   80274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   80278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   8027c:	10fffd36 	bltu	r2,r3,80274 <rx_descriptor_end+0xfff80214>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80280:	0082b940 	call	82b94 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80284:	0082c140 	call	82c14 <alt_main>

00080288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   80288:	003fff06 	br	80288 <rx_descriptor_end+0xfff80228>

0008028c <main>:

struct tcp_conn TCP[2];

/******* MAIN BLOCK STARTS HERE ********************************/

int main(void){
   8028c:	deffd604 	addi	sp,sp,-168
   80290:	dfc02915 	stw	ra,164(sp)
   80294:	df002815 	stw	fp,160(sp)
   80298:	ddc02715 	stw	r23,156(sp)
   8029c:	dd802615 	stw	r22,152(sp)
   802a0:	dd402515 	stw	r21,148(sp)
   802a4:	dd002415 	stw	r20,144(sp)
   802a8:	dcc02315 	stw	r19,140(sp)
   802ac:	dc802215 	stw	r18,136(sp)
   802b0:	dc402115 	stw	r17,132(sp)
   802b4:	dc002015 	stw	r16,128(sp)
   802b8:	df002804 	addi	fp,sp,160
	loss_flag=0;
   802bc:	d026c545 	stb	zero,-25835(gp)
	loss_count=0;
   802c0:	d026c505 	stb	zero,-25836(gp)

/**** Initializing timer status and control values *************/
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x0000);
   802c4:	0007883a 	mov	r3,zero
   802c8:	00800104 	movi	r2,4
   802cc:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0x0000);
   802d0:	0007883a 	mov	r3,zero
   802d4:	0005883a 	mov	r2,zero
   802d8:	10c00035 	stwio	r3,0(r2)

/****** copying TCP header values to structure ****************************/
	memmove(&TCP[0].dest_mac,"\x00\x1C\x23\x17\x4A\xCA",6);
   802dc:	00800274 	movhi	r2,9
   802e0:	10b03404 	addi	r2,r2,-16176
   802e4:	00c00274 	movhi	r3,9
   802e8:	18e08204 	addi	r3,r3,-32248
   802ec:	19000003 	ldbu	r4,0(r3)
   802f0:	11000045 	stb	r4,1(r2)
   802f4:	19000043 	ldbu	r4,1(r3)
   802f8:	11000085 	stb	r4,2(r2)
   802fc:	19000083 	ldbu	r4,2(r3)
   80300:	110000c5 	stb	r4,3(r2)
   80304:	190000c3 	ldbu	r4,3(r3)
   80308:	11000105 	stb	r4,4(r2)
   8030c:	19000103 	ldbu	r4,4(r3)
   80310:	11000145 	stb	r4,5(r2)
   80314:	18c00143 	ldbu	r3,5(r3)
   80318:	10c00185 	stb	r3,6(r2)
	memmove(&TCP[0].source_mac,"\x00\x1C\x23\x17\x4A\xCB",6);
   8031c:	00800274 	movhi	r2,9
   80320:	10b03404 	addi	r2,r2,-16176
   80324:	00c00274 	movhi	r3,9
   80328:	18e08404 	addi	r3,r3,-32240
   8032c:	19000003 	ldbu	r4,0(r3)
   80330:	110001c5 	stb	r4,7(r2)
   80334:	19000043 	ldbu	r4,1(r3)
   80338:	11000205 	stb	r4,8(r2)
   8033c:	19000083 	ldbu	r4,2(r3)
   80340:	11000245 	stb	r4,9(r2)
   80344:	190000c3 	ldbu	r4,3(r3)
   80348:	11000285 	stb	r4,10(r2)
   8034c:	19000103 	ldbu	r4,4(r3)
   80350:	110002c5 	stb	r4,11(r2)
   80354:	18c00143 	ldbu	r3,5(r3)
   80358:	10c00305 	stb	r3,12(r2)
	memmove(&TCP[0].source_port, "\x00\x10", 2);
   8035c:	00800274 	movhi	r2,9
   80360:	10a08604 	addi	r2,r2,-32232
   80364:	10c0000b 	ldhu	r3,0(r2)
   80368:	00800274 	movhi	r2,9
   8036c:	10b03404 	addi	r2,r2,-16176
   80370:	10c0038d 	sth	r3,14(r2)
	memmove(&TCP[0].dest_port, "\x00\x20", 2);
   80374:	00800274 	movhi	r2,9
   80378:	10a08704 	addi	r2,r2,-32228
   8037c:	10c0000b 	ldhu	r3,0(r2)
   80380:	00800274 	movhi	r2,9
   80384:	10b03404 	addi	r2,r2,-16176
   80388:	10c0040d 	sth	r3,16(r2)
	memmove(&TCP[0].seq_num, "\x00\x00", 2);
   8038c:	00800274 	movhi	r2,9
   80390:	10a08804 	addi	r2,r2,-32224
   80394:	10c0000b 	ldhu	r3,0(r2)
   80398:	00800274 	movhi	r2,9
   8039c:	10b03404 	addi	r2,r2,-16176
   803a0:	10c0050d 	sth	r3,20(r2)
	memmove(&TCP[0].ack_num, "\x00\x00", 2);
   803a4:	00800274 	movhi	r2,9
   803a8:	10a08804 	addi	r2,r2,-32224
   803ac:	10c0000b 	ldhu	r3,0(r2)
   803b0:	00800274 	movhi	r2,9
   803b4:	10b03404 	addi	r2,r2,-16176
   803b8:	10c0048d 	sth	r3,18(r2)
	data_flag = 0;
   803bc:	d026ca05 	stb	zero,-25816(gp)

/*********** Open the sgdma transmit device ********************/
	sgdma_tx_dev = alt_avalon_sgdma_open ("/dev/sgdma_tx");
   803c0:	01000274 	movhi	r4,9
   803c4:	21208904 	addi	r4,r4,-32220
   803c8:	00840d80 	call	840d8 <alt_avalon_sgdma_open>
   803cc:	d0a6cb15 	stw	r2,-25812(gp)
	if (sgdma_tx_dev == NULL) {
   803d0:	d0a6cb17 	ldw	r2,-25812(gp)
   803d4:	1000041e 	bne	r2,zero,803e8 <main+0x15c>
		alt_printf ("Error: could not open scatter-gather dma transmit device\n");
   803d8:	01000274 	movhi	r4,9
   803dc:	21208d04 	addi	r4,r4,-32204
   803e0:	0082c8c0 	call	82c8c <alt_printf>
   803e4:	00000306 	br	803f4 <main+0x168>
		//return -1;
	} else alt_printf ("Opened scatter-gather dma transmit device\n");
   803e8:	01000274 	movhi	r4,9
   803ec:	21209c04 	addi	r4,r4,-32144
   803f0:	0082c8c0 	call	82c8c <alt_printf>

/***********  Open the sgdma receive device *************************/

	sgdma_rx_dev = alt_avalon_sgdma_open ("/dev/sgdma_rx");
   803f4:	01000274 	movhi	r4,9
   803f8:	2120a704 	addi	r4,r4,-32100
   803fc:	00840d80 	call	840d8 <alt_avalon_sgdma_open>
   80400:	d0a6cc15 	stw	r2,-25808(gp)
	if (sgdma_rx_dev == NULL) {
   80404:	d0a6cc17 	ldw	r2,-25808(gp)
   80408:	1000041e 	bne	r2,zero,8041c <main+0x190>
		alt_printf ("Error: could not open scatter-gather dma receive device\n");
   8040c:	01000274 	movhi	r4,9
   80410:	2120ab04 	addi	r4,r4,-32084
   80414:	0082c8c0 	call	82c8c <alt_printf>
   80418:	00000306 	br	80428 <main+0x19c>
		//return -1;
	} else alt_printf ("Opened scatter-gather dma receive device\n");
   8041c:	01000274 	movhi	r4,9
   80420:	2120ba04 	addi	r4,r4,-32024
   80424:	0082c8c0 	call	82c8c <alt_printf>

/**************** Set interrupts for the sgdma receive device , Create sgdma receive descriptor  & Set up non-blocking transfer of sgdma receive descriptor **********/
	alt_avalon_sgdma_register_callback( sgdma_rx_dev, (alt_avalon_sgdma_callback) rx_ethernet_isr, 0x00000014, NULL );
   80428:	d0a6cc17 	ldw	r2,-25808(gp)
   8042c:	1009883a 	mov	r4,r2
   80430:	01400234 	movhi	r5,8
   80434:	2944c204 	addi	r5,r5,4872
   80438:	01800504 	movi	r6,20
   8043c:	000f883a 	mov	r7,zero
   80440:	0083f780 	call	83f78 <alt_avalon_sgdma_register_callback>
	alt_avalon_sgdma_construct_stream_to_mem_desc( &rx_descriptor, &rx_descriptor_end, (alt_u32 *)rx_frame, 0, 0 );
   80444:	d8000015 	stw	zero,0(sp)
   80448:	01000434 	movhi	r4,16
   8044c:	21001004 	addi	r4,r4,64
   80450:	01400434 	movhi	r5,16
   80454:	29401804 	addi	r5,r5,96
   80458:	01800274 	movhi	r6,9
   8045c:	31b00a04 	addi	r6,r6,-16344
   80460:	000f883a 	mov	r7,zero
   80464:	0083da80 	call	83da8 <alt_avalon_sgdma_construct_stream_to_mem_desc>
	alt_avalon_sgdma_do_async_transfer( sgdma_rx_dev, &rx_descriptor );
   80468:	d0a6cc17 	ldw	r2,-25808(gp)
   8046c:	1009883a 	mov	r4,r2
   80470:	01400434 	movhi	r5,16
   80474:	29401004 	addi	r5,r5,64
   80478:	0083a840 	call	83a84 <alt_avalon_sgdma_do_async_transfer>

/********************* Triple-sp **********************************************/
	volatile int *tse = (int *)TSE_BASE;
   8047c:	00800434 	movhi	r2,16
   80480:	10880004 	addi	r2,r2,8192
   80484:	e0bff015 	stw	r2,-64(fp)
	// Specify the addresses of the PHY devices to be accessed through MDIO interface
	*(tse + 0x0F) = 0x10;
   80488:	e0bff017 	ldw	r2,-64(fp)
   8048c:	10800f04 	addi	r2,r2,60
   80490:	00c00404 	movi	r3,16
   80494:	10c00015 	stw	r3,0(r2)

/************ Disable read and write transfers and wait**************************/
	*(tse + 0x02 ) = *(tse + 0x02) | 0x00800220;
   80498:	e0bff017 	ldw	r2,-64(fp)
   8049c:	10c00204 	addi	r3,r2,8
   804a0:	e0bff017 	ldw	r2,-64(fp)
   804a4:	10800204 	addi	r2,r2,8
   804a8:	11000017 	ldw	r4,0(r2)
   804ac:	00802034 	movhi	r2,128
   804b0:	10808804 	addi	r2,r2,544
   804b4:	2084b03a 	or	r2,r4,r2
   804b8:	18800015 	stw	r2,0(r3)
	while ( *(tse + 0x02 ) != ( *(tse + 0x02 ) | 0x00800220 ));
   804bc:	0001883a 	nop
   804c0:	e0bff017 	ldw	r2,-64(fp)
   804c4:	10800204 	addi	r2,r2,8
   804c8:	10c00017 	ldw	r3,0(r2)
   804cc:	e0bff017 	ldw	r2,-64(fp)
   804d0:	10800204 	addi	r2,r2,8
   804d4:	11000017 	ldw	r4,0(r2)
   804d8:	00802034 	movhi	r2,128
   804dc:	10808804 	addi	r2,r2,544
   804e0:	2084b03a 	or	r2,r4,r2
   804e4:	18bff61e 	bne	r3,r2,804c0 <rx_descriptor_end+0xfff80460>

/****************MAC FIFO Configuration*****************************************/
	*(tse + 0x09) = TSE_TRANSMIT_FIFO_DEPTH-16;
   804e8:	e0bff017 	ldw	r2,-64(fp)
   804ec:	10800904 	addi	r2,r2,36
   804f0:	00c1fc04 	movi	r3,2032
   804f4:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0E) = 3 ;
   804f8:	e0bff017 	ldw	r2,-64(fp)
   804fc:	10800e04 	addi	r2,r2,56
   80500:	00c000c4 	movi	r3,3
   80504:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0D) = 8;
   80508:	e0bff017 	ldw	r2,-64(fp)
   8050c:	10800d04 	addi	r2,r2,52
   80510:	00c00204 	movi	r3,8
   80514:	10c00015 	stw	r3,0(r2)
	*(tse + 0x07) =TSE_RECEIVE_FIFO_DEPTH-16;
   80518:	e0bff017 	ldw	r2,-64(fp)
   8051c:	10800704 	addi	r2,r2,28
   80520:	00c1fc04 	movi	r3,2032
   80524:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0C) = 8 ;
   80528:	e0bff017 	ldw	r2,-64(fp)
   8052c:	10800c04 	addi	r2,r2,48
   80530:	00c00204 	movi	r3,8
   80534:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0B) = 8 ;
   80538:	e0bff017 	ldw	r2,-64(fp)
   8053c:	10800b04 	addi	r2,r2,44
   80540:	00c00204 	movi	r3,8
   80544:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0A) = 0;
   80548:	e0bff017 	ldw	r2,-64(fp)
   8054c:	10800a04 	addi	r2,r2,40
   80550:	10000015 	stw	zero,0(r2)
	*(tse + 0x08) = 0;
   80554:	e0bff017 	ldw	r2,-64(fp)
   80558:	10800804 	addi	r2,r2,32
   8055c:	10000015 	stw	zero,0(r2)

/***************** Initialize the MAC address************************************/
	*(tse + 0x03 ) = 0x17231C00  ; //mac_0
   80560:	e0bff017 	ldw	r2,-64(fp)
   80564:	10c00304 	addi	r3,r2,12
   80568:	0085c8f4 	movhi	r2,5923
   8056c:	10870004 	addi	r2,r2,7168
   80570:	18800015 	stw	r2,0(r3)
	*(tse + 0x04) =  0x0000CB4A;  //mac_1
   80574:	e0bff017 	ldw	r2,-64(fp)
   80578:	10800404 	addi	r2,r2,16
   8057c:	00f2d294 	movui	r3,52042
   80580:	10c00015 	stw	r3,0(r2)

/****************** MAC function configuration**********************************/
	*(tse + 0x05) = 1518 ;
   80584:	e0bff017 	ldw	r2,-64(fp)
   80588:	10800504 	addi	r2,r2,20
   8058c:	00c17b84 	movi	r3,1518
   80590:	10c00015 	stw	r3,0(r2)
	*(tse + 0x17) = 12;
   80594:	e0bff017 	ldw	r2,-64(fp)
   80598:	10801704 	addi	r2,r2,92
   8059c:	00c00304 	movi	r3,12
   805a0:	10c00015 	stw	r3,0(r2)
	*(tse + 0x06 ) = 0xFFFF;
   805a4:	e0bff017 	ldw	r2,-64(fp)
   805a8:	10800604 	addi	r2,r2,24
   805ac:	00ffffd4 	movui	r3,65535
   805b0:	10c00015 	stw	r3,0(r2)
	*(tse + 0x02 ) = 0x00800220; //command config
   805b4:	e0bff017 	ldw	r2,-64(fp)
   805b8:	10c00204 	addi	r3,r2,8
   805bc:	00802034 	movhi	r2,128
   805c0:	10808804 	addi	r2,r2,544
   805c4:	18800015 	stw	r2,0(r3)


/*************** Software reset the PHY chip and wait***************************/
	*(tse + 0x02  ) =  0x00802220;
   805c8:	e0bff017 	ldw	r2,-64(fp)
   805cc:	10c00204 	addi	r3,r2,8
   805d0:	00802034 	movhi	r2,128
   805d4:	10888804 	addi	r2,r2,8736
   805d8:	18800015 	stw	r2,0(r3)
	while ( *(tse + 0x02 ) != ( 0x00800220 ) ) alt_printf("h") ;
   805dc:	00000306 	br	805ec <main+0x360>
   805e0:	01000274 	movhi	r4,9
   805e4:	2120c504 	addi	r4,r4,-31980
   805e8:	0082c8c0 	call	82c8c <alt_printf>
   805ec:	e0bff017 	ldw	r2,-64(fp)
   805f0:	10800204 	addi	r2,r2,8
   805f4:	10c00017 	ldw	r3,0(r2)
   805f8:	00802034 	movhi	r2,128
   805fc:	10808804 	addi	r2,r2,544
   80600:	18bff71e 	bne	r3,r2,805e0 <rx_descriptor_end+0xfff80580>

/*** Enable read and write transfers, gigabit Ethernet operation and promiscuous mode*/

	*(tse + 0x02 ) = *(tse + 0x02 ) | 0x0080023B;
   80604:	e0bff017 	ldw	r2,-64(fp)
   80608:	10c00204 	addi	r3,r2,8
   8060c:	e0bff017 	ldw	r2,-64(fp)
   80610:	10800204 	addi	r2,r2,8
   80614:	11000017 	ldw	r4,0(r2)
   80618:	00802034 	movhi	r2,128
   8061c:	10808ec4 	addi	r2,r2,571
   80620:	2084b03a 	or	r2,r4,r2
   80624:	18800015 	stw	r2,0(r3)
	while ( *(tse + 0x02 ) != ( *(tse + 0x02) | 0x0080023B ) );
   80628:	0001883a 	nop
   8062c:	e0bff017 	ldw	r2,-64(fp)
   80630:	10800204 	addi	r2,r2,8
   80634:	10c00017 	ldw	r3,0(r2)
   80638:	e0bff017 	ldw	r2,-64(fp)
   8063c:	10800204 	addi	r2,r2,8
   80640:	11000017 	ldw	r4,0(r2)
   80644:	00802034 	movhi	r2,128
   80648:	10808ec4 	addi	r2,r2,571
   8064c:	2084b03a 	or	r2,r4,r2
   80650:	18bff61e 	bne	r3,r2,8062c <rx_descriptor_end+0xfff805cc>


	uint8_t data = 0x00;
   80654:	e03ff205 	stb	zero,-56(fp)
	uint8_t flag_a = 0;
   80658:	e03fee05 	stb	zero,-72(fp)
	int delay = 0;
   8065c:	e03fef15 	stw	zero,-68(fp)
	int n; //variable to read timer status

/********** Infinite Loop ******************************/
	while (1) {
		in =  IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE); //read the input from the switch
   80660:	00800434 	movhi	r2,16
   80664:	10892004 	addi	r2,r2,9344
   80668:	10800037 	ldwio	r2,0(r2)
   8066c:	d0a6c915 	stw	r2,-25820(gp)

		/**** Check if 3 way handshake already established *********************/
		if((TCP[0].link == 1) && (flag_syn == 0) && (in & 0x01)==1){
   80670:	00800274 	movhi	r2,9
   80674:	10b03404 	addi	r2,r2,-16176
   80678:	10800003 	ldbu	r2,0(r2)
   8067c:	10803fcc 	andi	r2,r2,255
   80680:	10800058 	cmpnei	r2,r2,1
   80684:	10000b1e 	bne	r2,zero,806b4 <main+0x428>
   80688:	d0a6c803 	ldbu	r2,-25824(gp)
   8068c:	10803fcc 	andi	r2,r2,255
   80690:	1000081e 	bne	r2,zero,806b4 <main+0x428>
   80694:	d0a6c917 	ldw	r2,-25820(gp)
   80698:	1080004c 	andi	r2,r2,1
   8069c:	10000526 	beq	r2,zero,806b4 <main+0x428>
			flag_syn = 1;
   806a0:	00800044 	movi	r2,1
   806a4:	d0a6c805 	stb	r2,-25824(gp)
			alt_printf("\nConnection already established, send data");
   806a8:	01000274 	movhi	r4,9
   806ac:	2120c604 	addi	r4,r4,-31976
   806b0:	0082c8c0 	call	82c8c <alt_printf>
		}

		if ((in & 0x01)== 1){// Syn if  switch 1 is on
   806b4:	d0a6c917 	ldw	r2,-25820(gp)
   806b8:	1080004c 	andi	r2,r2,1
   806bc:	1000bc26 	beq	r2,zero,809b0 <main+0x724>
			//IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE,0x01); //switch on or switch off the LED
			if(flag_syn == 0){
   806c0:	d0a6c803 	ldbu	r2,-25824(gp)
   806c4:	10803fcc 	andi	r2,r2,255
   806c8:	1001721e 	bne	r2,zero,80c94 <main+0xa08>
				flag_syn = 1; //setting flag bit to send only 1 syn packet when switch is ON
   806cc:	00800044 	movi	r2,1
   806d0:	d0a6c805 	stb	r2,-25824(gp)
				flag_a = 1;
   806d4:	00800044 	movi	r2,1
   806d8:	e0bfee05 	stb	r2,-72(fp)

				/******** Creating and Sending SYN packet******************************/
		/** SYN = 1 , SYN-ACK = 5 , ACK = 4 , FIN  = 2 , FIN-ACK = 6
		 **** DATA = 8 , DATA ACK = 0X0C*****************************************/
				create_pkt();
   806dc:	00826700 	call	82670 <create_pkt>
				memmove(tx_frame+24, "\x01", 1);
   806e0:	00800274 	movhi	r2,9
   806e4:	10b02004 	addi	r2,r2,-16256
   806e8:	00c00044 	movi	r3,1
   806ec:	10c00005 	stb	r3,0(r2)
				alt_printf(" timer started for SYN, status is : %x",IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE));
   806f0:	0005883a 	mov	r2,zero
   806f4:	10800037 	ldwio	r2,0(r2)
   806f8:	01000274 	movhi	r4,9
   806fc:	2120d104 	addi	r4,r4,-31932
   80700:	100b883a 	mov	r5,r2
   80704:	0082c8c0 	call	82c8c <alt_printf>

				/***** Transmitting the packet ***************************************/
				alt_printf("\nSYN TX_FRAME: %x %x %x %x %x %x    %x %x %x %x %x %x    %x %x   %x %x   %x %x   %x %x   %x %x   %x \n",tx_frame[2],tx_frame[3],tx_frame[4],tx_frame[5],tx_frame[6],tx_frame[7],tx_frame[8],tx_frame[9],tx_frame[10],tx_frame[11],tx_frame[12],tx_frame[13],tx_frame[14],tx_frame[15],tx_frame[16],tx_frame[17],tx_frame[18],tx_frame[19],tx_frame[20],tx_frame[21],tx_frame[22],tx_frame[23],tx_frame[24],tx_frame[25]);
   80708:	00800274 	movhi	r2,9
   8070c:	10b01a04 	addi	r2,r2,-16280
   80710:	10800083 	ldbu	r2,2(r2)
   80714:	10803fcc 	andi	r2,r2,255
   80718:	e0bff315 	stw	r2,-52(fp)
   8071c:	00800274 	movhi	r2,9
   80720:	10b01a04 	addi	r2,r2,-16280
   80724:	108000c3 	ldbu	r2,3(r2)
   80728:	17c03fcc 	andi	ra,r2,255
   8072c:	00800274 	movhi	r2,9
   80730:	10b01a04 	addi	r2,r2,-16280
   80734:	10800103 	ldbu	r2,4(r2)
   80738:	15c03fcc 	andi	r23,r2,255
   8073c:	00800274 	movhi	r2,9
   80740:	10b01a04 	addi	r2,r2,-16280
   80744:	10800143 	ldbu	r2,5(r2)
   80748:	15803fcc 	andi	r22,r2,255
   8074c:	00800274 	movhi	r2,9
   80750:	10b01a04 	addi	r2,r2,-16280
   80754:	10800183 	ldbu	r2,6(r2)
   80758:	15403fcc 	andi	r21,r2,255
   8075c:	00800274 	movhi	r2,9
   80760:	10b01a04 	addi	r2,r2,-16280
   80764:	108001c3 	ldbu	r2,7(r2)
   80768:	15003fcc 	andi	r20,r2,255
   8076c:	00800274 	movhi	r2,9
   80770:	10b01a04 	addi	r2,r2,-16280
   80774:	10800203 	ldbu	r2,8(r2)
   80778:	14c03fcc 	andi	r19,r2,255
   8077c:	00800274 	movhi	r2,9
   80780:	10b01a04 	addi	r2,r2,-16280
   80784:	10800243 	ldbu	r2,9(r2)
   80788:	14803fcc 	andi	r18,r2,255
   8078c:	00800274 	movhi	r2,9
   80790:	10b01a04 	addi	r2,r2,-16280
   80794:	10800283 	ldbu	r2,10(r2)
   80798:	14403fcc 	andi	r17,r2,255
   8079c:	00800274 	movhi	r2,9
   807a0:	10b01a04 	addi	r2,r2,-16280
   807a4:	108002c3 	ldbu	r2,11(r2)
   807a8:	14003fcc 	andi	r16,r2,255
   807ac:	00800274 	movhi	r2,9
   807b0:	10b01a04 	addi	r2,r2,-16280
   807b4:	10800303 	ldbu	r2,12(r2)
   807b8:	13c03fcc 	andi	r15,r2,255
   807bc:	00800274 	movhi	r2,9
   807c0:	10b01a04 	addi	r2,r2,-16280
   807c4:	10800343 	ldbu	r2,13(r2)
   807c8:	13803fcc 	andi	r14,r2,255
   807cc:	00800274 	movhi	r2,9
   807d0:	10b01a04 	addi	r2,r2,-16280
   807d4:	10800383 	ldbu	r2,14(r2)
   807d8:	13403fcc 	andi	r13,r2,255
   807dc:	00800274 	movhi	r2,9
   807e0:	10b01a04 	addi	r2,r2,-16280
   807e4:	108003c3 	ldbu	r2,15(r2)
   807e8:	13003fcc 	andi	r12,r2,255
   807ec:	00800274 	movhi	r2,9
   807f0:	10b01a04 	addi	r2,r2,-16280
   807f4:	10800403 	ldbu	r2,16(r2)
   807f8:	12c03fcc 	andi	r11,r2,255
   807fc:	00800274 	movhi	r2,9
   80800:	10b01a04 	addi	r2,r2,-16280
   80804:	10800443 	ldbu	r2,17(r2)
   80808:	12803fcc 	andi	r10,r2,255
   8080c:	00800274 	movhi	r2,9
   80810:	10b01a04 	addi	r2,r2,-16280
   80814:	10800483 	ldbu	r2,18(r2)
   80818:	12403fcc 	andi	r9,r2,255
   8081c:	00800274 	movhi	r2,9
   80820:	10b01a04 	addi	r2,r2,-16280
   80824:	108004c3 	ldbu	r2,19(r2)
   80828:	12003fcc 	andi	r8,r2,255
   8082c:	00800274 	movhi	r2,9
   80830:	10b01a04 	addi	r2,r2,-16280
   80834:	10800503 	ldbu	r2,20(r2)
   80838:	11c03fcc 	andi	r7,r2,255
   8083c:	00800274 	movhi	r2,9
   80840:	10b01a04 	addi	r2,r2,-16280
   80844:	10800543 	ldbu	r2,21(r2)
   80848:	11803fcc 	andi	r6,r2,255
   8084c:	00800274 	movhi	r2,9
   80850:	10b01a04 	addi	r2,r2,-16280
   80854:	10800583 	ldbu	r2,22(r2)
   80858:	11403fcc 	andi	r5,r2,255
   8085c:	00800274 	movhi	r2,9
   80860:	10b01a04 	addi	r2,r2,-16280
   80864:	108005c3 	ldbu	r2,23(r2)
   80868:	11003fcc 	andi	r4,r2,255
   8086c:	00800274 	movhi	r2,9
   80870:	10b01a04 	addi	r2,r2,-16280
   80874:	10800603 	ldbu	r2,24(r2)
   80878:	10c03fcc 	andi	r3,r2,255
   8087c:	00800274 	movhi	r2,9
   80880:	10b01a04 	addi	r2,r2,-16280
   80884:	10800643 	ldbu	r2,25(r2)
   80888:	10803fcc 	andi	r2,r2,255
   8088c:	dd800015 	stw	r22,0(sp)
   80890:	dd400115 	stw	r21,4(sp)
   80894:	dd000215 	stw	r20,8(sp)
   80898:	dcc00315 	stw	r19,12(sp)
   8089c:	dc800415 	stw	r18,16(sp)
   808a0:	dc400515 	stw	r17,20(sp)
   808a4:	dc000615 	stw	r16,24(sp)
   808a8:	dbc00715 	stw	r15,28(sp)
   808ac:	db800815 	stw	r14,32(sp)
   808b0:	db400915 	stw	r13,36(sp)
   808b4:	db000a15 	stw	r12,40(sp)
   808b8:	dac00b15 	stw	r11,44(sp)
   808bc:	da800c15 	stw	r10,48(sp)
   808c0:	da400d15 	stw	r9,52(sp)
   808c4:	da000e15 	stw	r8,56(sp)
   808c8:	d9c00f15 	stw	r7,60(sp)
   808cc:	d9801015 	stw	r6,64(sp)
   808d0:	d9401115 	stw	r5,68(sp)
   808d4:	d9001215 	stw	r4,72(sp)
   808d8:	d8c01315 	stw	r3,76(sp)
   808dc:	d8801415 	stw	r2,80(sp)
   808e0:	01000274 	movhi	r4,9
   808e4:	2120db04 	addi	r4,r4,-31892
   808e8:	e17ff317 	ldw	r5,-52(fp)
   808ec:	f80d883a 	mov	r6,ra
   808f0:	b80f883a 	mov	r7,r23
   808f4:	0082c8c0 	call	82c8c <alt_printf>
				alt_dcache_flush_all();
   808f8:	0082aec0 	call	82aec <alt_dcache_flush_all>
				alt_avalon_sgdma_construct_mem_to_stream_desc(&tx_descriptor, &tx_descriptor_end, (alt_u32 *)tx_frame, 64, 0, 1, 1, 0);
   808fc:	d8000015 	stw	zero,0(sp)
   80900:	00800044 	movi	r2,1
   80904:	d8800115 	stw	r2,4(sp)
   80908:	00800044 	movi	r2,1
   8090c:	d8800215 	stw	r2,8(sp)
   80910:	d8000315 	stw	zero,12(sp)
   80914:	01000434 	movhi	r4,16
   80918:	21000004 	addi	r4,r4,0
   8091c:	01400434 	movhi	r5,16
   80920:	29400804 	addi	r5,r5,32
   80924:	01800274 	movhi	r6,9
   80928:	31b01a04 	addi	r6,r6,-16280
   8092c:	01c01004 	movi	r7,64
   80930:	0083e780 	call	83e78 <alt_avalon_sgdma_construct_mem_to_stream_desc>
				alt_avalon_sgdma_do_async_transfer( sgdma_tx_dev, &tx_descriptor );
   80934:	d0a6cb17 	ldw	r2,-25812(gp)
   80938:	1009883a 	mov	r4,r2
   8093c:	01400434 	movhi	r5,16
   80940:	29400004 	addi	r5,r5,0
   80944:	0083a840 	call	83a84 <alt_avalon_sgdma_do_async_transfer>
				while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor) != 0);
   80948:	0001883a 	nop
   8094c:	01000434 	movhi	r4,16
   80950:	21000004 	addi	r4,r4,0
   80954:	00840740 	call	84074 <alt_avalon_sgdma_check_descriptor_status>
   80958:	103ffc1e 	bne	r2,zero,8094c <rx_descriptor_end+0xfff808ec>

				/********** Starting Timer for SYN packet *************************************/

				IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0x0002);
   8095c:	00800084 	movi	r2,2
   80960:	0007883a 	mov	r3,zero
   80964:	18800035 	stwio	r2,0(r3)
				IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE , 0xFFFF);
   80968:	00ffffd4 	movui	r3,65535
   8096c:	00800204 	movi	r2,8
   80970:	10c00035 	stwio	r3,0(r2)
				IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE , 0xFFFF);
   80974:	00ffffd4 	movui	r3,65535
   80978:	00800304 	movi	r2,12
   8097c:	10c00035 	stwio	r3,0(r2)
				IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x0007);
   80980:	00c001c4 	movi	r3,7
   80984:	00800104 	movi	r2,4
   80988:	10c00035 	stwio	r3,0(r2)
				/********** increment sequence number **************************************/
				TCP[0].seq_num++;
   8098c:	00800274 	movhi	r2,9
   80990:	10b03404 	addi	r2,r2,-16176
   80994:	1080050b 	ldhu	r2,20(r2)
   80998:	10800044 	addi	r2,r2,1
   8099c:	1007883a 	mov	r3,r2
   809a0:	00800274 	movhi	r2,9
   809a4:	10b03404 	addi	r2,r2,-16176
   809a8:	10c0050d 	sth	r3,20(r2)
   809ac:	0000b906 	br	80c94 <main+0xa08>
			}
		}

		/****** Condition for sending FIN Packet when switch 1 is OFF **********************************/

		else if((flag_a == 1 )&& (in & 0x01) == 0){
   809b0:	e0bfee03 	ldbu	r2,-72(fp)
   809b4:	10800058 	cmpnei	r2,r2,1
   809b8:	1000b61e 	bne	r2,zero,80c94 <main+0xa08>
   809bc:	d0a6c917 	ldw	r2,-25820(gp)
   809c0:	1080004c 	andi	r2,r2,1
   809c4:	1000b31e 	bne	r2,zero,80c94 <main+0xa08>
				data_flag = 0;
   809c8:	d026ca05 	stb	zero,-25816(gp)
				flag_syn = 0;
   809cc:	d026c805 	stb	zero,-25824(gp)
				flag_a=0;
   809d0:	e03fee05 	stb	zero,-72(fp)
		/******** Sending Fin packet ***************************************************/;

				create_pkt();
   809d4:	00826700 	call	82670 <create_pkt>
				memcpy(tx_frame+24, "\x02", 1);
   809d8:	01000274 	movhi	r4,9
   809dc:	21302004 	addi	r4,r4,-16256
   809e0:	01400274 	movhi	r5,9
   809e4:	2960f504 	addi	r5,r5,-31788
   809e8:	01800044 	movi	r6,1
   809ec:	00828900 	call	82890 <memcpy>
				alt_printf("\nFIN TX_FRAME: %x %x %x %x %x %x    %x %x %x %x %x %x    %x %x   %x %x   %x %x   %x %x   %x %x   %x \n",tx_frame[2],tx_frame[3],tx_frame[4],tx_frame[5],tx_frame[6],tx_frame[7],tx_frame[8],tx_frame[9],tx_frame[10],tx_frame[11],tx_frame[12],tx_frame[13],tx_frame[14],tx_frame[15],tx_frame[16],tx_frame[17],tx_frame[18],tx_frame[19],tx_frame[20],tx_frame[21],tx_frame[22],tx_frame[23],tx_frame[24],tx_frame[25]);
   809f0:	00800274 	movhi	r2,9
   809f4:	10b01a04 	addi	r2,r2,-16280
   809f8:	10800083 	ldbu	r2,2(r2)
   809fc:	10803fcc 	andi	r2,r2,255
   80a00:	e0bff415 	stw	r2,-48(fp)
   80a04:	00800274 	movhi	r2,9
   80a08:	10b01a04 	addi	r2,r2,-16280
   80a0c:	108000c3 	ldbu	r2,3(r2)
   80a10:	17c03fcc 	andi	ra,r2,255
   80a14:	00800274 	movhi	r2,9
   80a18:	10b01a04 	addi	r2,r2,-16280
   80a1c:	10800103 	ldbu	r2,4(r2)
   80a20:	15c03fcc 	andi	r23,r2,255
   80a24:	00800274 	movhi	r2,9
   80a28:	10b01a04 	addi	r2,r2,-16280
   80a2c:	10800143 	ldbu	r2,5(r2)
   80a30:	15803fcc 	andi	r22,r2,255
   80a34:	00800274 	movhi	r2,9
   80a38:	10b01a04 	addi	r2,r2,-16280
   80a3c:	10800183 	ldbu	r2,6(r2)
   80a40:	15403fcc 	andi	r21,r2,255
   80a44:	00800274 	movhi	r2,9
   80a48:	10b01a04 	addi	r2,r2,-16280
   80a4c:	108001c3 	ldbu	r2,7(r2)
   80a50:	15003fcc 	andi	r20,r2,255
   80a54:	00800274 	movhi	r2,9
   80a58:	10b01a04 	addi	r2,r2,-16280
   80a5c:	10800203 	ldbu	r2,8(r2)
   80a60:	14c03fcc 	andi	r19,r2,255
   80a64:	00800274 	movhi	r2,9
   80a68:	10b01a04 	addi	r2,r2,-16280
   80a6c:	10800243 	ldbu	r2,9(r2)
   80a70:	14803fcc 	andi	r18,r2,255
   80a74:	00800274 	movhi	r2,9
   80a78:	10b01a04 	addi	r2,r2,-16280
   80a7c:	10800283 	ldbu	r2,10(r2)
   80a80:	14403fcc 	andi	r17,r2,255
   80a84:	00800274 	movhi	r2,9
   80a88:	10b01a04 	addi	r2,r2,-16280
   80a8c:	108002c3 	ldbu	r2,11(r2)
   80a90:	14003fcc 	andi	r16,r2,255
   80a94:	00800274 	movhi	r2,9
   80a98:	10b01a04 	addi	r2,r2,-16280
   80a9c:	10800303 	ldbu	r2,12(r2)
   80aa0:	13c03fcc 	andi	r15,r2,255
   80aa4:	00800274 	movhi	r2,9
   80aa8:	10b01a04 	addi	r2,r2,-16280
   80aac:	10800343 	ldbu	r2,13(r2)
   80ab0:	13803fcc 	andi	r14,r2,255
   80ab4:	00800274 	movhi	r2,9
   80ab8:	10b01a04 	addi	r2,r2,-16280
   80abc:	10800383 	ldbu	r2,14(r2)
   80ac0:	13403fcc 	andi	r13,r2,255
   80ac4:	00800274 	movhi	r2,9
   80ac8:	10b01a04 	addi	r2,r2,-16280
   80acc:	108003c3 	ldbu	r2,15(r2)
   80ad0:	13003fcc 	andi	r12,r2,255
   80ad4:	00800274 	movhi	r2,9
   80ad8:	10b01a04 	addi	r2,r2,-16280
   80adc:	10800403 	ldbu	r2,16(r2)
   80ae0:	12c03fcc 	andi	r11,r2,255
   80ae4:	00800274 	movhi	r2,9
   80ae8:	10b01a04 	addi	r2,r2,-16280
   80aec:	10800443 	ldbu	r2,17(r2)
   80af0:	12803fcc 	andi	r10,r2,255
   80af4:	00800274 	movhi	r2,9
   80af8:	10b01a04 	addi	r2,r2,-16280
   80afc:	10800483 	ldbu	r2,18(r2)
   80b00:	12403fcc 	andi	r9,r2,255
   80b04:	00800274 	movhi	r2,9
   80b08:	10b01a04 	addi	r2,r2,-16280
   80b0c:	108004c3 	ldbu	r2,19(r2)
   80b10:	12003fcc 	andi	r8,r2,255
   80b14:	00800274 	movhi	r2,9
   80b18:	10b01a04 	addi	r2,r2,-16280
   80b1c:	10800503 	ldbu	r2,20(r2)
   80b20:	11c03fcc 	andi	r7,r2,255
   80b24:	00800274 	movhi	r2,9
   80b28:	10b01a04 	addi	r2,r2,-16280
   80b2c:	10800543 	ldbu	r2,21(r2)
   80b30:	11803fcc 	andi	r6,r2,255
   80b34:	00800274 	movhi	r2,9
   80b38:	10b01a04 	addi	r2,r2,-16280
   80b3c:	10800583 	ldbu	r2,22(r2)
   80b40:	11403fcc 	andi	r5,r2,255
   80b44:	00800274 	movhi	r2,9
   80b48:	10b01a04 	addi	r2,r2,-16280
   80b4c:	108005c3 	ldbu	r2,23(r2)
   80b50:	11003fcc 	andi	r4,r2,255
   80b54:	00800274 	movhi	r2,9
   80b58:	10b01a04 	addi	r2,r2,-16280
   80b5c:	10800603 	ldbu	r2,24(r2)
   80b60:	10c03fcc 	andi	r3,r2,255
   80b64:	00800274 	movhi	r2,9
   80b68:	10b01a04 	addi	r2,r2,-16280
   80b6c:	10800643 	ldbu	r2,25(r2)
   80b70:	10803fcc 	andi	r2,r2,255
   80b74:	dd800015 	stw	r22,0(sp)
   80b78:	dd400115 	stw	r21,4(sp)
   80b7c:	dd000215 	stw	r20,8(sp)
   80b80:	dcc00315 	stw	r19,12(sp)
   80b84:	dc800415 	stw	r18,16(sp)
   80b88:	dc400515 	stw	r17,20(sp)
   80b8c:	dc000615 	stw	r16,24(sp)
   80b90:	dbc00715 	stw	r15,28(sp)
   80b94:	db800815 	stw	r14,32(sp)
   80b98:	db400915 	stw	r13,36(sp)
   80b9c:	db000a15 	stw	r12,40(sp)
   80ba0:	dac00b15 	stw	r11,44(sp)
   80ba4:	da800c15 	stw	r10,48(sp)
   80ba8:	da400d15 	stw	r9,52(sp)
   80bac:	da000e15 	stw	r8,56(sp)
   80bb0:	d9c00f15 	stw	r7,60(sp)
   80bb4:	d9801015 	stw	r6,64(sp)
   80bb8:	d9401115 	stw	r5,68(sp)
   80bbc:	d9001215 	stw	r4,72(sp)
   80bc0:	d8c01315 	stw	r3,76(sp)
   80bc4:	d8801415 	stw	r2,80(sp)
   80bc8:	01000274 	movhi	r4,9
   80bcc:	2120f604 	addi	r4,r4,-31784
   80bd0:	e17ff417 	ldw	r5,-48(fp)
   80bd4:	f80d883a 	mov	r6,ra
   80bd8:	b80f883a 	mov	r7,r23
   80bdc:	0082c8c0 	call	82c8c <alt_printf>
				alt_dcache_flush_all();
   80be0:	0082aec0 	call	82aec <alt_dcache_flush_all>
				alt_avalon_sgdma_construct_mem_to_stream_desc(&tx_descriptor, &tx_descriptor_end, (alt_u32 *)tx_frame, 64, 0, 1, 1, 0);
   80be4:	d8000015 	stw	zero,0(sp)
   80be8:	00800044 	movi	r2,1
   80bec:	d8800115 	stw	r2,4(sp)
   80bf0:	00800044 	movi	r2,1
   80bf4:	d8800215 	stw	r2,8(sp)
   80bf8:	d8000315 	stw	zero,12(sp)
   80bfc:	01000434 	movhi	r4,16
   80c00:	21000004 	addi	r4,r4,0
   80c04:	01400434 	movhi	r5,16
   80c08:	29400804 	addi	r5,r5,32
   80c0c:	01800274 	movhi	r6,9
   80c10:	31b01a04 	addi	r6,r6,-16280
   80c14:	01c01004 	movi	r7,64
   80c18:	0083e780 	call	83e78 <alt_avalon_sgdma_construct_mem_to_stream_desc>
				alt_avalon_sgdma_do_async_transfer( sgdma_tx_dev, &tx_descriptor );
   80c1c:	d0a6cb17 	ldw	r2,-25812(gp)
   80c20:	1009883a 	mov	r4,r2
   80c24:	01400434 	movhi	r5,16
   80c28:	29400004 	addi	r5,r5,0
   80c2c:	0083a840 	call	83a84 <alt_avalon_sgdma_do_async_transfer>
				while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor) != 0);
   80c30:	0001883a 	nop
   80c34:	01000434 	movhi	r4,16
   80c38:	21000004 	addi	r4,r4,0
   80c3c:	00840740 	call	84074 <alt_avalon_sgdma_check_descriptor_status>
   80c40:	103ffc1e 	bne	r2,zero,80c34 <rx_descriptor_end+0xfff80bd4>

		/************ Starting Timer for FIN Packet *******************************/
				IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0x0002);
   80c44:	00800084 	movi	r2,2
   80c48:	0007883a 	mov	r3,zero
   80c4c:	18800035 	stwio	r2,0(r3)
				IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE , 0xAAAA);
   80c50:	00eaaa94 	movui	r3,43690
   80c54:	00800204 	movi	r2,8
   80c58:	10c00035 	stwio	r3,0(r2)
				IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE , 0xFFFF);
   80c5c:	00ffffd4 	movui	r3,65535
   80c60:	00800304 	movi	r2,12
   80c64:	10c00035 	stwio	r3,0(r2)
				IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x0007);
   80c68:	00c001c4 	movi	r3,7
   80c6c:	00800104 	movi	r2,4
   80c70:	10c00035 	stwio	r3,0(r2)
				TCP[0].seq_num++;
   80c74:	00800274 	movhi	r2,9
   80c78:	10b03404 	addi	r2,r2,-16176
   80c7c:	1080050b 	ldhu	r2,20(r2)
   80c80:	10800044 	addi	r2,r2,1
   80c84:	1007883a 	mov	r3,r2
   80c88:	00800274 	movhi	r2,9
   80c8c:	10b03404 	addi	r2,r2,-16176
   80c90:	10c0050d 	sth	r3,20(r2)
		}

	/********* condition to check DATA transmission if both switch 1 and 2 are ON *************/
		if(in == 3){
   80c94:	d0a6c917 	ldw	r2,-25820(gp)
   80c98:	108000d8 	cmpnei	r2,r2,3
   80c9c:	1000cf1e 	bne	r2,zero,80fdc <main+0xd50>
			delay++;
   80ca0:	e0bfef17 	ldw	r2,-68(fp)
   80ca4:	10800044 	addi	r2,r2,1
   80ca8:	e0bfef15 	stw	r2,-68(fp)
	/***** setting delay to display LED blinking  *******************************/
			if(data_flag == 1 && delay == 1000000){
   80cac:	d0a6ca03 	ldbu	r2,-25816(gp)
   80cb0:	10803fcc 	andi	r2,r2,255
   80cb4:	10800058 	cmpnei	r2,r2,1
   80cb8:	1000c31e 	bne	r2,zero,80fc8 <main+0xd3c>
   80cbc:	e0ffef17 	ldw	r3,-68(fp)
   80cc0:	008003f4 	movhi	r2,15
   80cc4:	10909004 	addi	r2,r2,16960
   80cc8:	1880bf1e 	bne	r3,r2,80fc8 <main+0xd3c>
				delay = 0;
   80ccc:	e03fef15 	stw	zero,-68(fp)
				data_flag = 0;
   80cd0:	d026ca05 	stb	zero,-25816(gp)
				create_pkt();
   80cd4:	00826700 	call	82670 <create_pkt>
				data++;
   80cd8:	e0bff203 	ldbu	r2,-56(fp)
   80cdc:	10800044 	addi	r2,r2,1
   80ce0:	e0bff205 	stb	r2,-56(fp)
				memcpy(tx_frame+24, "\x08",1);
   80ce4:	01000274 	movhi	r4,9
   80ce8:	21302004 	addi	r4,r4,-16256
   80cec:	01400274 	movhi	r5,9
   80cf0:	29611004 	addi	r5,r5,-31680
   80cf4:	01800044 	movi	r6,1
   80cf8:	00828900 	call	82890 <memcpy>
				memcpy(tx_frame+25, &data, 1);
   80cfc:	00800274 	movhi	r2,9
   80d00:	10b02044 	addi	r2,r2,-16255
   80d04:	e0fff203 	ldbu	r3,-56(fp)
   80d08:	10c00005 	stb	r3,0(r2)
				alt_printf("\n DATA TX_FRAME: %x %x %x %x %x %x    %x %x %x %x %x %x    %x %x   %x %x   %x %x   %x %x   %x %x   %x  %x\n",tx_frame[2],tx_frame[3],tx_frame[4],tx_frame[5],tx_frame[6],tx_frame[7],tx_frame[8],tx_frame[9],tx_frame[10],tx_frame[11],tx_frame[12],tx_frame[13],tx_frame[14],tx_frame[15],tx_frame[16],tx_frame[17],tx_frame[18],tx_frame[19],tx_frame[20],tx_frame[21],tx_frame[22],tx_frame[23],tx_frame[24],tx_frame[25],tx_frame[26]);
   80d0c:	00800274 	movhi	r2,9
   80d10:	10b01a04 	addi	r2,r2,-16280
   80d14:	10800083 	ldbu	r2,2(r2)
   80d18:	10803fcc 	andi	r2,r2,255
   80d1c:	e0bff515 	stw	r2,-44(fp)
   80d20:	00800274 	movhi	r2,9
   80d24:	10b01a04 	addi	r2,r2,-16280
   80d28:	108000c3 	ldbu	r2,3(r2)
   80d2c:	10803fcc 	andi	r2,r2,255
   80d30:	e0bff615 	stw	r2,-40(fp)
   80d34:	00800274 	movhi	r2,9
   80d38:	10b01a04 	addi	r2,r2,-16280
   80d3c:	10800103 	ldbu	r2,4(r2)
   80d40:	17c03fcc 	andi	ra,r2,255
   80d44:	00800274 	movhi	r2,9
   80d48:	10b01a04 	addi	r2,r2,-16280
   80d4c:	10800143 	ldbu	r2,5(r2)
   80d50:	11003fcc 	andi	r4,r2,255
   80d54:	00800274 	movhi	r2,9
   80d58:	10b01a04 	addi	r2,r2,-16280
   80d5c:	10800183 	ldbu	r2,6(r2)
   80d60:	15c03fcc 	andi	r23,r2,255
   80d64:	00800274 	movhi	r2,9
   80d68:	10b01a04 	addi	r2,r2,-16280
   80d6c:	108001c3 	ldbu	r2,7(r2)
   80d70:	15803fcc 	andi	r22,r2,255
   80d74:	00800274 	movhi	r2,9
   80d78:	10b01a04 	addi	r2,r2,-16280
   80d7c:	10800203 	ldbu	r2,8(r2)
   80d80:	15403fcc 	andi	r21,r2,255
   80d84:	00800274 	movhi	r2,9
   80d88:	10b01a04 	addi	r2,r2,-16280
   80d8c:	10800243 	ldbu	r2,9(r2)
   80d90:	15003fcc 	andi	r20,r2,255
   80d94:	00800274 	movhi	r2,9
   80d98:	10b01a04 	addi	r2,r2,-16280
   80d9c:	10800283 	ldbu	r2,10(r2)
   80da0:	14c03fcc 	andi	r19,r2,255
   80da4:	00800274 	movhi	r2,9
   80da8:	10b01a04 	addi	r2,r2,-16280
   80dac:	108002c3 	ldbu	r2,11(r2)
   80db0:	14803fcc 	andi	r18,r2,255
   80db4:	00800274 	movhi	r2,9
   80db8:	10b01a04 	addi	r2,r2,-16280
   80dbc:	10800303 	ldbu	r2,12(r2)
   80dc0:	14403fcc 	andi	r17,r2,255
   80dc4:	00800274 	movhi	r2,9
   80dc8:	10b01a04 	addi	r2,r2,-16280
   80dcc:	10800343 	ldbu	r2,13(r2)
   80dd0:	14003fcc 	andi	r16,r2,255
   80dd4:	00800274 	movhi	r2,9
   80dd8:	10b01a04 	addi	r2,r2,-16280
   80ddc:	10800383 	ldbu	r2,14(r2)
   80de0:	13c03fcc 	andi	r15,r2,255
   80de4:	00800274 	movhi	r2,9
   80de8:	10b01a04 	addi	r2,r2,-16280
   80dec:	108003c3 	ldbu	r2,15(r2)
   80df0:	13803fcc 	andi	r14,r2,255
   80df4:	00800274 	movhi	r2,9
   80df8:	10b01a04 	addi	r2,r2,-16280
   80dfc:	10800403 	ldbu	r2,16(r2)
   80e00:	13403fcc 	andi	r13,r2,255
   80e04:	00800274 	movhi	r2,9
   80e08:	10b01a04 	addi	r2,r2,-16280
   80e0c:	10800443 	ldbu	r2,17(r2)
   80e10:	13003fcc 	andi	r12,r2,255
   80e14:	00800274 	movhi	r2,9
   80e18:	10b01a04 	addi	r2,r2,-16280
   80e1c:	10800483 	ldbu	r2,18(r2)
   80e20:	12c03fcc 	andi	r11,r2,255
   80e24:	00800274 	movhi	r2,9
   80e28:	10b01a04 	addi	r2,r2,-16280
   80e2c:	108004c3 	ldbu	r2,19(r2)
   80e30:	12803fcc 	andi	r10,r2,255
   80e34:	00800274 	movhi	r2,9
   80e38:	10b01a04 	addi	r2,r2,-16280
   80e3c:	10800503 	ldbu	r2,20(r2)
   80e40:	12403fcc 	andi	r9,r2,255
   80e44:	00800274 	movhi	r2,9
   80e48:	10b01a04 	addi	r2,r2,-16280
   80e4c:	10800543 	ldbu	r2,21(r2)
   80e50:	12003fcc 	andi	r8,r2,255
   80e54:	00800274 	movhi	r2,9
   80e58:	10b01a04 	addi	r2,r2,-16280
   80e5c:	10800583 	ldbu	r2,22(r2)
   80e60:	11c03fcc 	andi	r7,r2,255
   80e64:	00800274 	movhi	r2,9
   80e68:	10b01a04 	addi	r2,r2,-16280
   80e6c:	108005c3 	ldbu	r2,23(r2)
   80e70:	11803fcc 	andi	r6,r2,255
   80e74:	00800274 	movhi	r2,9
   80e78:	10b01a04 	addi	r2,r2,-16280
   80e7c:	10800603 	ldbu	r2,24(r2)
   80e80:	11403fcc 	andi	r5,r2,255
   80e84:	00800274 	movhi	r2,9
   80e88:	10b01a04 	addi	r2,r2,-16280
   80e8c:	10800643 	ldbu	r2,25(r2)
   80e90:	10c03fcc 	andi	r3,r2,255
   80e94:	00800274 	movhi	r2,9
   80e98:	10b01a04 	addi	r2,r2,-16280
   80e9c:	10800683 	ldbu	r2,26(r2)
   80ea0:	10803fcc 	andi	r2,r2,255
   80ea4:	d9000015 	stw	r4,0(sp)
   80ea8:	ddc00115 	stw	r23,4(sp)
   80eac:	dd800215 	stw	r22,8(sp)
   80eb0:	dd400315 	stw	r21,12(sp)
   80eb4:	dd000415 	stw	r20,16(sp)
   80eb8:	dcc00515 	stw	r19,20(sp)
   80ebc:	dc800615 	stw	r18,24(sp)
   80ec0:	dc400715 	stw	r17,28(sp)
   80ec4:	dc000815 	stw	r16,32(sp)
   80ec8:	dbc00915 	stw	r15,36(sp)
   80ecc:	db800a15 	stw	r14,40(sp)
   80ed0:	db400b15 	stw	r13,44(sp)
   80ed4:	db000c15 	stw	r12,48(sp)
   80ed8:	dac00d15 	stw	r11,52(sp)
   80edc:	da800e15 	stw	r10,56(sp)
   80ee0:	da400f15 	stw	r9,60(sp)
   80ee4:	da001015 	stw	r8,64(sp)
   80ee8:	d9c01115 	stw	r7,68(sp)
   80eec:	d9801215 	stw	r6,72(sp)
   80ef0:	d9401315 	stw	r5,76(sp)
   80ef4:	d8c01415 	stw	r3,80(sp)
   80ef8:	d8801515 	stw	r2,84(sp)
   80efc:	01000274 	movhi	r4,9
   80f00:	21211104 	addi	r4,r4,-31676
   80f04:	e17ff517 	ldw	r5,-44(fp)
   80f08:	e1bff617 	ldw	r6,-40(fp)
   80f0c:	f80f883a 	mov	r7,ra
   80f10:	0082c8c0 	call	82c8c <alt_printf>
				alt_dcache_flush_all();
   80f14:	0082aec0 	call	82aec <alt_dcache_flush_all>
				alt_avalon_sgdma_construct_mem_to_stream_desc(&tx_descriptor, &tx_descriptor_end, (alt_u32 *)tx_frame, 64, 0, 1, 1, 0);
   80f18:	d8000015 	stw	zero,0(sp)
   80f1c:	00800044 	movi	r2,1
   80f20:	d8800115 	stw	r2,4(sp)
   80f24:	00800044 	movi	r2,1
   80f28:	d8800215 	stw	r2,8(sp)
   80f2c:	d8000315 	stw	zero,12(sp)
   80f30:	01000434 	movhi	r4,16
   80f34:	21000004 	addi	r4,r4,0
   80f38:	01400434 	movhi	r5,16
   80f3c:	29400804 	addi	r5,r5,32
   80f40:	01800274 	movhi	r6,9
   80f44:	31b01a04 	addi	r6,r6,-16280
   80f48:	01c01004 	movi	r7,64
   80f4c:	0083e780 	call	83e78 <alt_avalon_sgdma_construct_mem_to_stream_desc>
				alt_avalon_sgdma_do_async_transfer( sgdma_tx_dev, &tx_descriptor );
   80f50:	d0a6cb17 	ldw	r2,-25812(gp)
   80f54:	1009883a 	mov	r4,r2
   80f58:	01400434 	movhi	r5,16
   80f5c:	29400004 	addi	r5,r5,0
   80f60:	0083a840 	call	83a84 <alt_avalon_sgdma_do_async_transfer>
				while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor) != 0);
   80f64:	0001883a 	nop
   80f68:	01000434 	movhi	r4,16
   80f6c:	21000004 	addi	r4,r4,0
   80f70:	00840740 	call	84074 <alt_avalon_sgdma_check_descriptor_status>
   80f74:	103ffc1e 	bne	r2,zero,80f68 <rx_descriptor_end+0xfff80f08>

	/*** Starting Timer for DATA transmission  ****************************************/

				IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0x0002);
   80f78:	00800084 	movi	r2,2
   80f7c:	0007883a 	mov	r3,zero
   80f80:	18800035 	stwio	r2,0(r3)
				IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE , 0xAAAA);
   80f84:	00eaaa94 	movui	r3,43690
   80f88:	00800204 	movi	r2,8
   80f8c:	10c00035 	stwio	r3,0(r2)
				IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE , 0x002F);
   80f90:	00c00bc4 	movi	r3,47
   80f94:	00800304 	movi	r2,12
   80f98:	10c00035 	stwio	r3,0(r2)
				IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x0007);
   80f9c:	00c001c4 	movi	r3,7
   80fa0:	00800104 	movi	r2,4
   80fa4:	10c00035 	stwio	r3,0(r2)
				TCP[0].seq_num++;
   80fa8:	00800274 	movhi	r2,9
   80fac:	10b03404 	addi	r2,r2,-16176
   80fb0:	1080050b 	ldhu	r2,20(r2)
   80fb4:	10800044 	addi	r2,r2,1
   80fb8:	1007883a 	mov	r3,r2
   80fbc:	00800274 	movhi	r2,9
   80fc0:	10b03404 	addi	r2,r2,-16176
   80fc4:	10c0050d 	sth	r3,20(r2)
			}
			if (delay > 1000000){
   80fc8:	e0ffef17 	ldw	r3,-68(fp)
   80fcc:	008003f4 	movhi	r2,15
   80fd0:	10909004 	addi	r2,r2,16960
   80fd4:	10c0010e 	bge	r2,r3,80fdc <main+0xd50>
				delay=0;
   80fd8:	e03fef15 	stw	zero,-68(fp)
			}
		}

/******* Condition to check for re transmission *************************************/
/*** Stop Retransmitting and exit if retransmit count reaches 16 ********************/
		n = IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE);
   80fdc:	0005883a 	mov	r2,zero
   80fe0:	10800037 	ldwio	r2,0(r2)
   80fe4:	e0bff115 	stw	r2,-60(fp)
		if(n == 3){
   80fe8:	e0bff117 	ldw	r2,-60(fp)
   80fec:	108000d8 	cmpnei	r2,r2,3
   80ff0:	1000b61e 	bne	r2,zero,812cc <main+0x1040>
			retr_count++;
   80ff4:	d0a6c843 	ldbu	r2,-25823(gp)
   80ff8:	10800044 	addi	r2,r2,1
   80ffc:	d0a6c845 	stb	r2,-25823(gp)
				if(retr_count>=50){
   81000:	d0a6c843 	ldbu	r2,-25823(gp)
   81004:	10803fcc 	andi	r2,r2,255
   81008:	10800cb0 	cmpltui	r2,r2,50
   8100c:	1000051e 	bne	r2,zero,81024 <main+0xd98>
					retr_count = 0;
   81010:	d026c845 	stb	zero,-25823(gp)
					alt_printf("\n retransmission limit exceeded, DISCONNECTED!!!");
   81014:	01000274 	movhi	r4,9
   81018:	21212c04 	addi	r4,r4,-31568
   8101c:	0082c8c0 	call	82c8c <alt_printf>
					break;
   81020:	0000ab06 	br	812d0 <main+0x1044>
						}
/*** Stopping Timer if already running and starting timer for Data transmission ******************************************/
			IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x0008);
   81024:	00c00204 	movi	r3,8
   81028:	00800104 	movi	r2,4
   8102c:	10c00035 	stwio	r3,0(r2)
			IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0x0002);
   81030:	00800084 	movi	r2,2
   81034:	0007883a 	mov	r3,zero
   81038:	18800035 	stwio	r2,0(r3)

			//Transmit Function
			alt_printf("\n RE TX_FRAME: %x %x %x %x %x %x    %x %x %x %x %x %x    %x %x   %x %x   %x %x   %x %x   %x %x   %x \n",tx_frame[2],tx_frame[3],tx_frame[4],tx_frame[5],tx_frame[6],tx_frame[7],tx_frame[8],tx_frame[9],tx_frame[10],tx_frame[11],tx_frame[12],tx_frame[13],tx_frame[14],tx_frame[15],tx_frame[16],tx_frame[17],tx_frame[18],tx_frame[19],tx_frame[20],tx_frame[21],tx_frame[22],tx_frame[23],tx_frame[24],tx_frame[25]);
   8103c:	00800274 	movhi	r2,9
   81040:	10b01a04 	addi	r2,r2,-16280
   81044:	10800083 	ldbu	r2,2(r2)
   81048:	10803fcc 	andi	r2,r2,255
   8104c:	e0bff715 	stw	r2,-36(fp)
   81050:	00800274 	movhi	r2,9
   81054:	10b01a04 	addi	r2,r2,-16280
   81058:	108000c3 	ldbu	r2,3(r2)
   8105c:	17c03fcc 	andi	ra,r2,255
   81060:	00800274 	movhi	r2,9
   81064:	10b01a04 	addi	r2,r2,-16280
   81068:	10800103 	ldbu	r2,4(r2)
   8106c:	15c03fcc 	andi	r23,r2,255
   81070:	00800274 	movhi	r2,9
   81074:	10b01a04 	addi	r2,r2,-16280
   81078:	10800143 	ldbu	r2,5(r2)
   8107c:	15803fcc 	andi	r22,r2,255
   81080:	00800274 	movhi	r2,9
   81084:	10b01a04 	addi	r2,r2,-16280
   81088:	10800183 	ldbu	r2,6(r2)
   8108c:	15403fcc 	andi	r21,r2,255
   81090:	00800274 	movhi	r2,9
   81094:	10b01a04 	addi	r2,r2,-16280
   81098:	108001c3 	ldbu	r2,7(r2)
   8109c:	15003fcc 	andi	r20,r2,255
   810a0:	00800274 	movhi	r2,9
   810a4:	10b01a04 	addi	r2,r2,-16280
   810a8:	10800203 	ldbu	r2,8(r2)
   810ac:	14c03fcc 	andi	r19,r2,255
   810b0:	00800274 	movhi	r2,9
   810b4:	10b01a04 	addi	r2,r2,-16280
   810b8:	10800243 	ldbu	r2,9(r2)
   810bc:	14803fcc 	andi	r18,r2,255
   810c0:	00800274 	movhi	r2,9
   810c4:	10b01a04 	addi	r2,r2,-16280
   810c8:	10800283 	ldbu	r2,10(r2)
   810cc:	14403fcc 	andi	r17,r2,255
   810d0:	00800274 	movhi	r2,9
   810d4:	10b01a04 	addi	r2,r2,-16280
   810d8:	108002c3 	ldbu	r2,11(r2)
   810dc:	14003fcc 	andi	r16,r2,255
   810e0:	00800274 	movhi	r2,9
   810e4:	10b01a04 	addi	r2,r2,-16280
   810e8:	10800303 	ldbu	r2,12(r2)
   810ec:	13c03fcc 	andi	r15,r2,255
   810f0:	00800274 	movhi	r2,9
   810f4:	10b01a04 	addi	r2,r2,-16280
   810f8:	10800343 	ldbu	r2,13(r2)
   810fc:	13803fcc 	andi	r14,r2,255
   81100:	00800274 	movhi	r2,9
   81104:	10b01a04 	addi	r2,r2,-16280
   81108:	10800383 	ldbu	r2,14(r2)
   8110c:	13403fcc 	andi	r13,r2,255
   81110:	00800274 	movhi	r2,9
   81114:	10b01a04 	addi	r2,r2,-16280
   81118:	108003c3 	ldbu	r2,15(r2)
   8111c:	13003fcc 	andi	r12,r2,255
   81120:	00800274 	movhi	r2,9
   81124:	10b01a04 	addi	r2,r2,-16280
   81128:	10800403 	ldbu	r2,16(r2)
   8112c:	12c03fcc 	andi	r11,r2,255
   81130:	00800274 	movhi	r2,9
   81134:	10b01a04 	addi	r2,r2,-16280
   81138:	10800443 	ldbu	r2,17(r2)
   8113c:	12803fcc 	andi	r10,r2,255
   81140:	00800274 	movhi	r2,9
   81144:	10b01a04 	addi	r2,r2,-16280
   81148:	10800483 	ldbu	r2,18(r2)
   8114c:	12403fcc 	andi	r9,r2,255
   81150:	00800274 	movhi	r2,9
   81154:	10b01a04 	addi	r2,r2,-16280
   81158:	108004c3 	ldbu	r2,19(r2)
   8115c:	12003fcc 	andi	r8,r2,255
   81160:	00800274 	movhi	r2,9
   81164:	10b01a04 	addi	r2,r2,-16280
   81168:	10800503 	ldbu	r2,20(r2)
   8116c:	11c03fcc 	andi	r7,r2,255
   81170:	00800274 	movhi	r2,9
   81174:	10b01a04 	addi	r2,r2,-16280
   81178:	10800543 	ldbu	r2,21(r2)
   8117c:	11803fcc 	andi	r6,r2,255
   81180:	00800274 	movhi	r2,9
   81184:	10b01a04 	addi	r2,r2,-16280
   81188:	10800583 	ldbu	r2,22(r2)
   8118c:	11403fcc 	andi	r5,r2,255
   81190:	00800274 	movhi	r2,9
   81194:	10b01a04 	addi	r2,r2,-16280
   81198:	108005c3 	ldbu	r2,23(r2)
   8119c:	11003fcc 	andi	r4,r2,255
   811a0:	00800274 	movhi	r2,9
   811a4:	10b01a04 	addi	r2,r2,-16280
   811a8:	10800603 	ldbu	r2,24(r2)
   811ac:	10c03fcc 	andi	r3,r2,255
   811b0:	00800274 	movhi	r2,9
   811b4:	10b01a04 	addi	r2,r2,-16280
   811b8:	10800643 	ldbu	r2,25(r2)
   811bc:	10803fcc 	andi	r2,r2,255
   811c0:	dd800015 	stw	r22,0(sp)
   811c4:	dd400115 	stw	r21,4(sp)
   811c8:	dd000215 	stw	r20,8(sp)
   811cc:	dcc00315 	stw	r19,12(sp)
   811d0:	dc800415 	stw	r18,16(sp)
   811d4:	dc400515 	stw	r17,20(sp)
   811d8:	dc000615 	stw	r16,24(sp)
   811dc:	dbc00715 	stw	r15,28(sp)
   811e0:	db800815 	stw	r14,32(sp)
   811e4:	db400915 	stw	r13,36(sp)
   811e8:	db000a15 	stw	r12,40(sp)
   811ec:	dac00b15 	stw	r11,44(sp)
   811f0:	da800c15 	stw	r10,48(sp)
   811f4:	da400d15 	stw	r9,52(sp)
   811f8:	da000e15 	stw	r8,56(sp)
   811fc:	d9c00f15 	stw	r7,60(sp)
   81200:	d9801015 	stw	r6,64(sp)
   81204:	d9401115 	stw	r5,68(sp)
   81208:	d9001215 	stw	r4,72(sp)
   8120c:	d8c01315 	stw	r3,76(sp)
   81210:	d8801415 	stw	r2,80(sp)
   81214:	01000274 	movhi	r4,9
   81218:	21213904 	addi	r4,r4,-31516
   8121c:	e17ff717 	ldw	r5,-36(fp)
   81220:	f80d883a 	mov	r6,ra
   81224:	b80f883a 	mov	r7,r23
   81228:	0082c8c0 	call	82c8c <alt_printf>
			alt_dcache_flush_all();
   8122c:	0082aec0 	call	82aec <alt_dcache_flush_all>
			alt_avalon_sgdma_construct_mem_to_stream_desc(&tx_descriptor, &tx_descriptor_end, (alt_u32 *)tx_frame, 64, 0, 1, 1, 0);
   81230:	d8000015 	stw	zero,0(sp)
   81234:	00800044 	movi	r2,1
   81238:	d8800115 	stw	r2,4(sp)
   8123c:	00800044 	movi	r2,1
   81240:	d8800215 	stw	r2,8(sp)
   81244:	d8000315 	stw	zero,12(sp)
   81248:	01000434 	movhi	r4,16
   8124c:	21000004 	addi	r4,r4,0
   81250:	01400434 	movhi	r5,16
   81254:	29400804 	addi	r5,r5,32
   81258:	01800274 	movhi	r6,9
   8125c:	31b01a04 	addi	r6,r6,-16280
   81260:	01c01004 	movi	r7,64
   81264:	0083e780 	call	83e78 <alt_avalon_sgdma_construct_mem_to_stream_desc>
			alt_avalon_sgdma_do_async_transfer( sgdma_tx_dev, &tx_descriptor );
   81268:	d0a6cb17 	ldw	r2,-25812(gp)
   8126c:	1009883a 	mov	r4,r2
   81270:	01400434 	movhi	r5,16
   81274:	29400004 	addi	r5,r5,0
   81278:	0083a840 	call	83a84 <alt_avalon_sgdma_do_async_transfer>
			while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor) != 0);
   8127c:	0001883a 	nop
   81280:	01000434 	movhi	r4,16
   81284:	21000004 	addi	r4,r4,0
   81288:	00840740 	call	84074 <alt_avalon_sgdma_check_descriptor_status>
   8128c:	103ffc1e 	bne	r2,zero,81280 <rx_descriptor_end+0xfff81220>

			/************************ start timer******************************************/
			IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE , 0xAAAA);
   81290:	00eaaa94 	movui	r3,43690
   81294:	00800204 	movi	r2,8
   81298:	10c00035 	stwio	r3,0(r2)
			IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE , 0x02FF);
   8129c:	00c0bfc4 	movi	r3,767
   812a0:	00800304 	movi	r2,12
   812a4:	10c00035 	stwio	r3,0(r2)
			IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x0007);
   812a8:	00c001c4 	movi	r3,7
   812ac:	00800104 	movi	r2,4
   812b0:	10c00035 	stwio	r3,0(r2)
			alt_printf("\nRetx timer started for SYN, status:%d  count:%d,",IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE));
   812b4:	0005883a 	mov	r2,zero
   812b8:	10800037 	ldwio	r2,0(r2)
   812bc:	01000274 	movhi	r4,9
   812c0:	21215304 	addi	r4,r4,-31412
   812c4:	100b883a 	mov	r5,r2
   812c8:	0082c8c0 	call	82c8c <alt_printf>

		}
	}
   812cc:	003ce406 	br	80660 <rx_descriptor_end+0xfff80600>
	return 0;
   812d0:	0005883a 	mov	r2,zero
}
   812d4:	e6fff804 	addi	sp,fp,-32
   812d8:	dfc00917 	ldw	ra,36(sp)
   812dc:	df000817 	ldw	fp,32(sp)
   812e0:	ddc00717 	ldw	r23,28(sp)
   812e4:	dd800617 	ldw	r22,24(sp)
   812e8:	dd400517 	ldw	r21,20(sp)
   812ec:	dd000417 	ldw	r20,16(sp)
   812f0:	dcc00317 	ldw	r19,12(sp)
   812f4:	dc800217 	ldw	r18,8(sp)
   812f8:	dc400117 	ldw	r17,4(sp)
   812fc:	dc000017 	ldw	r16,0(sp)
   81300:	dec00a04 	addi	sp,sp,40
   81304:	f800283a 	ret

00081308 <rx_ethernet_isr>:

/****************************************************************************************
 * Subroutine to read incoming Ethernet frames
****************************************************************************************/
void rx_ethernet_isr (void *context)
{
   81308:	deffd704 	addi	sp,sp,-164
   8130c:	dfc02815 	stw	ra,160(sp)
   81310:	df002715 	stw	fp,156(sp)
   81314:	ddc02615 	stw	r23,152(sp)
   81318:	dd802515 	stw	r22,148(sp)
   8131c:	dd402415 	stw	r21,144(sp)
   81320:	dd002315 	stw	r20,140(sp)
   81324:	dcc02215 	stw	r19,136(sp)
   81328:	dc802115 	stw	r18,132(sp)
   8132c:	dc402015 	stw	r17,128(sp)
   81330:	dc001f15 	stw	r16,124(sp)
   81334:	df002704 	addi	fp,sp,156
   81338:	e13fef15 	stw	r4,-68(fp)
	retr_count = 0;
   8133c:	d026c845 	stb	zero,-25823(gp)
	pckt_rxed++;
   81340:	d0a6c617 	ldw	r2,-25832(gp)
   81344:	10800044 	addi	r2,r2,1
   81348:	d0a6c615 	stw	r2,-25832(gp)
	in =  IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE); //read the input from the switch
   8134c:	00800434 	movhi	r2,16
   81350:	10892004 	addi	r2,r2,9344
   81354:	10800037 	ldwio	r2,0(r2)
   81358:	d0a6c915 	stw	r2,-25820(gp)

/***** If switch 3 is ON drop receiving packets ***************************************/

	if((in == 4)||(in == 5)||(in == 6)||(in == 7)){
   8135c:	d0a6c917 	ldw	r2,-25820(gp)
   81360:	10800120 	cmpeqi	r2,r2,4
   81364:	1000091e 	bne	r2,zero,8138c <rx_ethernet_isr+0x84>
   81368:	d0a6c917 	ldw	r2,-25820(gp)
   8136c:	10800160 	cmpeqi	r2,r2,5
   81370:	1000061e 	bne	r2,zero,8138c <rx_ethernet_isr+0x84>
   81374:	d0a6c917 	ldw	r2,-25820(gp)
   81378:	108001a0 	cmpeqi	r2,r2,6
   8137c:	1000031e 	bne	r2,zero,8138c <rx_ethernet_isr+0x84>
   81380:	d0a6c917 	ldw	r2,-25820(gp)
   81384:	108001d8 	cmpnei	r2,r2,7
   81388:	1000141e 	bne	r2,zero,813dc <rx_ethernet_isr+0xd4>
			while (alt_avalon_sgdma_check_descriptor_status(&rx_descriptor) != 0);
   8138c:	0001883a 	nop
   81390:	01000434 	movhi	r4,16
   81394:	21001004 	addi	r4,r4,64
   81398:	00840740 	call	84074 <alt_avalon_sgdma_check_descriptor_status>
   8139c:	103ffc1e 	bne	r2,zero,81390 <rx_descriptor_end+0xfff81330>
			// Create new receive sgdma descriptor
			alt_avalon_sgdma_construct_stream_to_mem_desc( &rx_descriptor, &rx_descriptor_end, (alt_u32 *)rx_frame, 0, 0 );
   813a0:	d8000015 	stw	zero,0(sp)
   813a4:	01000434 	movhi	r4,16
   813a8:	21001004 	addi	r4,r4,64
   813ac:	01400434 	movhi	r5,16
   813b0:	29401804 	addi	r5,r5,96
   813b4:	01800274 	movhi	r6,9
   813b8:	31b00a04 	addi	r6,r6,-16344
   813bc:	000f883a 	mov	r7,zero
   813c0:	0083da80 	call	83da8 <alt_avalon_sgdma_construct_stream_to_mem_desc>
			// Set up non-blocking transfer of sgdma receive descriptor
			alt_avalon_sgdma_do_async_transfer( sgdma_rx_dev, &rx_descriptor );
   813c4:	d0a6cc17 	ldw	r2,-25808(gp)
   813c8:	1009883a 	mov	r4,r2
   813cc:	01400434 	movhi	r5,16
   813d0:	29401004 	addi	r5,r5,64
   813d4:	0083a840 	call	83a84 <alt_avalon_sgdma_do_async_transfer>
			return;
   813d8:	00049806 	br	8263c <rx_ethernet_isr+0x1334>
	}

	alt_printf("\nRX_FRAME: %x %x %x %x %x %x   %x %x %x %x %x %x    %x %x   %x %x   %x %x   %x %x   %x %x  %x  %x\n",rx_frame[2],rx_frame[3],rx_frame[4],rx_frame[5],rx_frame[6],rx_frame[7],rx_frame[8],rx_frame[9],rx_frame[10],rx_frame[11],rx_frame[12],rx_frame[13],rx_frame[14],rx_frame[15],rx_frame[16],rx_frame[17],rx_frame[18],rx_frame[19],rx_frame[20],rx_frame[21],rx_frame[22],rx_frame[23],rx_frame[24],rx_frame[25],rx_frame[26]);
   813dc:	00800274 	movhi	r2,9
   813e0:	10b00a04 	addi	r2,r2,-16344
   813e4:	10800083 	ldbu	r2,2(r2)
   813e8:	10803fcc 	andi	r2,r2,255
   813ec:	e0bff015 	stw	r2,-64(fp)
   813f0:	00800274 	movhi	r2,9
   813f4:	10b00a04 	addi	r2,r2,-16344
   813f8:	108000c3 	ldbu	r2,3(r2)
   813fc:	10803fcc 	andi	r2,r2,255
   81400:	e0bff115 	stw	r2,-60(fp)
   81404:	00800274 	movhi	r2,9
   81408:	10b00a04 	addi	r2,r2,-16344
   8140c:	10800103 	ldbu	r2,4(r2)
   81410:	17c03fcc 	andi	ra,r2,255
   81414:	00800274 	movhi	r2,9
   81418:	10b00a04 	addi	r2,r2,-16344
   8141c:	10800143 	ldbu	r2,5(r2)
   81420:	11003fcc 	andi	r4,r2,255
   81424:	00800274 	movhi	r2,9
   81428:	10b00a04 	addi	r2,r2,-16344
   8142c:	10800183 	ldbu	r2,6(r2)
   81430:	15c03fcc 	andi	r23,r2,255
   81434:	00800274 	movhi	r2,9
   81438:	10b00a04 	addi	r2,r2,-16344
   8143c:	108001c3 	ldbu	r2,7(r2)
   81440:	15803fcc 	andi	r22,r2,255
   81444:	00800274 	movhi	r2,9
   81448:	10b00a04 	addi	r2,r2,-16344
   8144c:	10800203 	ldbu	r2,8(r2)
   81450:	15403fcc 	andi	r21,r2,255
   81454:	00800274 	movhi	r2,9
   81458:	10b00a04 	addi	r2,r2,-16344
   8145c:	10800243 	ldbu	r2,9(r2)
   81460:	15003fcc 	andi	r20,r2,255
   81464:	00800274 	movhi	r2,9
   81468:	10b00a04 	addi	r2,r2,-16344
   8146c:	10800283 	ldbu	r2,10(r2)
   81470:	14c03fcc 	andi	r19,r2,255
   81474:	00800274 	movhi	r2,9
   81478:	10b00a04 	addi	r2,r2,-16344
   8147c:	108002c3 	ldbu	r2,11(r2)
   81480:	14803fcc 	andi	r18,r2,255
   81484:	00800274 	movhi	r2,9
   81488:	10b00a04 	addi	r2,r2,-16344
   8148c:	10800303 	ldbu	r2,12(r2)
   81490:	14403fcc 	andi	r17,r2,255
   81494:	00800274 	movhi	r2,9
   81498:	10b00a04 	addi	r2,r2,-16344
   8149c:	10800343 	ldbu	r2,13(r2)
   814a0:	14003fcc 	andi	r16,r2,255
   814a4:	00800274 	movhi	r2,9
   814a8:	10b00a04 	addi	r2,r2,-16344
   814ac:	10800383 	ldbu	r2,14(r2)
   814b0:	13c03fcc 	andi	r15,r2,255
   814b4:	00800274 	movhi	r2,9
   814b8:	10b00a04 	addi	r2,r2,-16344
   814bc:	108003c3 	ldbu	r2,15(r2)
   814c0:	13803fcc 	andi	r14,r2,255
   814c4:	00800274 	movhi	r2,9
   814c8:	10b00a04 	addi	r2,r2,-16344
   814cc:	10800403 	ldbu	r2,16(r2)
   814d0:	13403fcc 	andi	r13,r2,255
   814d4:	00800274 	movhi	r2,9
   814d8:	10b00a04 	addi	r2,r2,-16344
   814dc:	10800443 	ldbu	r2,17(r2)
   814e0:	13003fcc 	andi	r12,r2,255
   814e4:	00800274 	movhi	r2,9
   814e8:	10b00a04 	addi	r2,r2,-16344
   814ec:	10800483 	ldbu	r2,18(r2)
   814f0:	12c03fcc 	andi	r11,r2,255
   814f4:	00800274 	movhi	r2,9
   814f8:	10b00a04 	addi	r2,r2,-16344
   814fc:	108004c3 	ldbu	r2,19(r2)
   81500:	12803fcc 	andi	r10,r2,255
   81504:	00800274 	movhi	r2,9
   81508:	10b00a04 	addi	r2,r2,-16344
   8150c:	10800503 	ldbu	r2,20(r2)
   81510:	12403fcc 	andi	r9,r2,255
   81514:	00800274 	movhi	r2,9
   81518:	10b00a04 	addi	r2,r2,-16344
   8151c:	10800543 	ldbu	r2,21(r2)
   81520:	12003fcc 	andi	r8,r2,255
   81524:	00800274 	movhi	r2,9
   81528:	10b00a04 	addi	r2,r2,-16344
   8152c:	10800583 	ldbu	r2,22(r2)
   81530:	11c03fcc 	andi	r7,r2,255
   81534:	00800274 	movhi	r2,9
   81538:	10b00a04 	addi	r2,r2,-16344
   8153c:	108005c3 	ldbu	r2,23(r2)
   81540:	11803fcc 	andi	r6,r2,255
   81544:	00800274 	movhi	r2,9
   81548:	10b00a04 	addi	r2,r2,-16344
   8154c:	10800603 	ldbu	r2,24(r2)
   81550:	11403fcc 	andi	r5,r2,255
   81554:	00800274 	movhi	r2,9
   81558:	10b00a04 	addi	r2,r2,-16344
   8155c:	10800643 	ldbu	r2,25(r2)
   81560:	10c03fcc 	andi	r3,r2,255
   81564:	00800274 	movhi	r2,9
   81568:	10b00a04 	addi	r2,r2,-16344
   8156c:	10800683 	ldbu	r2,26(r2)
   81570:	10803fcc 	andi	r2,r2,255
   81574:	d9000015 	stw	r4,0(sp)
   81578:	ddc00115 	stw	r23,4(sp)
   8157c:	dd800215 	stw	r22,8(sp)
   81580:	dd400315 	stw	r21,12(sp)
   81584:	dd000415 	stw	r20,16(sp)
   81588:	dcc00515 	stw	r19,20(sp)
   8158c:	dc800615 	stw	r18,24(sp)
   81590:	dc400715 	stw	r17,28(sp)
   81594:	dc000815 	stw	r16,32(sp)
   81598:	dbc00915 	stw	r15,36(sp)
   8159c:	db800a15 	stw	r14,40(sp)
   815a0:	db400b15 	stw	r13,44(sp)
   815a4:	db000c15 	stw	r12,48(sp)
   815a8:	dac00d15 	stw	r11,52(sp)
   815ac:	da800e15 	stw	r10,56(sp)
   815b0:	da400f15 	stw	r9,60(sp)
   815b4:	da001015 	stw	r8,64(sp)
   815b8:	d9c01115 	stw	r7,68(sp)
   815bc:	d9801215 	stw	r6,72(sp)
   815c0:	d9401315 	stw	r5,76(sp)
   815c4:	d8c01415 	stw	r3,80(sp)
   815c8:	d8801515 	stw	r2,84(sp)
   815cc:	01000274 	movhi	r4,9
   815d0:	21216004 	addi	r4,r4,-31360
   815d4:	e17ff017 	ldw	r5,-64(fp)
   815d8:	e1bff117 	ldw	r6,-60(fp)
   815dc:	f80f883a 	mov	r7,ra
   815e0:	0082c8c0 	call	82c8c <alt_printf>
	alt_dcache_flush_all();
   815e4:	0082aec0 	call	82aec <alt_dcache_flush_all>

	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x0008);
   815e8:	00c00204 	movi	r3,8
   815ec:	00800104 	movi	r2,4
   815f0:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0x0000);
   815f4:	0007883a 	mov	r3,zero
   815f8:	0005883a 	mov	r2,zero
   815fc:	10c00035 	stwio	r3,0(r2)

	succ_rxed++; // successfully received frame incrementing upon reception
   81600:	d0a6c717 	ldw	r2,-25828(gp)
   81604:	10800044 	addi	r2,r2,1
   81608:	d0a6c715 	stw	r2,-25828(gp)
	/**** check if SYN frame is received *********************************************/
		if ( rx_frame [24] == 0x01) {
   8160c:	00800274 	movhi	r2,9
   81610:	10b00a04 	addi	r2,r2,-16344
   81614:	10800603 	ldbu	r2,24(r2)
   81618:	10803fcc 	andi	r2,r2,255
   8161c:	10800058 	cmpnei	r2,r2,1
   81620:	1000af1e 	bne	r2,zero,818e0 <rx_ethernet_isr+0x5d8>
			TCP[0].link = 1;
   81624:	00800274 	movhi	r2,9
   81628:	10b03404 	addi	r2,r2,-16176
   8162c:	00c00044 	movi	r3,1
   81630:	10c00005 	stb	r3,0(r2)

	/******* Sending SYN-ACK Frame ***************************************/

			TCP[0].ack_num++;
   81634:	00800274 	movhi	r2,9
   81638:	10b03404 	addi	r2,r2,-16176
   8163c:	1080048b 	ldhu	r2,18(r2)
   81640:	10800044 	addi	r2,r2,1
   81644:	1007883a 	mov	r3,r2
   81648:	00800274 	movhi	r2,9
   8164c:	10b03404 	addi	r2,r2,-16176
   81650:	10c0048d 	sth	r3,18(r2)
			create_pkt();
   81654:	00826700 	call	82670 <create_pkt>
			memmove(tx_frame+24,"\x05",1);//Setting syn-ack
   81658:	00800274 	movhi	r2,9
   8165c:	10b02004 	addi	r2,r2,-16256
   81660:	00c00144 	movi	r3,5
   81664:	10c00005 	stb	r3,0(r2)

			//transmit_packet();
			alt_printf("\n SYN/ACK TX_FRAME: %x %x %x %x %x %x    %x %x %x %x %x %x    %x %x   %x %x   %x %x   %x %x   %x %x   %x \n",tx_frame[2],tx_frame[3],tx_frame[4],tx_frame[5],tx_frame[6],tx_frame[7],tx_frame[8],tx_frame[9],tx_frame[10],tx_frame[11],tx_frame[12],tx_frame[13],tx_frame[14],tx_frame[15],tx_frame[16],tx_frame[17],tx_frame[18],tx_frame[19],tx_frame[20],tx_frame[21],tx_frame[22],tx_frame[23],tx_frame[24],tx_frame[25]);
   81668:	00800274 	movhi	r2,9
   8166c:	10b01a04 	addi	r2,r2,-16280
   81670:	10800083 	ldbu	r2,2(r2)
   81674:	10803fcc 	andi	r2,r2,255
   81678:	e0bff215 	stw	r2,-56(fp)
   8167c:	00800274 	movhi	r2,9
   81680:	10b01a04 	addi	r2,r2,-16280
   81684:	108000c3 	ldbu	r2,3(r2)
   81688:	17c03fcc 	andi	ra,r2,255
   8168c:	00800274 	movhi	r2,9
   81690:	10b01a04 	addi	r2,r2,-16280
   81694:	10800103 	ldbu	r2,4(r2)
   81698:	15c03fcc 	andi	r23,r2,255
   8169c:	00800274 	movhi	r2,9
   816a0:	10b01a04 	addi	r2,r2,-16280
   816a4:	10800143 	ldbu	r2,5(r2)
   816a8:	15803fcc 	andi	r22,r2,255
   816ac:	00800274 	movhi	r2,9
   816b0:	10b01a04 	addi	r2,r2,-16280
   816b4:	10800183 	ldbu	r2,6(r2)
   816b8:	15403fcc 	andi	r21,r2,255
   816bc:	00800274 	movhi	r2,9
   816c0:	10b01a04 	addi	r2,r2,-16280
   816c4:	108001c3 	ldbu	r2,7(r2)
   816c8:	15003fcc 	andi	r20,r2,255
   816cc:	00800274 	movhi	r2,9
   816d0:	10b01a04 	addi	r2,r2,-16280
   816d4:	10800203 	ldbu	r2,8(r2)
   816d8:	14c03fcc 	andi	r19,r2,255
   816dc:	00800274 	movhi	r2,9
   816e0:	10b01a04 	addi	r2,r2,-16280
   816e4:	10800243 	ldbu	r2,9(r2)
   816e8:	14803fcc 	andi	r18,r2,255
   816ec:	00800274 	movhi	r2,9
   816f0:	10b01a04 	addi	r2,r2,-16280
   816f4:	10800283 	ldbu	r2,10(r2)
   816f8:	14403fcc 	andi	r17,r2,255
   816fc:	00800274 	movhi	r2,9
   81700:	10b01a04 	addi	r2,r2,-16280
   81704:	108002c3 	ldbu	r2,11(r2)
   81708:	14003fcc 	andi	r16,r2,255
   8170c:	00800274 	movhi	r2,9
   81710:	10b01a04 	addi	r2,r2,-16280
   81714:	10800303 	ldbu	r2,12(r2)
   81718:	13c03fcc 	andi	r15,r2,255
   8171c:	00800274 	movhi	r2,9
   81720:	10b01a04 	addi	r2,r2,-16280
   81724:	10800343 	ldbu	r2,13(r2)
   81728:	13803fcc 	andi	r14,r2,255
   8172c:	00800274 	movhi	r2,9
   81730:	10b01a04 	addi	r2,r2,-16280
   81734:	10800383 	ldbu	r2,14(r2)
   81738:	13403fcc 	andi	r13,r2,255
   8173c:	00800274 	movhi	r2,9
   81740:	10b01a04 	addi	r2,r2,-16280
   81744:	108003c3 	ldbu	r2,15(r2)
   81748:	13003fcc 	andi	r12,r2,255
   8174c:	00800274 	movhi	r2,9
   81750:	10b01a04 	addi	r2,r2,-16280
   81754:	10800403 	ldbu	r2,16(r2)
   81758:	12c03fcc 	andi	r11,r2,255
   8175c:	00800274 	movhi	r2,9
   81760:	10b01a04 	addi	r2,r2,-16280
   81764:	10800443 	ldbu	r2,17(r2)
   81768:	12803fcc 	andi	r10,r2,255
   8176c:	00800274 	movhi	r2,9
   81770:	10b01a04 	addi	r2,r2,-16280
   81774:	10800483 	ldbu	r2,18(r2)
   81778:	12403fcc 	andi	r9,r2,255
   8177c:	00800274 	movhi	r2,9
   81780:	10b01a04 	addi	r2,r2,-16280
   81784:	108004c3 	ldbu	r2,19(r2)
   81788:	12003fcc 	andi	r8,r2,255
   8178c:	00800274 	movhi	r2,9
   81790:	10b01a04 	addi	r2,r2,-16280
   81794:	10800503 	ldbu	r2,20(r2)
   81798:	11c03fcc 	andi	r7,r2,255
   8179c:	00800274 	movhi	r2,9
   817a0:	10b01a04 	addi	r2,r2,-16280
   817a4:	10800543 	ldbu	r2,21(r2)
   817a8:	11803fcc 	andi	r6,r2,255
   817ac:	00800274 	movhi	r2,9
   817b0:	10b01a04 	addi	r2,r2,-16280
   817b4:	10800583 	ldbu	r2,22(r2)
   817b8:	11403fcc 	andi	r5,r2,255
   817bc:	00800274 	movhi	r2,9
   817c0:	10b01a04 	addi	r2,r2,-16280
   817c4:	108005c3 	ldbu	r2,23(r2)
   817c8:	11003fcc 	andi	r4,r2,255
   817cc:	00800274 	movhi	r2,9
   817d0:	10b01a04 	addi	r2,r2,-16280
   817d4:	10800603 	ldbu	r2,24(r2)
   817d8:	10c03fcc 	andi	r3,r2,255
   817dc:	00800274 	movhi	r2,9
   817e0:	10b01a04 	addi	r2,r2,-16280
   817e4:	10800643 	ldbu	r2,25(r2)
   817e8:	10803fcc 	andi	r2,r2,255
   817ec:	dd800015 	stw	r22,0(sp)
   817f0:	dd400115 	stw	r21,4(sp)
   817f4:	dd000215 	stw	r20,8(sp)
   817f8:	dcc00315 	stw	r19,12(sp)
   817fc:	dc800415 	stw	r18,16(sp)
   81800:	dc400515 	stw	r17,20(sp)
   81804:	dc000615 	stw	r16,24(sp)
   81808:	dbc00715 	stw	r15,28(sp)
   8180c:	db800815 	stw	r14,32(sp)
   81810:	db400915 	stw	r13,36(sp)
   81814:	db000a15 	stw	r12,40(sp)
   81818:	dac00b15 	stw	r11,44(sp)
   8181c:	da800c15 	stw	r10,48(sp)
   81820:	da400d15 	stw	r9,52(sp)
   81824:	da000e15 	stw	r8,56(sp)
   81828:	d9c00f15 	stw	r7,60(sp)
   8182c:	d9801015 	stw	r6,64(sp)
   81830:	d9401115 	stw	r5,68(sp)
   81834:	d9001215 	stw	r4,72(sp)
   81838:	d8c01315 	stw	r3,76(sp)
   8183c:	d8801415 	stw	r2,80(sp)
   81840:	01000274 	movhi	r4,9
   81844:	21217904 	addi	r4,r4,-31260
   81848:	e17ff217 	ldw	r5,-56(fp)
   8184c:	f80d883a 	mov	r6,ra
   81850:	b80f883a 	mov	r7,r23
   81854:	0082c8c0 	call	82c8c <alt_printf>
			alt_dcache_flush_all();
   81858:	0082aec0 	call	82aec <alt_dcache_flush_all>
			alt_avalon_sgdma_construct_mem_to_stream_desc(&tx_descriptor, &tx_descriptor_end, (alt_u32 *)tx_frame, 64, 0, 1, 1, 0);
   8185c:	d8000015 	stw	zero,0(sp)
   81860:	00800044 	movi	r2,1
   81864:	d8800115 	stw	r2,4(sp)
   81868:	00800044 	movi	r2,1
   8186c:	d8800215 	stw	r2,8(sp)
   81870:	d8000315 	stw	zero,12(sp)
   81874:	01000434 	movhi	r4,16
   81878:	21000004 	addi	r4,r4,0
   8187c:	01400434 	movhi	r5,16
   81880:	29400804 	addi	r5,r5,32
   81884:	01800274 	movhi	r6,9
   81888:	31b01a04 	addi	r6,r6,-16280
   8188c:	01c01004 	movi	r7,64
   81890:	0083e780 	call	83e78 <alt_avalon_sgdma_construct_mem_to_stream_desc>
			alt_avalon_sgdma_do_async_transfer( sgdma_tx_dev, &tx_descriptor );
   81894:	d0a6cb17 	ldw	r2,-25812(gp)
   81898:	1009883a 	mov	r4,r2
   8189c:	01400434 	movhi	r5,16
   818a0:	29400004 	addi	r5,r5,0
   818a4:	0083a840 	call	83a84 <alt_avalon_sgdma_do_async_transfer>
			while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor) != 0);
   818a8:	0001883a 	nop
   818ac:	01000434 	movhi	r4,16
   818b0:	21000004 	addi	r4,r4,0
   818b4:	00840740 	call	84074 <alt_avalon_sgdma_check_descriptor_status>
   818b8:	103ffc1e 	bne	r2,zero,818ac <rx_descriptor_end+0xfff8184c>
			TCP[0].seq_num++;
   818bc:	00800274 	movhi	r2,9
   818c0:	10b03404 	addi	r2,r2,-16176
   818c4:	1080050b 	ldhu	r2,20(r2)
   818c8:	10800044 	addi	r2,r2,1
   818cc:	1007883a 	mov	r3,r2
   818d0:	00800274 	movhi	r2,9
   818d4:	10b03404 	addi	r2,r2,-16176
   818d8:	10c0050d 	sth	r3,20(r2)
   818dc:	00034406 	br	825f0 <rx_ethernet_isr+0x12e8>
		}

	/******************** Syn-Ack recieved *************************************************/
		else if((rx_frame[24]) == 0x05){
   818e0:	00800274 	movhi	r2,9
   818e4:	10b00a04 	addi	r2,r2,-16344
   818e8:	10800603 	ldbu	r2,24(r2)
   818ec:	10803fcc 	andi	r2,r2,255
   818f0:	10800158 	cmpnei	r2,r2,5
   818f4:	1000b11e 	bne	r2,zero,81bbc <rx_ethernet_isr+0x8b4>
			TCP[0].link = 1;
   818f8:	00800274 	movhi	r2,9
   818fc:	10b03404 	addi	r2,r2,-16176
   81900:	00c00044 	movi	r3,1
   81904:	10c00005 	stb	r3,0(r2)

	/**************** Send ACknowledgement ************************************************/
			TCP[0].ack_num++;
   81908:	00800274 	movhi	r2,9
   8190c:	10b03404 	addi	r2,r2,-16176
   81910:	1080048b 	ldhu	r2,18(r2)
   81914:	10800044 	addi	r2,r2,1
   81918:	1007883a 	mov	r3,r2
   8191c:	00800274 	movhi	r2,9
   81920:	10b03404 	addi	r2,r2,-16176
   81924:	10c0048d 	sth	r3,18(r2)
			create_pkt();
   81928:	00826700 	call	82670 <create_pkt>
			memmove(tx_frame+24,"\x04",1);//setting ack
   8192c:	00800274 	movhi	r2,9
   81930:	10b02004 	addi	r2,r2,-16256
   81934:	00c00104 	movi	r3,4
   81938:	10c00005 	stb	r3,0(r2)

			//transmit_packet();
			alt_printf("\n Conn Est Ack TX_FRAME: %x %x %x %x %x %x    %x %x %x %x %x %x    %x %x   %x %x   %x %x   %x %x   %x %x   %x \n",tx_frame[2],tx_frame[3],tx_frame[4],tx_frame[5],tx_frame[6],tx_frame[7],tx_frame[8],tx_frame[9],tx_frame[10],tx_frame[11],tx_frame[12],tx_frame[13],tx_frame[14],tx_frame[15],tx_frame[16],tx_frame[17],tx_frame[18],tx_frame[19],tx_frame[20],tx_frame[21],tx_frame[22],tx_frame[23],tx_frame[24],tx_frame[25]);
   8193c:	00800274 	movhi	r2,9
   81940:	10b01a04 	addi	r2,r2,-16280
   81944:	10800083 	ldbu	r2,2(r2)
   81948:	10803fcc 	andi	r2,r2,255
   8194c:	e0bff315 	stw	r2,-52(fp)
   81950:	00800274 	movhi	r2,9
   81954:	10b01a04 	addi	r2,r2,-16280
   81958:	108000c3 	ldbu	r2,3(r2)
   8195c:	17c03fcc 	andi	ra,r2,255
   81960:	00800274 	movhi	r2,9
   81964:	10b01a04 	addi	r2,r2,-16280
   81968:	10800103 	ldbu	r2,4(r2)
   8196c:	15c03fcc 	andi	r23,r2,255
   81970:	00800274 	movhi	r2,9
   81974:	10b01a04 	addi	r2,r2,-16280
   81978:	10800143 	ldbu	r2,5(r2)
   8197c:	15803fcc 	andi	r22,r2,255
   81980:	00800274 	movhi	r2,9
   81984:	10b01a04 	addi	r2,r2,-16280
   81988:	10800183 	ldbu	r2,6(r2)
   8198c:	15403fcc 	andi	r21,r2,255
   81990:	00800274 	movhi	r2,9
   81994:	10b01a04 	addi	r2,r2,-16280
   81998:	108001c3 	ldbu	r2,7(r2)
   8199c:	15003fcc 	andi	r20,r2,255
   819a0:	00800274 	movhi	r2,9
   819a4:	10b01a04 	addi	r2,r2,-16280
   819a8:	10800203 	ldbu	r2,8(r2)
   819ac:	14c03fcc 	andi	r19,r2,255
   819b0:	00800274 	movhi	r2,9
   819b4:	10b01a04 	addi	r2,r2,-16280
   819b8:	10800243 	ldbu	r2,9(r2)
   819bc:	14803fcc 	andi	r18,r2,255
   819c0:	00800274 	movhi	r2,9
   819c4:	10b01a04 	addi	r2,r2,-16280
   819c8:	10800283 	ldbu	r2,10(r2)
   819cc:	14403fcc 	andi	r17,r2,255
   819d0:	00800274 	movhi	r2,9
   819d4:	10b01a04 	addi	r2,r2,-16280
   819d8:	108002c3 	ldbu	r2,11(r2)
   819dc:	14003fcc 	andi	r16,r2,255
   819e0:	00800274 	movhi	r2,9
   819e4:	10b01a04 	addi	r2,r2,-16280
   819e8:	10800303 	ldbu	r2,12(r2)
   819ec:	13c03fcc 	andi	r15,r2,255
   819f0:	00800274 	movhi	r2,9
   819f4:	10b01a04 	addi	r2,r2,-16280
   819f8:	10800343 	ldbu	r2,13(r2)
   819fc:	13803fcc 	andi	r14,r2,255
   81a00:	00800274 	movhi	r2,9
   81a04:	10b01a04 	addi	r2,r2,-16280
   81a08:	10800383 	ldbu	r2,14(r2)
   81a0c:	13403fcc 	andi	r13,r2,255
   81a10:	00800274 	movhi	r2,9
   81a14:	10b01a04 	addi	r2,r2,-16280
   81a18:	108003c3 	ldbu	r2,15(r2)
   81a1c:	13003fcc 	andi	r12,r2,255
   81a20:	00800274 	movhi	r2,9
   81a24:	10b01a04 	addi	r2,r2,-16280
   81a28:	10800403 	ldbu	r2,16(r2)
   81a2c:	12c03fcc 	andi	r11,r2,255
   81a30:	00800274 	movhi	r2,9
   81a34:	10b01a04 	addi	r2,r2,-16280
   81a38:	10800443 	ldbu	r2,17(r2)
   81a3c:	12803fcc 	andi	r10,r2,255
   81a40:	00800274 	movhi	r2,9
   81a44:	10b01a04 	addi	r2,r2,-16280
   81a48:	10800483 	ldbu	r2,18(r2)
   81a4c:	12403fcc 	andi	r9,r2,255
   81a50:	00800274 	movhi	r2,9
   81a54:	10b01a04 	addi	r2,r2,-16280
   81a58:	108004c3 	ldbu	r2,19(r2)
   81a5c:	12003fcc 	andi	r8,r2,255
   81a60:	00800274 	movhi	r2,9
   81a64:	10b01a04 	addi	r2,r2,-16280
   81a68:	10800503 	ldbu	r2,20(r2)
   81a6c:	11c03fcc 	andi	r7,r2,255
   81a70:	00800274 	movhi	r2,9
   81a74:	10b01a04 	addi	r2,r2,-16280
   81a78:	10800543 	ldbu	r2,21(r2)
   81a7c:	11803fcc 	andi	r6,r2,255
   81a80:	00800274 	movhi	r2,9
   81a84:	10b01a04 	addi	r2,r2,-16280
   81a88:	10800583 	ldbu	r2,22(r2)
   81a8c:	11403fcc 	andi	r5,r2,255
   81a90:	00800274 	movhi	r2,9
   81a94:	10b01a04 	addi	r2,r2,-16280
   81a98:	108005c3 	ldbu	r2,23(r2)
   81a9c:	11003fcc 	andi	r4,r2,255
   81aa0:	00800274 	movhi	r2,9
   81aa4:	10b01a04 	addi	r2,r2,-16280
   81aa8:	10800603 	ldbu	r2,24(r2)
   81aac:	10c03fcc 	andi	r3,r2,255
   81ab0:	00800274 	movhi	r2,9
   81ab4:	10b01a04 	addi	r2,r2,-16280
   81ab8:	10800643 	ldbu	r2,25(r2)
   81abc:	10803fcc 	andi	r2,r2,255
   81ac0:	dd800015 	stw	r22,0(sp)
   81ac4:	dd400115 	stw	r21,4(sp)
   81ac8:	dd000215 	stw	r20,8(sp)
   81acc:	dcc00315 	stw	r19,12(sp)
   81ad0:	dc800415 	stw	r18,16(sp)
   81ad4:	dc400515 	stw	r17,20(sp)
   81ad8:	dc000615 	stw	r16,24(sp)
   81adc:	dbc00715 	stw	r15,28(sp)
   81ae0:	db800815 	stw	r14,32(sp)
   81ae4:	db400915 	stw	r13,36(sp)
   81ae8:	db000a15 	stw	r12,40(sp)
   81aec:	dac00b15 	stw	r11,44(sp)
   81af0:	da800c15 	stw	r10,48(sp)
   81af4:	da400d15 	stw	r9,52(sp)
   81af8:	da000e15 	stw	r8,56(sp)
   81afc:	d9c00f15 	stw	r7,60(sp)
   81b00:	d9801015 	stw	r6,64(sp)
   81b04:	d9401115 	stw	r5,68(sp)
   81b08:	d9001215 	stw	r4,72(sp)
   81b0c:	d8c01315 	stw	r3,76(sp)
   81b10:	d8801415 	stw	r2,80(sp)
   81b14:	01000274 	movhi	r4,9
   81b18:	21219404 	addi	r4,r4,-31152
   81b1c:	e17ff317 	ldw	r5,-52(fp)
   81b20:	f80d883a 	mov	r6,ra
   81b24:	b80f883a 	mov	r7,r23
   81b28:	0082c8c0 	call	82c8c <alt_printf>
			alt_dcache_flush_all();
   81b2c:	0082aec0 	call	82aec <alt_dcache_flush_all>
			alt_avalon_sgdma_construct_mem_to_stream_desc(&tx_descriptor, &tx_descriptor_end, (alt_u32 *)tx_frame, 64, 0, 1, 1, 0);
   81b30:	d8000015 	stw	zero,0(sp)
   81b34:	00800044 	movi	r2,1
   81b38:	d8800115 	stw	r2,4(sp)
   81b3c:	00800044 	movi	r2,1
   81b40:	d8800215 	stw	r2,8(sp)
   81b44:	d8000315 	stw	zero,12(sp)
   81b48:	01000434 	movhi	r4,16
   81b4c:	21000004 	addi	r4,r4,0
   81b50:	01400434 	movhi	r5,16
   81b54:	29400804 	addi	r5,r5,32
   81b58:	01800274 	movhi	r6,9
   81b5c:	31b01a04 	addi	r6,r6,-16280
   81b60:	01c01004 	movi	r7,64
   81b64:	0083e780 	call	83e78 <alt_avalon_sgdma_construct_mem_to_stream_desc>
			alt_avalon_sgdma_do_async_transfer( sgdma_tx_dev, &tx_descriptor );
   81b68:	d0a6cb17 	ldw	r2,-25812(gp)
   81b6c:	1009883a 	mov	r4,r2
   81b70:	01400434 	movhi	r5,16
   81b74:	29400004 	addi	r5,r5,0
   81b78:	0083a840 	call	83a84 <alt_avalon_sgdma_do_async_transfer>
			while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor) != 0);
   81b7c:	0001883a 	nop
   81b80:	01000434 	movhi	r4,16
   81b84:	21000004 	addi	r4,r4,0
   81b88:	00840740 	call	84074 <alt_avalon_sgdma_check_descriptor_status>
   81b8c:	103ffc1e 	bne	r2,zero,81b80 <rx_descriptor_end+0xfff81b20>

			data_flag = 1;
   81b90:	00800044 	movi	r2,1
   81b94:	d0a6ca05 	stb	r2,-25816(gp)
			TCP[0].seq_num++;
   81b98:	00800274 	movhi	r2,9
   81b9c:	10b03404 	addi	r2,r2,-16176
   81ba0:	1080050b 	ldhu	r2,20(r2)
   81ba4:	10800044 	addi	r2,r2,1
   81ba8:	1007883a 	mov	r3,r2
   81bac:	00800274 	movhi	r2,9
   81bb0:	10b03404 	addi	r2,r2,-16176
   81bb4:	10c0050d 	sth	r3,20(r2)
   81bb8:	00028d06 	br	825f0 <rx_ethernet_isr+0x12e8>
		}

	/***************** FIN Recieved *************************************************/
		else if((rx_frame[24]) == 0x02){
   81bbc:	00800274 	movhi	r2,9
   81bc0:	10b00a04 	addi	r2,r2,-16344
   81bc4:	10800603 	ldbu	r2,24(r2)
   81bc8:	10803fcc 	andi	r2,r2,255
   81bcc:	10800098 	cmpnei	r2,r2,2
   81bd0:	1000af1e 	bne	r2,zero,81e90 <rx_ethernet_isr+0xb88>
			TCP[0].link = 0;
   81bd4:	00800274 	movhi	r2,9
   81bd8:	10b03404 	addi	r2,r2,-16176
   81bdc:	10000005 	stb	zero,0(r2)
			data_flag = 0;
   81be0:	d026ca05 	stb	zero,-25816(gp)
	/***************** Sending FIN-ACK **********************************************/
			TCP[0].ack_num++;
   81be4:	00800274 	movhi	r2,9
   81be8:	10b03404 	addi	r2,r2,-16176
   81bec:	1080048b 	ldhu	r2,18(r2)
   81bf0:	10800044 	addi	r2,r2,1
   81bf4:	1007883a 	mov	r3,r2
   81bf8:	00800274 	movhi	r2,9
   81bfc:	10b03404 	addi	r2,r2,-16176
   81c00:	10c0048d 	sth	r3,18(r2)
			create_pkt();
   81c04:	00826700 	call	82670 <create_pkt>
			memmove(tx_frame+24,"\x06",1);
   81c08:	00800274 	movhi	r2,9
   81c0c:	10b02004 	addi	r2,r2,-16256
   81c10:	00c00184 	movi	r3,6
   81c14:	10c00005 	stb	r3,0(r2)

			//transmit_packet();
			alt_printf("\n FIN/ACK TX_FRAME: %x %x %x %x %x %x    %x %x %x %x %x %x    %x %x   %x %x   %x %x   %x %x   %x %x   %x \n",tx_frame[2],tx_frame[3],tx_frame[4],tx_frame[5],tx_frame[6],tx_frame[7],tx_frame[8],tx_frame[9],tx_frame[10],tx_frame[11],tx_frame[12],tx_frame[13],tx_frame[14],tx_frame[15],tx_frame[16],tx_frame[17],tx_frame[18],tx_frame[19],tx_frame[20],tx_frame[21],tx_frame[22],tx_frame[23],tx_frame[24],tx_frame[25]);
   81c18:	00800274 	movhi	r2,9
   81c1c:	10b01a04 	addi	r2,r2,-16280
   81c20:	10800083 	ldbu	r2,2(r2)
   81c24:	10803fcc 	andi	r2,r2,255
   81c28:	e0bff415 	stw	r2,-48(fp)
   81c2c:	00800274 	movhi	r2,9
   81c30:	10b01a04 	addi	r2,r2,-16280
   81c34:	108000c3 	ldbu	r2,3(r2)
   81c38:	17c03fcc 	andi	ra,r2,255
   81c3c:	00800274 	movhi	r2,9
   81c40:	10b01a04 	addi	r2,r2,-16280
   81c44:	10800103 	ldbu	r2,4(r2)
   81c48:	15c03fcc 	andi	r23,r2,255
   81c4c:	00800274 	movhi	r2,9
   81c50:	10b01a04 	addi	r2,r2,-16280
   81c54:	10800143 	ldbu	r2,5(r2)
   81c58:	15803fcc 	andi	r22,r2,255
   81c5c:	00800274 	movhi	r2,9
   81c60:	10b01a04 	addi	r2,r2,-16280
   81c64:	10800183 	ldbu	r2,6(r2)
   81c68:	15403fcc 	andi	r21,r2,255
   81c6c:	00800274 	movhi	r2,9
   81c70:	10b01a04 	addi	r2,r2,-16280
   81c74:	108001c3 	ldbu	r2,7(r2)
   81c78:	15003fcc 	andi	r20,r2,255
   81c7c:	00800274 	movhi	r2,9
   81c80:	10b01a04 	addi	r2,r2,-16280
   81c84:	10800203 	ldbu	r2,8(r2)
   81c88:	14c03fcc 	andi	r19,r2,255
   81c8c:	00800274 	movhi	r2,9
   81c90:	10b01a04 	addi	r2,r2,-16280
   81c94:	10800243 	ldbu	r2,9(r2)
   81c98:	14803fcc 	andi	r18,r2,255
   81c9c:	00800274 	movhi	r2,9
   81ca0:	10b01a04 	addi	r2,r2,-16280
   81ca4:	10800283 	ldbu	r2,10(r2)
   81ca8:	14403fcc 	andi	r17,r2,255
   81cac:	00800274 	movhi	r2,9
   81cb0:	10b01a04 	addi	r2,r2,-16280
   81cb4:	108002c3 	ldbu	r2,11(r2)
   81cb8:	14003fcc 	andi	r16,r2,255
   81cbc:	00800274 	movhi	r2,9
   81cc0:	10b01a04 	addi	r2,r2,-16280
   81cc4:	10800303 	ldbu	r2,12(r2)
   81cc8:	13c03fcc 	andi	r15,r2,255
   81ccc:	00800274 	movhi	r2,9
   81cd0:	10b01a04 	addi	r2,r2,-16280
   81cd4:	10800343 	ldbu	r2,13(r2)
   81cd8:	13803fcc 	andi	r14,r2,255
   81cdc:	00800274 	movhi	r2,9
   81ce0:	10b01a04 	addi	r2,r2,-16280
   81ce4:	10800383 	ldbu	r2,14(r2)
   81ce8:	13403fcc 	andi	r13,r2,255
   81cec:	00800274 	movhi	r2,9
   81cf0:	10b01a04 	addi	r2,r2,-16280
   81cf4:	108003c3 	ldbu	r2,15(r2)
   81cf8:	13003fcc 	andi	r12,r2,255
   81cfc:	00800274 	movhi	r2,9
   81d00:	10b01a04 	addi	r2,r2,-16280
   81d04:	10800403 	ldbu	r2,16(r2)
   81d08:	12c03fcc 	andi	r11,r2,255
   81d0c:	00800274 	movhi	r2,9
   81d10:	10b01a04 	addi	r2,r2,-16280
   81d14:	10800443 	ldbu	r2,17(r2)
   81d18:	12803fcc 	andi	r10,r2,255
   81d1c:	00800274 	movhi	r2,9
   81d20:	10b01a04 	addi	r2,r2,-16280
   81d24:	10800483 	ldbu	r2,18(r2)
   81d28:	12403fcc 	andi	r9,r2,255
   81d2c:	00800274 	movhi	r2,9
   81d30:	10b01a04 	addi	r2,r2,-16280
   81d34:	108004c3 	ldbu	r2,19(r2)
   81d38:	12003fcc 	andi	r8,r2,255
   81d3c:	00800274 	movhi	r2,9
   81d40:	10b01a04 	addi	r2,r2,-16280
   81d44:	10800503 	ldbu	r2,20(r2)
   81d48:	11c03fcc 	andi	r7,r2,255
   81d4c:	00800274 	movhi	r2,9
   81d50:	10b01a04 	addi	r2,r2,-16280
   81d54:	10800543 	ldbu	r2,21(r2)
   81d58:	11803fcc 	andi	r6,r2,255
   81d5c:	00800274 	movhi	r2,9
   81d60:	10b01a04 	addi	r2,r2,-16280
   81d64:	10800583 	ldbu	r2,22(r2)
   81d68:	11403fcc 	andi	r5,r2,255
   81d6c:	00800274 	movhi	r2,9
   81d70:	10b01a04 	addi	r2,r2,-16280
   81d74:	108005c3 	ldbu	r2,23(r2)
   81d78:	11003fcc 	andi	r4,r2,255
   81d7c:	00800274 	movhi	r2,9
   81d80:	10b01a04 	addi	r2,r2,-16280
   81d84:	10800603 	ldbu	r2,24(r2)
   81d88:	10c03fcc 	andi	r3,r2,255
   81d8c:	00800274 	movhi	r2,9
   81d90:	10b01a04 	addi	r2,r2,-16280
   81d94:	10800643 	ldbu	r2,25(r2)
   81d98:	10803fcc 	andi	r2,r2,255
   81d9c:	dd800015 	stw	r22,0(sp)
   81da0:	dd400115 	stw	r21,4(sp)
   81da4:	dd000215 	stw	r20,8(sp)
   81da8:	dcc00315 	stw	r19,12(sp)
   81dac:	dc800415 	stw	r18,16(sp)
   81db0:	dc400515 	stw	r17,20(sp)
   81db4:	dc000615 	stw	r16,24(sp)
   81db8:	dbc00715 	stw	r15,28(sp)
   81dbc:	db800815 	stw	r14,32(sp)
   81dc0:	db400915 	stw	r13,36(sp)
   81dc4:	db000a15 	stw	r12,40(sp)
   81dc8:	dac00b15 	stw	r11,44(sp)
   81dcc:	da800c15 	stw	r10,48(sp)
   81dd0:	da400d15 	stw	r9,52(sp)
   81dd4:	da000e15 	stw	r8,56(sp)
   81dd8:	d9c00f15 	stw	r7,60(sp)
   81ddc:	d9801015 	stw	r6,64(sp)
   81de0:	d9401115 	stw	r5,68(sp)
   81de4:	d9001215 	stw	r4,72(sp)
   81de8:	d8c01315 	stw	r3,76(sp)
   81dec:	d8801415 	stw	r2,80(sp)
   81df0:	01000274 	movhi	r4,9
   81df4:	2121b004 	addi	r4,r4,-31040
   81df8:	e17ff417 	ldw	r5,-48(fp)
   81dfc:	f80d883a 	mov	r6,ra
   81e00:	b80f883a 	mov	r7,r23
   81e04:	0082c8c0 	call	82c8c <alt_printf>
			alt_dcache_flush_all();
   81e08:	0082aec0 	call	82aec <alt_dcache_flush_all>
			alt_avalon_sgdma_construct_mem_to_stream_desc(&tx_descriptor, &tx_descriptor_end, (alt_u32 *)tx_frame, 64, 0, 1, 1, 0);
   81e0c:	d8000015 	stw	zero,0(sp)
   81e10:	00800044 	movi	r2,1
   81e14:	d8800115 	stw	r2,4(sp)
   81e18:	00800044 	movi	r2,1
   81e1c:	d8800215 	stw	r2,8(sp)
   81e20:	d8000315 	stw	zero,12(sp)
   81e24:	01000434 	movhi	r4,16
   81e28:	21000004 	addi	r4,r4,0
   81e2c:	01400434 	movhi	r5,16
   81e30:	29400804 	addi	r5,r5,32
   81e34:	01800274 	movhi	r6,9
   81e38:	31b01a04 	addi	r6,r6,-16280
   81e3c:	01c01004 	movi	r7,64
   81e40:	0083e780 	call	83e78 <alt_avalon_sgdma_construct_mem_to_stream_desc>
			alt_avalon_sgdma_do_async_transfer( sgdma_tx_dev, &tx_descriptor );
   81e44:	d0a6cb17 	ldw	r2,-25812(gp)
   81e48:	1009883a 	mov	r4,r2
   81e4c:	01400434 	movhi	r5,16
   81e50:	29400004 	addi	r5,r5,0
   81e54:	0083a840 	call	83a84 <alt_avalon_sgdma_do_async_transfer>
			while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor) != 0);
   81e58:	0001883a 	nop
   81e5c:	01000434 	movhi	r4,16
   81e60:	21000004 	addi	r4,r4,0
   81e64:	00840740 	call	84074 <alt_avalon_sgdma_check_descriptor_status>
   81e68:	103ffc1e 	bne	r2,zero,81e5c <rx_descriptor_end+0xfff81dfc>
			TCP[0].seq_num++;
   81e6c:	00800274 	movhi	r2,9
   81e70:	10b03404 	addi	r2,r2,-16176
   81e74:	1080050b 	ldhu	r2,20(r2)
   81e78:	10800044 	addi	r2,r2,1
   81e7c:	1007883a 	mov	r3,r2
   81e80:	00800274 	movhi	r2,9
   81e84:	10b03404 	addi	r2,r2,-16176
   81e88:	10c0050d 	sth	r3,20(r2)
   81e8c:	0001d806 	br	825f0 <rx_ethernet_isr+0x12e8>
		}

	/***************** Fin-Ack received **************************************************************/

		else if(rx_frame[24] == 0x06){
   81e90:	00800274 	movhi	r2,9
   81e94:	10b00a04 	addi	r2,r2,-16344
   81e98:	10800603 	ldbu	r2,24(r2)
   81e9c:	10803fcc 	andi	r2,r2,255
   81ea0:	10800198 	cmpnei	r2,r2,6
   81ea4:	1000c61e 	bne	r2,zero,821c0 <rx_ethernet_isr+0xeb8>
			TCP[0].link = 0;
   81ea8:	00800274 	movhi	r2,9
   81eac:	10b03404 	addi	r2,r2,-16176
   81eb0:	10000005 	stb	zero,0(r2)
			//ack_send();
			TCP[0].ack_num++;
   81eb4:	00800274 	movhi	r2,9
   81eb8:	10b03404 	addi	r2,r2,-16176
   81ebc:	1080048b 	ldhu	r2,18(r2)
   81ec0:	10800044 	addi	r2,r2,1
   81ec4:	1007883a 	mov	r3,r2
   81ec8:	00800274 	movhi	r2,9
   81ecc:	10b03404 	addi	r2,r2,-16176
   81ed0:	10c0048d 	sth	r3,18(r2)
			create_pkt();
   81ed4:	00826700 	call	82670 <create_pkt>
			memmove(tx_frame+24,"\x04",1);//setting ack
   81ed8:	00800274 	movhi	r2,9
   81edc:	10b02004 	addi	r2,r2,-16256
   81ee0:	00c00104 	movi	r3,4
   81ee4:	10c00005 	stb	r3,0(r2)

			//transmit_packet();
			alt_printf("\n Conn Closed ACK TX_FRAME: %x %x %x %x %x %x    %x %x %x %x %x %x    %x %x   %x %x   %x %x   %x %x   %x %x   %x \n",tx_frame[2],tx_frame[3],tx_frame[4],tx_frame[5],tx_frame[6],tx_frame[7],tx_frame[8],tx_frame[9],tx_frame[10],tx_frame[11],tx_frame[12],tx_frame[13],tx_frame[14],tx_frame[15],tx_frame[16],tx_frame[17],tx_frame[18],tx_frame[19],tx_frame[20],tx_frame[21],tx_frame[22],tx_frame[23],tx_frame[24],tx_frame[25]);
   81ee8:	00800274 	movhi	r2,9
   81eec:	10b01a04 	addi	r2,r2,-16280
   81ef0:	10800083 	ldbu	r2,2(r2)
   81ef4:	10803fcc 	andi	r2,r2,255
   81ef8:	e0bff515 	stw	r2,-44(fp)
   81efc:	00800274 	movhi	r2,9
   81f00:	10b01a04 	addi	r2,r2,-16280
   81f04:	108000c3 	ldbu	r2,3(r2)
   81f08:	17c03fcc 	andi	ra,r2,255
   81f0c:	00800274 	movhi	r2,9
   81f10:	10b01a04 	addi	r2,r2,-16280
   81f14:	10800103 	ldbu	r2,4(r2)
   81f18:	15c03fcc 	andi	r23,r2,255
   81f1c:	00800274 	movhi	r2,9
   81f20:	10b01a04 	addi	r2,r2,-16280
   81f24:	10800143 	ldbu	r2,5(r2)
   81f28:	15803fcc 	andi	r22,r2,255
   81f2c:	00800274 	movhi	r2,9
   81f30:	10b01a04 	addi	r2,r2,-16280
   81f34:	10800183 	ldbu	r2,6(r2)
   81f38:	15403fcc 	andi	r21,r2,255
   81f3c:	00800274 	movhi	r2,9
   81f40:	10b01a04 	addi	r2,r2,-16280
   81f44:	108001c3 	ldbu	r2,7(r2)
   81f48:	15003fcc 	andi	r20,r2,255
   81f4c:	00800274 	movhi	r2,9
   81f50:	10b01a04 	addi	r2,r2,-16280
   81f54:	10800203 	ldbu	r2,8(r2)
   81f58:	14c03fcc 	andi	r19,r2,255
   81f5c:	00800274 	movhi	r2,9
   81f60:	10b01a04 	addi	r2,r2,-16280
   81f64:	10800243 	ldbu	r2,9(r2)
   81f68:	14803fcc 	andi	r18,r2,255
   81f6c:	00800274 	movhi	r2,9
   81f70:	10b01a04 	addi	r2,r2,-16280
   81f74:	10800283 	ldbu	r2,10(r2)
   81f78:	14403fcc 	andi	r17,r2,255
   81f7c:	00800274 	movhi	r2,9
   81f80:	10b01a04 	addi	r2,r2,-16280
   81f84:	108002c3 	ldbu	r2,11(r2)
   81f88:	14003fcc 	andi	r16,r2,255
   81f8c:	00800274 	movhi	r2,9
   81f90:	10b01a04 	addi	r2,r2,-16280
   81f94:	10800303 	ldbu	r2,12(r2)
   81f98:	13c03fcc 	andi	r15,r2,255
   81f9c:	00800274 	movhi	r2,9
   81fa0:	10b01a04 	addi	r2,r2,-16280
   81fa4:	10800343 	ldbu	r2,13(r2)
   81fa8:	13803fcc 	andi	r14,r2,255
   81fac:	00800274 	movhi	r2,9
   81fb0:	10b01a04 	addi	r2,r2,-16280
   81fb4:	10800383 	ldbu	r2,14(r2)
   81fb8:	13403fcc 	andi	r13,r2,255
   81fbc:	00800274 	movhi	r2,9
   81fc0:	10b01a04 	addi	r2,r2,-16280
   81fc4:	108003c3 	ldbu	r2,15(r2)
   81fc8:	13003fcc 	andi	r12,r2,255
   81fcc:	00800274 	movhi	r2,9
   81fd0:	10b01a04 	addi	r2,r2,-16280
   81fd4:	10800403 	ldbu	r2,16(r2)
   81fd8:	12c03fcc 	andi	r11,r2,255
   81fdc:	00800274 	movhi	r2,9
   81fe0:	10b01a04 	addi	r2,r2,-16280
   81fe4:	10800443 	ldbu	r2,17(r2)
   81fe8:	12803fcc 	andi	r10,r2,255
   81fec:	00800274 	movhi	r2,9
   81ff0:	10b01a04 	addi	r2,r2,-16280
   81ff4:	10800483 	ldbu	r2,18(r2)
   81ff8:	12403fcc 	andi	r9,r2,255
   81ffc:	00800274 	movhi	r2,9
   82000:	10b01a04 	addi	r2,r2,-16280
   82004:	108004c3 	ldbu	r2,19(r2)
   82008:	12003fcc 	andi	r8,r2,255
   8200c:	00800274 	movhi	r2,9
   82010:	10b01a04 	addi	r2,r2,-16280
   82014:	10800503 	ldbu	r2,20(r2)
   82018:	11c03fcc 	andi	r7,r2,255
   8201c:	00800274 	movhi	r2,9
   82020:	10b01a04 	addi	r2,r2,-16280
   82024:	10800543 	ldbu	r2,21(r2)
   82028:	11803fcc 	andi	r6,r2,255
   8202c:	00800274 	movhi	r2,9
   82030:	10b01a04 	addi	r2,r2,-16280
   82034:	10800583 	ldbu	r2,22(r2)
   82038:	11403fcc 	andi	r5,r2,255
   8203c:	00800274 	movhi	r2,9
   82040:	10b01a04 	addi	r2,r2,-16280
   82044:	108005c3 	ldbu	r2,23(r2)
   82048:	11003fcc 	andi	r4,r2,255
   8204c:	00800274 	movhi	r2,9
   82050:	10b01a04 	addi	r2,r2,-16280
   82054:	10800603 	ldbu	r2,24(r2)
   82058:	10c03fcc 	andi	r3,r2,255
   8205c:	00800274 	movhi	r2,9
   82060:	10b01a04 	addi	r2,r2,-16280
   82064:	10800643 	ldbu	r2,25(r2)
   82068:	10803fcc 	andi	r2,r2,255
   8206c:	dd800015 	stw	r22,0(sp)
   82070:	dd400115 	stw	r21,4(sp)
   82074:	dd000215 	stw	r20,8(sp)
   82078:	dcc00315 	stw	r19,12(sp)
   8207c:	dc800415 	stw	r18,16(sp)
   82080:	dc400515 	stw	r17,20(sp)
   82084:	dc000615 	stw	r16,24(sp)
   82088:	dbc00715 	stw	r15,28(sp)
   8208c:	db800815 	stw	r14,32(sp)
   82090:	db400915 	stw	r13,36(sp)
   82094:	db000a15 	stw	r12,40(sp)
   82098:	dac00b15 	stw	r11,44(sp)
   8209c:	da800c15 	stw	r10,48(sp)
   820a0:	da400d15 	stw	r9,52(sp)
   820a4:	da000e15 	stw	r8,56(sp)
   820a8:	d9c00f15 	stw	r7,60(sp)
   820ac:	d9801015 	stw	r6,64(sp)
   820b0:	d9401115 	stw	r5,68(sp)
   820b4:	d9001215 	stw	r4,72(sp)
   820b8:	d8c01315 	stw	r3,76(sp)
   820bc:	d8801415 	stw	r2,80(sp)
   820c0:	01000274 	movhi	r4,9
   820c4:	2121cb04 	addi	r4,r4,-30932
   820c8:	e17ff517 	ldw	r5,-44(fp)
   820cc:	f80d883a 	mov	r6,ra
   820d0:	b80f883a 	mov	r7,r23
   820d4:	0082c8c0 	call	82c8c <alt_printf>
			alt_dcache_flush_all();
   820d8:	0082aec0 	call	82aec <alt_dcache_flush_all>
			alt_avalon_sgdma_construct_mem_to_stream_desc(&tx_descriptor, &tx_descriptor_end, (alt_u32 *)tx_frame, 64, 0, 1, 1, 0);
   820dc:	d8000015 	stw	zero,0(sp)
   820e0:	00800044 	movi	r2,1
   820e4:	d8800115 	stw	r2,4(sp)
   820e8:	00800044 	movi	r2,1
   820ec:	d8800215 	stw	r2,8(sp)
   820f0:	d8000315 	stw	zero,12(sp)
   820f4:	01000434 	movhi	r4,16
   820f8:	21000004 	addi	r4,r4,0
   820fc:	01400434 	movhi	r5,16
   82100:	29400804 	addi	r5,r5,32
   82104:	01800274 	movhi	r6,9
   82108:	31b01a04 	addi	r6,r6,-16280
   8210c:	01c01004 	movi	r7,64
   82110:	0083e780 	call	83e78 <alt_avalon_sgdma_construct_mem_to_stream_desc>
			alt_avalon_sgdma_do_async_transfer( sgdma_tx_dev, &tx_descriptor );
   82114:	d0a6cb17 	ldw	r2,-25812(gp)
   82118:	1009883a 	mov	r4,r2
   8211c:	01400434 	movhi	r5,16
   82120:	29400004 	addi	r5,r5,0
   82124:	0083a840 	call	83a84 <alt_avalon_sgdma_do_async_transfer>
			while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor) != 0);
   82128:	0001883a 	nop
   8212c:	01000434 	movhi	r4,16
   82130:	21000004 	addi	r4,r4,0
   82134:	00840740 	call	84074 <alt_avalon_sgdma_check_descriptor_status>
   82138:	103ffc1e 	bne	r2,zero,8212c <rx_descriptor_end+0xfff820cc>
			alt_printf("\n Connection closed");
   8213c:	01000274 	movhi	r4,9
   82140:	2121e804 	addi	r4,r4,-30816
   82144:	0082c8c0 	call	82c8c <alt_printf>
			alt_printf("\n********************* Statistics - TCP **********************");
   82148:	01000274 	movhi	r4,9
   8214c:	2121ed04 	addi	r4,r4,-30796
   82150:	0082c8c0 	call	82c8c <alt_printf>
			alt_printf("\nRxed Packets : %x",pckt_rxed);
   82154:	d0a6c617 	ldw	r2,-25832(gp)
   82158:	01000274 	movhi	r4,9
   8215c:	2121fd04 	addi	r4,r4,-30732
   82160:	100b883a 	mov	r5,r2
   82164:	0082c8c0 	call	82c8c <alt_printf>
			alt_printf("\nSuccessfull Packets Rxed : %x",succ_rxed);
   82168:	d0a6c717 	ldw	r2,-25828(gp)
   8216c:	01000274 	movhi	r4,9
   82170:	21220204 	addi	r4,r4,-30712
   82174:	100b883a 	mov	r5,r2
   82178:	0082c8c0 	call	82c8c <alt_printf>
			alt_printf("\nDropped Packets : %x",(pckt_rxed - succ_rxed));
   8217c:	d0e6c617 	ldw	r3,-25832(gp)
   82180:	d0a6c717 	ldw	r2,-25828(gp)
   82184:	1885c83a 	sub	r2,r3,r2
   82188:	01000274 	movhi	r4,9
   8218c:	21220a04 	addi	r4,r4,-30680
   82190:	100b883a 	mov	r5,r2
   82194:	0082c8c0 	call	82c8c <alt_printf>
			statistics_counter();
   82198:	00827e40 	call	827e4 <statistics_counter>

			TCP[0].seq_num++;
   8219c:	00800274 	movhi	r2,9
   821a0:	10b03404 	addi	r2,r2,-16176
   821a4:	1080050b 	ldhu	r2,20(r2)
   821a8:	10800044 	addi	r2,r2,1
   821ac:	1007883a 	mov	r3,r2
   821b0:	00800274 	movhi	r2,9
   821b4:	10b03404 	addi	r2,r2,-16176
   821b8:	10c0050d 	sth	r3,20(r2)
   821bc:	00010c06 	br	825f0 <rx_ethernet_isr+0x12e8>
		}

	/*****************  ACK Received *******************************************************/
		else if(rx_frame[24] == 0x04){
   821c0:	00800274 	movhi	r2,9
   821c4:	10b00a04 	addi	r2,r2,-16344
   821c8:	10800603 	ldbu	r2,24(r2)
   821cc:	10803fcc 	andi	r2,r2,255
   821d0:	10800118 	cmpnei	r2,r2,4
   821d4:	1000351e 	bne	r2,zero,822ac <rx_ethernet_isr+0xfa4>
				//ack();
			if(TCP[0].link == 1){
   821d8:	00800274 	movhi	r2,9
   821dc:	10b03404 	addi	r2,r2,-16176
   821e0:	10800003 	ldbu	r2,0(r2)
   821e4:	10803fcc 	andi	r2,r2,255
   821e8:	10800058 	cmpnei	r2,r2,1
   821ec:	10000e1e 	bne	r2,zero,82228 <rx_ethernet_isr+0xf20>
				alt_printf("\n Connection establishment ack received");
   821f0:	01000274 	movhi	r4,9
   821f4:	21221004 	addi	r4,r4,-30656
   821f8:	0082c8c0 	call	82c8c <alt_printf>
				data_flag = 1;
   821fc:	00800044 	movi	r2,1
   82200:	d0a6ca05 	stb	r2,-25816(gp)
				TCP[0].ack_num++;
   82204:	00800274 	movhi	r2,9
   82208:	10b03404 	addi	r2,r2,-16176
   8220c:	1080048b 	ldhu	r2,18(r2)
   82210:	10800044 	addi	r2,r2,1
   82214:	1007883a 	mov	r3,r2
   82218:	00800274 	movhi	r2,9
   8221c:	10b03404 	addi	r2,r2,-16176
   82220:	10c0048d 	sth	r3,18(r2)
   82224:	0000f206 	br	825f0 <rx_ethernet_isr+0x12e8>
			}
			else {

	/***************** PRINT TCP STATISTICS ***********************************************/
				alt_printf("\n Connection closed");
   82228:	01000274 	movhi	r4,9
   8222c:	2121e804 	addi	r4,r4,-30816
   82230:	0082c8c0 	call	82c8c <alt_printf>
				alt_printf("\n********************* Statistics - TCP **********************");
   82234:	01000274 	movhi	r4,9
   82238:	2121ed04 	addi	r4,r4,-30796
   8223c:	0082c8c0 	call	82c8c <alt_printf>
				alt_printf("\nRxed Packets : %x",pckt_rxed);
   82240:	d0a6c617 	ldw	r2,-25832(gp)
   82244:	01000274 	movhi	r4,9
   82248:	2121fd04 	addi	r4,r4,-30732
   8224c:	100b883a 	mov	r5,r2
   82250:	0082c8c0 	call	82c8c <alt_printf>
				alt_printf("\nSuccessfull Packets Rxed : %x",succ_rxed);
   82254:	d0a6c717 	ldw	r2,-25828(gp)
   82258:	01000274 	movhi	r4,9
   8225c:	21220204 	addi	r4,r4,-30712
   82260:	100b883a 	mov	r5,r2
   82264:	0082c8c0 	call	82c8c <alt_printf>
				alt_printf("\nDropped Packets : %x",(pckt_rxed - succ_rxed));
   82268:	d0e6c617 	ldw	r3,-25832(gp)
   8226c:	d0a6c717 	ldw	r2,-25828(gp)
   82270:	1885c83a 	sub	r2,r3,r2
   82274:	01000274 	movhi	r4,9
   82278:	21220a04 	addi	r4,r4,-30680
   8227c:	100b883a 	mov	r5,r2
   82280:	0082c8c0 	call	82c8c <alt_printf>

	/********** Calling function for printing Ethernet statistics ***************************/
				statistics_counter();
   82284:	00827e40 	call	827e4 <statistics_counter>
				TCP[0].ack_num++;
   82288:	00800274 	movhi	r2,9
   8228c:	10b03404 	addi	r2,r2,-16176
   82290:	1080048b 	ldhu	r2,18(r2)
   82294:	10800044 	addi	r2,r2,1
   82298:	1007883a 	mov	r3,r2
   8229c:	00800274 	movhi	r2,9
   822a0:	10b03404 	addi	r2,r2,-16176
   822a4:	10c0048d 	sth	r3,18(r2)
   822a8:	0000d106 	br	825f0 <rx_ethernet_isr+0x12e8>
			}
		}

/******************Data pkt received and sent to LED's**********/
		else if(rx_frame[24] == 0x08){
   822ac:	00800274 	movhi	r2,9
   822b0:	10b00a04 	addi	r2,r2,-16344
   822b4:	10800603 	ldbu	r2,24(r2)
   822b8:	10803fcc 	andi	r2,r2,255
   822bc:	10800218 	cmpnei	r2,r2,8
   822c0:	1000b81e 	bne	r2,zero,825a4 <rx_ethernet_isr+0x129c>
			TCP[0].ack_num++;
   822c4:	00800274 	movhi	r2,9
   822c8:	10b03404 	addi	r2,r2,-16176
   822cc:	1080048b 	ldhu	r2,18(r2)
   822d0:	10800044 	addi	r2,r2,1
   822d4:	1007883a 	mov	r3,r2
   822d8:	00800274 	movhi	r2,9
   822dc:	10b03404 	addi	r2,r2,-16176
   822e0:	10c0048d 	sth	r3,18(r2)
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE,rx_frame[25]);
   822e4:	00800274 	movhi	r2,9
   822e8:	10b00a04 	addi	r2,r2,-16344
   822ec:	10800643 	ldbu	r2,25(r2)
   822f0:	10c03fcc 	andi	r3,r2,255
   822f4:	00800434 	movhi	r2,16
   822f8:	10892404 	addi	r2,r2,9360
   822fc:	10c00035 	stwio	r3,0(r2)
			create_pkt();
   82300:	00826700 	call	82670 <create_pkt>
			memmove(tx_frame+24,"\x0C",1);
   82304:	00800274 	movhi	r2,9
   82308:	10b02004 	addi	r2,r2,-16256
   8230c:	00c00304 	movi	r3,12
   82310:	10c00005 	stb	r3,0(r2)
			alt_printf("\n DATA ACK TX_FRAME: %x %x %x %x %x %x    %x %x %x %x %x %x    %x %x   %x %x   %x %x   %x %x   %x %x   %x  %x \n",tx_frame[2],tx_frame[3],tx_frame[4],tx_frame[5],tx_frame[6],tx_frame[7],tx_frame[8],tx_frame[9],tx_frame[10],tx_frame[11],tx_frame[12],tx_frame[13],tx_frame[14],tx_frame[15],tx_frame[16],tx_frame[17],tx_frame[18],tx_frame[19],tx_frame[20],tx_frame[21],tx_frame[22],tx_frame[23],tx_frame[24],tx_frame[25],tx_frame[26]);
   82314:	00800274 	movhi	r2,9
   82318:	10b01a04 	addi	r2,r2,-16280
   8231c:	10800083 	ldbu	r2,2(r2)
   82320:	10803fcc 	andi	r2,r2,255
   82324:	e0bff615 	stw	r2,-40(fp)
   82328:	00800274 	movhi	r2,9
   8232c:	10b01a04 	addi	r2,r2,-16280
   82330:	108000c3 	ldbu	r2,3(r2)
   82334:	10803fcc 	andi	r2,r2,255
   82338:	e0bff715 	stw	r2,-36(fp)
   8233c:	00800274 	movhi	r2,9
   82340:	10b01a04 	addi	r2,r2,-16280
   82344:	10800103 	ldbu	r2,4(r2)
   82348:	17c03fcc 	andi	ra,r2,255
   8234c:	00800274 	movhi	r2,9
   82350:	10b01a04 	addi	r2,r2,-16280
   82354:	10800143 	ldbu	r2,5(r2)
   82358:	11003fcc 	andi	r4,r2,255
   8235c:	00800274 	movhi	r2,9
   82360:	10b01a04 	addi	r2,r2,-16280
   82364:	10800183 	ldbu	r2,6(r2)
   82368:	15c03fcc 	andi	r23,r2,255
   8236c:	00800274 	movhi	r2,9
   82370:	10b01a04 	addi	r2,r2,-16280
   82374:	108001c3 	ldbu	r2,7(r2)
   82378:	15803fcc 	andi	r22,r2,255
   8237c:	00800274 	movhi	r2,9
   82380:	10b01a04 	addi	r2,r2,-16280
   82384:	10800203 	ldbu	r2,8(r2)
   82388:	15403fcc 	andi	r21,r2,255
   8238c:	00800274 	movhi	r2,9
   82390:	10b01a04 	addi	r2,r2,-16280
   82394:	10800243 	ldbu	r2,9(r2)
   82398:	15003fcc 	andi	r20,r2,255
   8239c:	00800274 	movhi	r2,9
   823a0:	10b01a04 	addi	r2,r2,-16280
   823a4:	10800283 	ldbu	r2,10(r2)
   823a8:	14c03fcc 	andi	r19,r2,255
   823ac:	00800274 	movhi	r2,9
   823b0:	10b01a04 	addi	r2,r2,-16280
   823b4:	108002c3 	ldbu	r2,11(r2)
   823b8:	14803fcc 	andi	r18,r2,255
   823bc:	00800274 	movhi	r2,9
   823c0:	10b01a04 	addi	r2,r2,-16280
   823c4:	10800303 	ldbu	r2,12(r2)
   823c8:	14403fcc 	andi	r17,r2,255
   823cc:	00800274 	movhi	r2,9
   823d0:	10b01a04 	addi	r2,r2,-16280
   823d4:	10800343 	ldbu	r2,13(r2)
   823d8:	14003fcc 	andi	r16,r2,255
   823dc:	00800274 	movhi	r2,9
   823e0:	10b01a04 	addi	r2,r2,-16280
   823e4:	10800383 	ldbu	r2,14(r2)
   823e8:	13c03fcc 	andi	r15,r2,255
   823ec:	00800274 	movhi	r2,9
   823f0:	10b01a04 	addi	r2,r2,-16280
   823f4:	108003c3 	ldbu	r2,15(r2)
   823f8:	13803fcc 	andi	r14,r2,255
   823fc:	00800274 	movhi	r2,9
   82400:	10b01a04 	addi	r2,r2,-16280
   82404:	10800403 	ldbu	r2,16(r2)
   82408:	13403fcc 	andi	r13,r2,255
   8240c:	00800274 	movhi	r2,9
   82410:	10b01a04 	addi	r2,r2,-16280
   82414:	10800443 	ldbu	r2,17(r2)
   82418:	13003fcc 	andi	r12,r2,255
   8241c:	00800274 	movhi	r2,9
   82420:	10b01a04 	addi	r2,r2,-16280
   82424:	10800483 	ldbu	r2,18(r2)
   82428:	12c03fcc 	andi	r11,r2,255
   8242c:	00800274 	movhi	r2,9
   82430:	10b01a04 	addi	r2,r2,-16280
   82434:	108004c3 	ldbu	r2,19(r2)
   82438:	12803fcc 	andi	r10,r2,255
   8243c:	00800274 	movhi	r2,9
   82440:	10b01a04 	addi	r2,r2,-16280
   82444:	10800503 	ldbu	r2,20(r2)
   82448:	12403fcc 	andi	r9,r2,255
   8244c:	00800274 	movhi	r2,9
   82450:	10b01a04 	addi	r2,r2,-16280
   82454:	10800543 	ldbu	r2,21(r2)
   82458:	12003fcc 	andi	r8,r2,255
   8245c:	00800274 	movhi	r2,9
   82460:	10b01a04 	addi	r2,r2,-16280
   82464:	10800583 	ldbu	r2,22(r2)
   82468:	11c03fcc 	andi	r7,r2,255
   8246c:	00800274 	movhi	r2,9
   82470:	10b01a04 	addi	r2,r2,-16280
   82474:	108005c3 	ldbu	r2,23(r2)
   82478:	11803fcc 	andi	r6,r2,255
   8247c:	00800274 	movhi	r2,9
   82480:	10b01a04 	addi	r2,r2,-16280
   82484:	10800603 	ldbu	r2,24(r2)
   82488:	11403fcc 	andi	r5,r2,255
   8248c:	00800274 	movhi	r2,9
   82490:	10b01a04 	addi	r2,r2,-16280
   82494:	10800643 	ldbu	r2,25(r2)
   82498:	10c03fcc 	andi	r3,r2,255
   8249c:	00800274 	movhi	r2,9
   824a0:	10b01a04 	addi	r2,r2,-16280
   824a4:	10800683 	ldbu	r2,26(r2)
   824a8:	10803fcc 	andi	r2,r2,255
   824ac:	d9000015 	stw	r4,0(sp)
   824b0:	ddc00115 	stw	r23,4(sp)
   824b4:	dd800215 	stw	r22,8(sp)
   824b8:	dd400315 	stw	r21,12(sp)
   824bc:	dd000415 	stw	r20,16(sp)
   824c0:	dcc00515 	stw	r19,20(sp)
   824c4:	dc800615 	stw	r18,24(sp)
   824c8:	dc400715 	stw	r17,28(sp)
   824cc:	dc000815 	stw	r16,32(sp)
   824d0:	dbc00915 	stw	r15,36(sp)
   824d4:	db800a15 	stw	r14,40(sp)
   824d8:	db400b15 	stw	r13,44(sp)
   824dc:	db000c15 	stw	r12,48(sp)
   824e0:	dac00d15 	stw	r11,52(sp)
   824e4:	da800e15 	stw	r10,56(sp)
   824e8:	da400f15 	stw	r9,60(sp)
   824ec:	da001015 	stw	r8,64(sp)
   824f0:	d9c01115 	stw	r7,68(sp)
   824f4:	d9801215 	stw	r6,72(sp)
   824f8:	d9401315 	stw	r5,76(sp)
   824fc:	d8c01415 	stw	r3,80(sp)
   82500:	d8801515 	stw	r2,84(sp)
   82504:	01000274 	movhi	r4,9
   82508:	21221a04 	addi	r4,r4,-30616
   8250c:	e17ff617 	ldw	r5,-40(fp)
   82510:	e1bff717 	ldw	r6,-36(fp)
   82514:	f80f883a 	mov	r7,ra
   82518:	0082c8c0 	call	82c8c <alt_printf>
			alt_dcache_flush_all();
   8251c:	0082aec0 	call	82aec <alt_dcache_flush_all>
			alt_avalon_sgdma_construct_mem_to_stream_desc(&tx_descriptor, &tx_descriptor_end, (alt_u32 *)tx_frame, 64, 0, 1, 1, 0);
   82520:	d8000015 	stw	zero,0(sp)
   82524:	00800044 	movi	r2,1
   82528:	d8800115 	stw	r2,4(sp)
   8252c:	00800044 	movi	r2,1
   82530:	d8800215 	stw	r2,8(sp)
   82534:	d8000315 	stw	zero,12(sp)
   82538:	01000434 	movhi	r4,16
   8253c:	21000004 	addi	r4,r4,0
   82540:	01400434 	movhi	r5,16
   82544:	29400804 	addi	r5,r5,32
   82548:	01800274 	movhi	r6,9
   8254c:	31b01a04 	addi	r6,r6,-16280
   82550:	01c01004 	movi	r7,64
   82554:	0083e780 	call	83e78 <alt_avalon_sgdma_construct_mem_to_stream_desc>
			alt_avalon_sgdma_do_async_transfer( sgdma_tx_dev, &tx_descriptor );
   82558:	d0a6cb17 	ldw	r2,-25812(gp)
   8255c:	1009883a 	mov	r4,r2
   82560:	01400434 	movhi	r5,16
   82564:	29400004 	addi	r5,r5,0
   82568:	0083a840 	call	83a84 <alt_avalon_sgdma_do_async_transfer>
			while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor) != 0);
   8256c:	0001883a 	nop
   82570:	01000434 	movhi	r4,16
   82574:	21000004 	addi	r4,r4,0
   82578:	00840740 	call	84074 <alt_avalon_sgdma_check_descriptor_status>
   8257c:	103ffc1e 	bne	r2,zero,82570 <rx_descriptor_end+0xfff82510>
			TCP[0].seq_num++;
   82580:	00800274 	movhi	r2,9
   82584:	10b03404 	addi	r2,r2,-16176
   82588:	1080050b 	ldhu	r2,20(r2)
   8258c:	10800044 	addi	r2,r2,1
   82590:	1007883a 	mov	r3,r2
   82594:	00800274 	movhi	r2,9
   82598:	10b03404 	addi	r2,r2,-16176
   8259c:	10c0050d 	sth	r3,20(r2)
   825a0:	00001306 	br	825f0 <rx_ethernet_isr+0x12e8>
		}
	/********************* DATA ACKNOWLEDGEMENT RECEIVED***********************************/
		else if(rx_frame[24] == 0x0C){
   825a4:	00800274 	movhi	r2,9
   825a8:	10b00a04 	addi	r2,r2,-16344
   825ac:	10800603 	ldbu	r2,24(r2)
   825b0:	10803fcc 	andi	r2,r2,255
   825b4:	10800318 	cmpnei	r2,r2,12
   825b8:	10000d1e 	bne	r2,zero,825f0 <rx_ethernet_isr+0x12e8>
			TCP[0].ack_num++;
   825bc:	00800274 	movhi	r2,9
   825c0:	10b03404 	addi	r2,r2,-16176
   825c4:	1080048b 	ldhu	r2,18(r2)
   825c8:	10800044 	addi	r2,r2,1
   825cc:	1007883a 	mov	r3,r2
   825d0:	00800274 	movhi	r2,9
   825d4:	10b03404 	addi	r2,r2,-16176
   825d8:	10c0048d 	sth	r3,18(r2)
			alt_printf("\n Data ACK received");
   825dc:	01000274 	movhi	r4,9
   825e0:	21223604 	addi	r4,r4,-30504
   825e4:	0082c8c0 	call	82c8c <alt_printf>
			data_flag = 1;
   825e8:	00800044 	movi	r2,1
   825ec:	d0a6ca05 	stb	r2,-25816(gp)
		}

	// Wait until receive descriptor transfer is complete
	while (alt_avalon_sgdma_check_descriptor_status(&rx_descriptor) != 0);
   825f0:	0001883a 	nop
   825f4:	01000434 	movhi	r4,16
   825f8:	21001004 	addi	r4,r4,64
   825fc:	00840740 	call	84074 <alt_avalon_sgdma_check_descriptor_status>
   82600:	103ffc1e 	bne	r2,zero,825f4 <rx_descriptor_end+0xfff82594>
	// Create new receive sgdma descriptor
	alt_avalon_sgdma_construct_stream_to_mem_desc( &rx_descriptor, &rx_descriptor_end, (alt_u32 *)rx_frame, 0, 0 );
   82604:	d8000015 	stw	zero,0(sp)
   82608:	01000434 	movhi	r4,16
   8260c:	21001004 	addi	r4,r4,64
   82610:	01400434 	movhi	r5,16
   82614:	29401804 	addi	r5,r5,96
   82618:	01800274 	movhi	r6,9
   8261c:	31b00a04 	addi	r6,r6,-16344
   82620:	000f883a 	mov	r7,zero
   82624:	0083da80 	call	83da8 <alt_avalon_sgdma_construct_stream_to_mem_desc>
	// Set up non-blocking transfer of sgdma receive descriptor
	alt_avalon_sgdma_do_async_transfer( sgdma_rx_dev, &rx_descriptor );
   82628:	d0a6cc17 	ldw	r2,-25808(gp)
   8262c:	1009883a 	mov	r4,r2
   82630:	01400434 	movhi	r5,16
   82634:	29401004 	addi	r5,r5,64
   82638:	0083a840 	call	83a84 <alt_avalon_sgdma_do_async_transfer>


}
   8263c:	e6fff804 	addi	sp,fp,-32
   82640:	dfc00917 	ldw	ra,36(sp)
   82644:	df000817 	ldw	fp,32(sp)
   82648:	ddc00717 	ldw	r23,28(sp)
   8264c:	dd800617 	ldw	r22,24(sp)
   82650:	dd400517 	ldw	r21,20(sp)
   82654:	dd000417 	ldw	r20,16(sp)
   82658:	dcc00317 	ldw	r19,12(sp)
   8265c:	dc800217 	ldw	r18,8(sp)
   82660:	dc400117 	ldw	r17,4(sp)
   82664:	dc000017 	ldw	r16,0(sp)
   82668:	dec00a04 	addi	sp,sp,40
   8266c:	f800283a 	ret

00082670 <create_pkt>:

/********* Function for Creating Packet before transmission ***********************/
void create_pkt(){
   82670:	defffe04 	addi	sp,sp,-8
   82674:	dfc00115 	stw	ra,4(sp)
   82678:	df000015 	stw	fp,0(sp)
   8267c:	d839883a 	mov	fp,sp
	memset(tx_frame+26,0,37);
   82680:	01000274 	movhi	r4,9
   82684:	21302084 	addi	r4,r4,-16254
   82688:	000b883a 	mov	r5,zero
   8268c:	01800944 	movi	r6,37
   82690:	00829c80 	call	829c8 <memset>
	memcpy(tx_frame+20, &TCP[0].seq_num, 2);
   82694:	01000274 	movhi	r4,9
   82698:	21301f04 	addi	r4,r4,-16260
   8269c:	01400274 	movhi	r5,9
   826a0:	29703904 	addi	r5,r5,-16156
   826a4:	01800084 	movi	r6,2
   826a8:	00828900 	call	82890 <memcpy>
	memcpy(tx_frame+22, &TCP[0].ack_num, 2);
   826ac:	01000274 	movhi	r4,9
   826b0:	21301f84 	addi	r4,r4,-16258
   826b4:	01400274 	movhi	r5,9
   826b8:	29703884 	addi	r5,r5,-16158
   826bc:	01800084 	movi	r6,2
   826c0:	00828900 	call	82890 <memcpy>
	memcpy(tx_frame+24, "\x00", 1);
   826c4:	01000274 	movhi	r4,9
   826c8:	21302004 	addi	r4,r4,-16256
   826cc:	01400274 	movhi	r5,9
   826d0:	29623b04 	addi	r5,r5,-30484
   826d4:	01800044 	movi	r6,1
   826d8:	00828900 	call	82890 <memcpy>
	memmove(tx_frame, "\x00\x00",2);
   826dc:	00800274 	movhi	r2,9
   826e0:	10b01a04 	addi	r2,r2,-16280
   826e4:	00c00274 	movhi	r3,9
   826e8:	18e08804 	addi	r3,r3,-32224
   826ec:	19000003 	ldbu	r4,0(r3)
   826f0:	11000005 	stb	r4,0(r2)
   826f4:	18c00043 	ldbu	r3,1(r3)
   826f8:	10c00045 	stb	r3,1(r2)
	memmove(tx_frame+2, &TCP[0].dest_mac,6);
   826fc:	00800274 	movhi	r2,9
   82700:	10b01a04 	addi	r2,r2,-16280
   82704:	00c00274 	movhi	r3,9
   82708:	18f03404 	addi	r3,r3,-16176
   8270c:	19000043 	ldbu	r4,1(r3)
   82710:	11000085 	stb	r4,2(r2)
   82714:	19000083 	ldbu	r4,2(r3)
   82718:	110000c5 	stb	r4,3(r2)
   8271c:	190000c3 	ldbu	r4,3(r3)
   82720:	11000105 	stb	r4,4(r2)
   82724:	19000103 	ldbu	r4,4(r3)
   82728:	11000145 	stb	r4,5(r2)
   8272c:	19000143 	ldbu	r4,5(r3)
   82730:	11000185 	stb	r4,6(r2)
   82734:	18c00183 	ldbu	r3,6(r3)
   82738:	10c001c5 	stb	r3,7(r2)
	memmove(tx_frame+8, &TCP[0].source_mac,6);
   8273c:	00800274 	movhi	r2,9
   82740:	10b01a04 	addi	r2,r2,-16280
   82744:	00c00274 	movhi	r3,9
   82748:	18f03404 	addi	r3,r3,-16176
   8274c:	190001c3 	ldbu	r4,7(r3)
   82750:	11000205 	stb	r4,8(r2)
   82754:	19000203 	ldbu	r4,8(r3)
   82758:	11000245 	stb	r4,9(r2)
   8275c:	19000243 	ldbu	r4,9(r3)
   82760:	11000285 	stb	r4,10(r2)
   82764:	19000283 	ldbu	r4,10(r3)
   82768:	110002c5 	stb	r4,11(r2)
   8276c:	190002c3 	ldbu	r4,11(r3)
   82770:	11000305 	stb	r4,12(r2)
   82774:	18c00303 	ldbu	r3,12(r3)
   82778:	10c00345 	stb	r3,13(r2)
	memmove(tx_frame+14, "\x2E\x00", 2);
   8277c:	00800274 	movhi	r2,9
   82780:	10b01d84 	addi	r2,r2,-16266
   82784:	00c00b84 	movi	r3,46
   82788:	10c00005 	stb	r3,0(r2)
   8278c:	10000045 	stb	zero,1(r2)
	memmove(tx_frame+16, &TCP[0].source_port, 2);
   82790:	00800274 	movhi	r2,9
   82794:	10b01e04 	addi	r2,r2,-16264
   82798:	00c00274 	movhi	r3,9
   8279c:	18f03784 	addi	r3,r3,-16162
   827a0:	19000003 	ldbu	r4,0(r3)
   827a4:	11000005 	stb	r4,0(r2)
   827a8:	18c00043 	ldbu	r3,1(r3)
   827ac:	10c00045 	stb	r3,1(r2)
	memmove(tx_frame+18, &TCP[0].dest_port, 2);
   827b0:	00800274 	movhi	r2,9
   827b4:	10b01e84 	addi	r2,r2,-16262
   827b8:	00c00274 	movhi	r3,9
   827bc:	18f03804 	addi	r3,r3,-16160
   827c0:	19000003 	ldbu	r4,0(r3)
   827c4:	11000005 	stb	r4,0(r2)
   827c8:	18c00043 	ldbu	r3,1(r3)
   827cc:	10c00045 	stb	r3,1(r2)
}
   827d0:	e037883a 	mov	sp,fp
   827d4:	dfc00117 	ldw	ra,4(sp)
   827d8:	df000017 	ldw	fp,0(sp)
   827dc:	dec00204 	addi	sp,sp,8
   827e0:	f800283a 	ret

000827e4 <statistics_counter>:

/******* Printing  Ethernet Statistics *********************************************/
void statistics_counter(){
   827e4:	defffd04 	addi	sp,sp,-12
   827e8:	dfc00215 	stw	ra,8(sp)
   827ec:	df000115 	stw	fp,4(sp)
   827f0:	df000104 	addi	fp,sp,4
	volatile int *tse = (int *)TSE_BASE;
   827f4:	00800434 	movhi	r2,16
   827f8:	10880004 	addi	r2,r2,8192
   827fc:	e0bfff15 	stw	r2,-4(fp)
	alt_printf("\n********************* Statistics - Ethernet **********************");
   82800:	01000274 	movhi	r4,9
   82804:	21223c04 	addi	r4,r4,-30480
   82808:	0082c8c0 	call	82c8c <alt_printf>
	alt_printf("\nnum frames successfully received: %x ", *(tse + 0x1B));
   8280c:	e0bfff17 	ldw	r2,-4(fp)
   82810:	10801b04 	addi	r2,r2,108
   82814:	10800017 	ldw	r2,0(r2)
   82818:	01000274 	movhi	r4,9
   8281c:	21224d04 	addi	r4,r4,-30412
   82820:	100b883a 	mov	r5,r2
   82824:	0082c8c0 	call	82c8c <alt_printf>
	alt_printf("\nnum error frames received: %x ", *(tse + 0x22));
   82828:	e0bfff17 	ldw	r2,-4(fp)
   8282c:	10802204 	addi	r2,r2,136
   82830:	10800017 	ldw	r2,0(r2)
   82834:	01000274 	movhi	r4,9
   82838:	21225704 	addi	r4,r4,-30372
   8283c:	100b883a 	mov	r5,r2
   82840:	0082c8c0 	call	82c8c <alt_printf>
	alt_printf("\nnum frames correctly received: %x ", *(tse + 0x1B) - *(tse + 0x22));
   82844:	e0bfff17 	ldw	r2,-4(fp)
   82848:	10801b04 	addi	r2,r2,108
   8284c:	10c00017 	ldw	r3,0(r2)
   82850:	e0bfff17 	ldw	r2,-4(fp)
   82854:	10802204 	addi	r2,r2,136
   82858:	10800017 	ldw	r2,0(r2)
   8285c:	1885c83a 	sub	r2,r3,r2
   82860:	01000274 	movhi	r4,9
   82864:	21225f04 	addi	r4,r4,-30340
   82868:	100b883a 	mov	r5,r2
   8286c:	0082c8c0 	call	82c8c <alt_printf>
	alt_printf("\n******************************************************************");
   82870:	01000274 	movhi	r4,9
   82874:	21226804 	addi	r4,r4,-30304
   82878:	0082c8c0 	call	82c8c <alt_printf>
}
   8287c:	e037883a 	mov	sp,fp
   82880:	dfc00117 	ldw	ra,4(sp)
   82884:	df000017 	ldw	fp,0(sp)
   82888:	dec00204 	addi	sp,sp,8
   8288c:	f800283a 	ret

00082890 <memcpy>:
   82890:	deffff04 	addi	sp,sp,-4
   82894:	dc000015 	stw	r16,0(sp)
   82898:	00c003c4 	movi	r3,15
   8289c:	2005883a 	mov	r2,r4
   828a0:	1980432e 	bgeu	r3,r6,829b0 <memcpy+0x120>
   828a4:	2146b03a 	or	r3,r4,r5
   828a8:	18c000cc 	andi	r3,r3,3
   828ac:	1800421e 	bne	r3,zero,829b8 <memcpy+0x128>
   828b0:	343ffc04 	addi	r16,r6,-16
   828b4:	8020d13a 	srli	r16,r16,4
   828b8:	28c00104 	addi	r3,r5,4
   828bc:	23400104 	addi	r13,r4,4
   828c0:	801e913a 	slli	r15,r16,4
   828c4:	2b000204 	addi	r12,r5,8
   828c8:	22c00204 	addi	r11,r4,8
   828cc:	7bc00504 	addi	r15,r15,20
   828d0:	2a800304 	addi	r10,r5,12
   828d4:	22400304 	addi	r9,r4,12
   828d8:	2bdf883a 	add	r15,r5,r15
   828dc:	2811883a 	mov	r8,r5
   828e0:	200f883a 	mov	r7,r4
   828e4:	41000017 	ldw	r4,0(r8)
   828e8:	39c00404 	addi	r7,r7,16
   828ec:	18c00404 	addi	r3,r3,16
   828f0:	393ffc15 	stw	r4,-16(r7)
   828f4:	1bbffc17 	ldw	r14,-16(r3)
   828f8:	6b400404 	addi	r13,r13,16
   828fc:	5ac00404 	addi	r11,r11,16
   82900:	6bbffc15 	stw	r14,-16(r13)
   82904:	63800017 	ldw	r14,0(r12)
   82908:	4a400404 	addi	r9,r9,16
   8290c:	42000404 	addi	r8,r8,16
   82910:	5bbffc15 	stw	r14,-16(r11)
   82914:	53800017 	ldw	r14,0(r10)
   82918:	63000404 	addi	r12,r12,16
   8291c:	52800404 	addi	r10,r10,16
   82920:	4bbffc15 	stw	r14,-16(r9)
   82924:	1bffef1e 	bne	r3,r15,828e4 <rx_descriptor_end+0xfff82884>
   82928:	81c00044 	addi	r7,r16,1
   8292c:	380e913a 	slli	r7,r7,4
   82930:	310003cc 	andi	r4,r6,15
   82934:	02c000c4 	movi	r11,3
   82938:	11c7883a 	add	r3,r2,r7
   8293c:	29cb883a 	add	r5,r5,r7
   82940:	59001f2e 	bgeu	r11,r4,829c0 <memcpy+0x130>
   82944:	1813883a 	mov	r9,r3
   82948:	2811883a 	mov	r8,r5
   8294c:	200f883a 	mov	r7,r4
   82950:	42800017 	ldw	r10,0(r8)
   82954:	4a400104 	addi	r9,r9,4
   82958:	39ffff04 	addi	r7,r7,-4
   8295c:	4abfff15 	stw	r10,-4(r9)
   82960:	42000104 	addi	r8,r8,4
   82964:	59fffa36 	bltu	r11,r7,82950 <rx_descriptor_end+0xfff828f0>
   82968:	213fff04 	addi	r4,r4,-4
   8296c:	2008d0ba 	srli	r4,r4,2
   82970:	318000cc 	andi	r6,r6,3
   82974:	21000044 	addi	r4,r4,1
   82978:	2109883a 	add	r4,r4,r4
   8297c:	2109883a 	add	r4,r4,r4
   82980:	1907883a 	add	r3,r3,r4
   82984:	290b883a 	add	r5,r5,r4
   82988:	30000626 	beq	r6,zero,829a4 <memcpy+0x114>
   8298c:	198d883a 	add	r6,r3,r6
   82990:	29c00003 	ldbu	r7,0(r5)
   82994:	18c00044 	addi	r3,r3,1
   82998:	29400044 	addi	r5,r5,1
   8299c:	19ffffc5 	stb	r7,-1(r3)
   829a0:	19bffb1e 	bne	r3,r6,82990 <rx_descriptor_end+0xfff82930>
   829a4:	dc000017 	ldw	r16,0(sp)
   829a8:	dec00104 	addi	sp,sp,4
   829ac:	f800283a 	ret
   829b0:	2007883a 	mov	r3,r4
   829b4:	003ff406 	br	82988 <rx_descriptor_end+0xfff82928>
   829b8:	2007883a 	mov	r3,r4
   829bc:	003ff306 	br	8298c <rx_descriptor_end+0xfff8292c>
   829c0:	200d883a 	mov	r6,r4
   829c4:	003ff006 	br	82988 <rx_descriptor_end+0xfff82928>

000829c8 <memset>:
   829c8:	20c000cc 	andi	r3,r4,3
   829cc:	2005883a 	mov	r2,r4
   829d0:	18004326 	beq	r3,zero,82ae0 <memset+0x118>
   829d4:	31ffffc4 	addi	r7,r6,-1
   829d8:	30004026 	beq	r6,zero,82adc <memset+0x114>
   829dc:	2813883a 	mov	r9,r5
   829e0:	200d883a 	mov	r6,r4
   829e4:	2007883a 	mov	r3,r4
   829e8:	00000406 	br	829fc <memset+0x34>
   829ec:	3a3fffc4 	addi	r8,r7,-1
   829f0:	31800044 	addi	r6,r6,1
   829f4:	38003926 	beq	r7,zero,82adc <memset+0x114>
   829f8:	400f883a 	mov	r7,r8
   829fc:	18c00044 	addi	r3,r3,1
   82a00:	32400005 	stb	r9,0(r6)
   82a04:	1a0000cc 	andi	r8,r3,3
   82a08:	403ff81e 	bne	r8,zero,829ec <rx_descriptor_end+0xfff8298c>
   82a0c:	010000c4 	movi	r4,3
   82a10:	21c02d2e 	bgeu	r4,r7,82ac8 <memset+0x100>
   82a14:	29803fcc 	andi	r6,r5,255
   82a18:	3008923a 	slli	r4,r6,8
   82a1c:	218cb03a 	or	r6,r4,r6
   82a20:	3008943a 	slli	r4,r6,16
   82a24:	218cb03a 	or	r6,r4,r6
   82a28:	010003c4 	movi	r4,15
   82a2c:	21c0182e 	bgeu	r4,r7,82a90 <memset+0xc8>
   82a30:	3b3ffc04 	addi	r12,r7,-16
   82a34:	6018d13a 	srli	r12,r12,4
   82a38:	1a000104 	addi	r8,r3,4
   82a3c:	1ac00204 	addi	r11,r3,8
   82a40:	6008913a 	slli	r4,r12,4
   82a44:	1a800304 	addi	r10,r3,12
   82a48:	1813883a 	mov	r9,r3
   82a4c:	21000504 	addi	r4,r4,20
   82a50:	1909883a 	add	r4,r3,r4
   82a54:	49800015 	stw	r6,0(r9)
   82a58:	41800015 	stw	r6,0(r8)
   82a5c:	59800015 	stw	r6,0(r11)
   82a60:	51800015 	stw	r6,0(r10)
   82a64:	42000404 	addi	r8,r8,16
   82a68:	4a400404 	addi	r9,r9,16
   82a6c:	5ac00404 	addi	r11,r11,16
   82a70:	52800404 	addi	r10,r10,16
   82a74:	413ff71e 	bne	r8,r4,82a54 <rx_descriptor_end+0xfff829f4>
   82a78:	63000044 	addi	r12,r12,1
   82a7c:	6018913a 	slli	r12,r12,4
   82a80:	39c003cc 	andi	r7,r7,15
   82a84:	010000c4 	movi	r4,3
   82a88:	1b07883a 	add	r3,r3,r12
   82a8c:	21c00e2e 	bgeu	r4,r7,82ac8 <memset+0x100>
   82a90:	1813883a 	mov	r9,r3
   82a94:	3811883a 	mov	r8,r7
   82a98:	010000c4 	movi	r4,3
   82a9c:	49800015 	stw	r6,0(r9)
   82aa0:	423fff04 	addi	r8,r8,-4
   82aa4:	4a400104 	addi	r9,r9,4
   82aa8:	223ffc36 	bltu	r4,r8,82a9c <rx_descriptor_end+0xfff82a3c>
   82aac:	393fff04 	addi	r4,r7,-4
   82ab0:	2008d0ba 	srli	r4,r4,2
   82ab4:	39c000cc 	andi	r7,r7,3
   82ab8:	21000044 	addi	r4,r4,1
   82abc:	2109883a 	add	r4,r4,r4
   82ac0:	2109883a 	add	r4,r4,r4
   82ac4:	1907883a 	add	r3,r3,r4
   82ac8:	38000426 	beq	r7,zero,82adc <memset+0x114>
   82acc:	19cf883a 	add	r7,r3,r7
   82ad0:	19400005 	stb	r5,0(r3)
   82ad4:	18c00044 	addi	r3,r3,1
   82ad8:	19fffd1e 	bne	r3,r7,82ad0 <rx_descriptor_end+0xfff82a70>
   82adc:	f800283a 	ret
   82ae0:	2007883a 	mov	r3,r4
   82ae4:	300f883a 	mov	r7,r6
   82ae8:	003fc806 	br	82a0c <rx_descriptor_end+0xfff829ac>

00082aec <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   82aec:	defffe04 	addi	sp,sp,-8
   82af0:	df000115 	stw	fp,4(sp)
   82af4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   82af8:	e03fff15 	stw	zero,-4(fp)
   82afc:	00000506 	br	82b14 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   82b00:	e0bfff17 	ldw	r2,-4(fp)
   82b04:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   82b08:	e0bfff17 	ldw	r2,-4(fp)
   82b0c:	10800804 	addi	r2,r2,32
   82b10:	e0bfff15 	stw	r2,-4(fp)
   82b14:	e0bfff17 	ldw	r2,-4(fp)
   82b18:	10820030 	cmpltui	r2,r2,2048
   82b1c:	103ff81e 	bne	r2,zero,82b00 <rx_descriptor_end+0xfff82aa0>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   82b20:	e037883a 	mov	sp,fp
   82b24:	df000017 	ldw	fp,0(sp)
   82b28:	dec00104 	addi	sp,sp,4
   82b2c:	f800283a 	ret

00082b30 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   82b30:	defffc04 	addi	sp,sp,-16
   82b34:	df000315 	stw	fp,12(sp)
   82b38:	df000304 	addi	fp,sp,12
   82b3c:	e13ffd15 	stw	r4,-12(fp)
   82b40:	e17ffe15 	stw	r5,-8(fp)
   82b44:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   82b48:	e0fffe17 	ldw	r3,-8(fp)
   82b4c:	e0bffd17 	ldw	r2,-12(fp)
   82b50:	18800c26 	beq	r3,r2,82b84 <alt_load_section+0x54>
  {
    while( to != end )
   82b54:	00000806 	br	82b78 <alt_load_section+0x48>
    {
      *to++ = *from++;
   82b58:	e0bffe17 	ldw	r2,-8(fp)
   82b5c:	10c00104 	addi	r3,r2,4
   82b60:	e0fffe15 	stw	r3,-8(fp)
   82b64:	e0fffd17 	ldw	r3,-12(fp)
   82b68:	19000104 	addi	r4,r3,4
   82b6c:	e13ffd15 	stw	r4,-12(fp)
   82b70:	18c00017 	ldw	r3,0(r3)
   82b74:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   82b78:	e0fffe17 	ldw	r3,-8(fp)
   82b7c:	e0bfff17 	ldw	r2,-4(fp)
   82b80:	18bff51e 	bne	r3,r2,82b58 <rx_descriptor_end+0xfff82af8>
    {
      *to++ = *from++;
    }
  }
}
   82b84:	e037883a 	mov	sp,fp
   82b88:	df000017 	ldw	fp,0(sp)
   82b8c:	dec00104 	addi	sp,sp,4
   82b90:	f800283a 	ret

00082b94 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   82b94:	defffe04 	addi	sp,sp,-8
   82b98:	dfc00115 	stw	ra,4(sp)
   82b9c:	df000015 	stw	fp,0(sp)
   82ba0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   82ba4:	01000274 	movhi	r4,9
   82ba8:	21294204 	addi	r4,r4,-23288
   82bac:	01400274 	movhi	r5,9
   82bb0:	29628d04 	addi	r5,r5,-30156
   82bb4:	01800274 	movhi	r6,9
   82bb8:	31a94204 	addi	r6,r6,-23288
   82bbc:	0082b300 	call	82b30 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   82bc0:	01000234 	movhi	r4,8
   82bc4:	21000804 	addi	r4,r4,32
   82bc8:	01400234 	movhi	r5,8
   82bcc:	29400804 	addi	r5,r5,32
   82bd0:	01800234 	movhi	r6,8
   82bd4:	31809004 	addi	r6,r6,576
   82bd8:	0082b300 	call	82b30 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   82bdc:	01000274 	movhi	r4,9
   82be0:	21208204 	addi	r4,r4,-32248
   82be4:	01400274 	movhi	r5,9
   82be8:	29608204 	addi	r5,r5,-32248
   82bec:	01800274 	movhi	r6,9
   82bf0:	31a28d04 	addi	r6,r6,-30156
   82bf4:	0082b300 	call	82b30 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   82bf8:	0082aec0 	call	82aec <alt_dcache_flush_all>
  alt_icache_flush_all();
   82bfc:	0084ddc0 	call	84ddc <alt_icache_flush_all>
}
   82c00:	e037883a 	mov	sp,fp
   82c04:	dfc00117 	ldw	ra,4(sp)
   82c08:	df000017 	ldw	fp,0(sp)
   82c0c:	dec00204 	addi	sp,sp,8
   82c10:	f800283a 	ret

00082c14 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   82c14:	defffd04 	addi	sp,sp,-12
   82c18:	dfc00215 	stw	ra,8(sp)
   82c1c:	df000115 	stw	fp,4(sp)
   82c20:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   82c24:	0009883a 	mov	r4,zero
   82c28:	0082f300 	call	82f30 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   82c2c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   82c30:	0082f640 	call	82f64 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   82c34:	01000274 	movhi	r4,9
   82c38:	21227904 	addi	r4,r4,-30236
   82c3c:	01400274 	movhi	r5,9
   82c40:	29627904 	addi	r5,r5,-30236
   82c44:	01800274 	movhi	r6,9
   82c48:	31a27904 	addi	r6,r6,-30236
   82c4c:	008519c0 	call	8519c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   82c50:	0084c940 	call	84c94 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   82c54:	01000234 	movhi	r4,8
   82c58:	21133c04 	addi	r4,r4,19696
   82c5c:	00859940 	call	85994 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   82c60:	d126cd17 	ldw	r4,-25804(gp)
   82c64:	d0e6ce17 	ldw	r3,-25800(gp)
   82c68:	d0a6cf17 	ldw	r2,-25796(gp)
   82c6c:	180b883a 	mov	r5,r3
   82c70:	100d883a 	mov	r6,r2
   82c74:	008028c0 	call	8028c <main>
   82c78:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   82c7c:	01000044 	movi	r4,1
   82c80:	0084a300 	call	84a30 <close>
  exit (result);
   82c84:	e13fff17 	ldw	r4,-4(fp)
   82c88:	00859a80 	call	859a8 <exit>

00082c8c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   82c8c:	defff204 	addi	sp,sp,-56
   82c90:	dfc00a15 	stw	ra,40(sp)
   82c94:	df000915 	stw	fp,36(sp)
   82c98:	df000904 	addi	fp,sp,36
   82c9c:	e1400215 	stw	r5,8(fp)
   82ca0:	e1800315 	stw	r6,12(fp)
   82ca4:	e1c00415 	stw	r7,16(fp)
   82ca8:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
   82cac:	e0800204 	addi	r2,fp,8
   82cb0:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   82cb4:	e0bfff17 	ldw	r2,-4(fp)
   82cb8:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   82cbc:	00007106 	br	82e84 <alt_printf+0x1f8>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   82cc0:	e0bff807 	ldb	r2,-32(fp)
   82cc4:	10800960 	cmpeqi	r2,r2,37
   82cc8:	1000041e 	bne	r2,zero,82cdc <alt_printf+0x50>
        {
            alt_putchar(c);
   82ccc:	e0bff807 	ldb	r2,-32(fp)
   82cd0:	1009883a 	mov	r4,r2
   82cd4:	0082eb40 	call	82eb4 <alt_putchar>
   82cd8:	00006a06 	br	82e84 <alt_printf+0x1f8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   82cdc:	e0bff717 	ldw	r2,-36(fp)
   82ce0:	10c00044 	addi	r3,r2,1
   82ce4:	e0fff715 	stw	r3,-36(fp)
   82ce8:	10800003 	ldbu	r2,0(r2)
   82cec:	e0bff805 	stb	r2,-32(fp)
   82cf0:	e0bff807 	ldb	r2,-32(fp)
   82cf4:	10006226 	beq	r2,zero,82e80 <alt_printf+0x1f4>
            {
                if (c == '%')
   82cf8:	e0bff807 	ldb	r2,-32(fp)
   82cfc:	10800958 	cmpnei	r2,r2,37
   82d00:	1000041e 	bne	r2,zero,82d14 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   82d04:	e0bff807 	ldb	r2,-32(fp)
   82d08:	1009883a 	mov	r4,r2
   82d0c:	0082eb40 	call	82eb4 <alt_putchar>
   82d10:	00005c06 	br	82e84 <alt_printf+0x1f8>
                } 
                else if (c == 'c')
   82d14:	e0bff807 	ldb	r2,-32(fp)
   82d18:	108018d8 	cmpnei	r2,r2,99
   82d1c:	1000081e 	bne	r2,zero,82d40 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   82d20:	e0bffe17 	ldw	r2,-8(fp)
   82d24:	10c00104 	addi	r3,r2,4
   82d28:	e0fffe15 	stw	r3,-8(fp)
   82d2c:	10800017 	ldw	r2,0(r2)
   82d30:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   82d34:	e13ffd17 	ldw	r4,-12(fp)
   82d38:	0082eb40 	call	82eb4 <alt_putchar>
   82d3c:	00005106 	br	82e84 <alt_printf+0x1f8>
                }
                else if (c == 'x')
   82d40:	e0bff807 	ldb	r2,-32(fp)
   82d44:	10801e18 	cmpnei	r2,r2,120
   82d48:	1000341e 	bne	r2,zero,82e1c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   82d4c:	e0bffe17 	ldw	r2,-8(fp)
   82d50:	10c00104 	addi	r3,r2,4
   82d54:	e0fffe15 	stw	r3,-8(fp)
   82d58:	10800017 	ldw	r2,0(r2)
   82d5c:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   82d60:	e0bffb17 	ldw	r2,-20(fp)
   82d64:	1000031e 	bne	r2,zero,82d74 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   82d68:	01000c04 	movi	r4,48
   82d6c:	0082eb40 	call	82eb4 <alt_putchar>
                        continue;
   82d70:	00004406 	br	82e84 <alt_printf+0x1f8>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   82d74:	00800704 	movi	r2,28
   82d78:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   82d7c:	00000306 	br	82d8c <alt_printf+0x100>
                        digit_shift -= 4;
   82d80:	e0bff917 	ldw	r2,-28(fp)
   82d84:	10bfff04 	addi	r2,r2,-4
   82d88:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   82d8c:	00c003c4 	movi	r3,15
   82d90:	e0bff917 	ldw	r2,-28(fp)
   82d94:	1884983a 	sll	r2,r3,r2
   82d98:	1007883a 	mov	r3,r2
   82d9c:	e0bffb17 	ldw	r2,-20(fp)
   82da0:	1884703a 	and	r2,r3,r2
   82da4:	103ff626 	beq	r2,zero,82d80 <rx_descriptor_end+0xfff82d20>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   82da8:	00001906 	br	82e10 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   82dac:	00c003c4 	movi	r3,15
   82db0:	e0bff917 	ldw	r2,-28(fp)
   82db4:	1884983a 	sll	r2,r3,r2
   82db8:	1007883a 	mov	r3,r2
   82dbc:	e0bffb17 	ldw	r2,-20(fp)
   82dc0:	1886703a 	and	r3,r3,r2
   82dc4:	e0bff917 	ldw	r2,-28(fp)
   82dc8:	1884d83a 	srl	r2,r3,r2
   82dcc:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   82dd0:	e0bffc17 	ldw	r2,-16(fp)
   82dd4:	108002a8 	cmpgeui	r2,r2,10
   82dd8:	1000041e 	bne	r2,zero,82dec <alt_printf+0x160>
                            c = '0' + digit;
   82ddc:	e0bffc17 	ldw	r2,-16(fp)
   82de0:	10800c04 	addi	r2,r2,48
   82de4:	e0bff805 	stb	r2,-32(fp)
   82de8:	00000306 	br	82df8 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   82dec:	e0bffc17 	ldw	r2,-16(fp)
   82df0:	108015c4 	addi	r2,r2,87
   82df4:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   82df8:	e0bff807 	ldb	r2,-32(fp)
   82dfc:	1009883a 	mov	r4,r2
   82e00:	0082eb40 	call	82eb4 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   82e04:	e0bff917 	ldw	r2,-28(fp)
   82e08:	10bfff04 	addi	r2,r2,-4
   82e0c:	e0bff915 	stw	r2,-28(fp)
   82e10:	e0bff917 	ldw	r2,-28(fp)
   82e14:	103fe50e 	bge	r2,zero,82dac <rx_descriptor_end+0xfff82d4c>
   82e18:	00001a06 	br	82e84 <alt_printf+0x1f8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   82e1c:	e0bff807 	ldb	r2,-32(fp)
   82e20:	10801cd8 	cmpnei	r2,r2,115
   82e24:	1000151e 	bne	r2,zero,82e7c <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   82e28:	e0bffe17 	ldw	r2,-8(fp)
   82e2c:	10c00104 	addi	r3,r2,4
   82e30:	e0fffe15 	stw	r3,-8(fp)
   82e34:	10800017 	ldw	r2,0(r2)
   82e38:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   82e3c:	00000906 	br	82e64 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   82e40:	e0bffa17 	ldw	r2,-24(fp)
   82e44:	10c00044 	addi	r3,r2,1
   82e48:	e0fffa15 	stw	r3,-24(fp)
   82e4c:	10800003 	ldbu	r2,0(r2)
   82e50:	10803fcc 	andi	r2,r2,255
   82e54:	1080201c 	xori	r2,r2,128
   82e58:	10bfe004 	addi	r2,r2,-128
   82e5c:	1009883a 	mov	r4,r2
   82e60:	0082eb40 	call	82eb4 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   82e64:	e0bffa17 	ldw	r2,-24(fp)
   82e68:	10800003 	ldbu	r2,0(r2)
   82e6c:	10803fcc 	andi	r2,r2,255
   82e70:	1080201c 	xori	r2,r2,128
   82e74:	10bfe004 	addi	r2,r2,-128
   82e78:	103ff11e 	bne	r2,zero,82e40 <rx_descriptor_end+0xfff82de0>
   82e7c:	00000106 	br	82e84 <alt_printf+0x1f8>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   82e80:	00000706 	br	82ea0 <alt_printf+0x214>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   82e84:	e0bff717 	ldw	r2,-36(fp)
   82e88:	10c00044 	addi	r3,r2,1
   82e8c:	e0fff715 	stw	r3,-36(fp)
   82e90:	10800003 	ldbu	r2,0(r2)
   82e94:	e0bff805 	stb	r2,-32(fp)
   82e98:	e0bff807 	ldb	r2,-32(fp)
   82e9c:	103f881e 	bne	r2,zero,82cc0 <rx_descriptor_end+0xfff82c60>
            {
                break;
            }
        }
    }
}
   82ea0:	e037883a 	mov	sp,fp
   82ea4:	dfc00117 	ldw	ra,4(sp)
   82ea8:	df000017 	ldw	fp,0(sp)
   82eac:	dec00504 	addi	sp,sp,20
   82eb0:	f800283a 	ret

00082eb4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   82eb4:	defffd04 	addi	sp,sp,-12
   82eb8:	dfc00215 	stw	ra,8(sp)
   82ebc:	df000115 	stw	fp,4(sp)
   82ec0:	df000104 	addi	fp,sp,4
   82ec4:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   82ec8:	00800274 	movhi	r2,9
   82ecc:	10a93e04 	addi	r2,r2,-23304
   82ed0:	10800017 	ldw	r2,0(r2)
   82ed4:	10800217 	ldw	r2,8(r2)
   82ed8:	e13fff17 	ldw	r4,-4(fp)
   82edc:	100b883a 	mov	r5,r2
   82ee0:	0085afc0 	call	85afc <putc>
#endif
}
   82ee4:	e037883a 	mov	sp,fp
   82ee8:	dfc00117 	ldw	ra,4(sp)
   82eec:	df000017 	ldw	fp,0(sp)
   82ef0:	dec00204 	addi	sp,sp,8
   82ef4:	f800283a 	ret

00082ef8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   82ef8:	defffd04 	addi	sp,sp,-12
   82efc:	dfc00215 	stw	ra,8(sp)
   82f00:	df000115 	stw	fp,4(sp)
   82f04:	df000104 	addi	fp,sp,4
   82f08:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   82f0c:	e13fff17 	ldw	r4,-4(fp)
   82f10:	01400274 	movhi	r5,9
   82f14:	29693604 	addi	r5,r5,-23336
   82f18:	0084bf00 	call	84bf0 <alt_dev_llist_insert>
}
   82f1c:	e037883a 	mov	sp,fp
   82f20:	dfc00117 	ldw	ra,4(sp)
   82f24:	df000017 	ldw	fp,0(sp)
   82f28:	dec00204 	addi	sp,sp,8
   82f2c:	f800283a 	ret

00082f30 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   82f30:	defffd04 	addi	sp,sp,-12
   82f34:	dfc00215 	stw	ra,8(sp)
   82f38:	df000115 	stw	fp,4(sp)
   82f3c:	df000104 	addi	fp,sp,4
   82f40:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
   82f44:	00856840 	call	85684 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   82f48:	00800044 	movi	r2,1
   82f4c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   82f50:	e037883a 	mov	sp,fp
   82f54:	dfc00117 	ldw	ra,4(sp)
   82f58:	df000017 	ldw	fp,0(sp)
   82f5c:	dec00204 	addi	sp,sp,8
   82f60:	f800283a 	ret

00082f64 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   82f64:	defffe04 	addi	sp,sp,-8
   82f68:	dfc00115 	stw	ra,4(sp)
   82f6c:	df000015 	stw	fp,0(sp)
   82f70:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   82f74:	0009883a 	mov	r4,zero
   82f78:	000b883a 	mov	r5,zero
   82f7c:	01800044 	movi	r6,1
   82f80:	01e08d94 	movui	r7,33334
   82f84:	00848180 	call	84818 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   82f88:	01000274 	movhi	r4,9
   82f8c:	21229704 	addi	r4,r4,-30116
   82f90:	000b883a 	mov	r5,zero
   82f94:	000d883a 	mov	r6,zero
   82f98:	008314c0 	call	8314c <altera_avalon_jtag_uart_init>
   82f9c:	01000274 	movhi	r4,9
   82fa0:	21228d04 	addi	r4,r4,-30156
   82fa4:	0082ef80 	call	82ef8 <alt_dev_reg>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
   82fa8:	01000274 	movhi	r4,9
   82fac:	2126a504 	addi	r4,r4,-25964
   82fb0:	000b883a 	mov	r5,zero
   82fb4:	01800084 	movi	r6,2
   82fb8:	00847000 	call	84700 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
   82fbc:	01000274 	movhi	r4,9
   82fc0:	2126b104 	addi	r4,r4,-25916
   82fc4:	000b883a 	mov	r5,zero
   82fc8:	018000c4 	movi	r6,3
   82fcc:	00847000 	call	84700 <alt_avalon_sgdma_init>
    ALTERA_ETH_TSE_INIT ( TSE, tse);
   82fd0:	0001883a 	nop
}
   82fd4:	e037883a 	mov	sp,fp
   82fd8:	dfc00117 	ldw	ra,4(sp)
   82fdc:	df000017 	ldw	fp,0(sp)
   82fe0:	dec00204 	addi	sp,sp,8
   82fe4:	f800283a 	ret

00082fe8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   82fe8:	defffa04 	addi	sp,sp,-24
   82fec:	dfc00515 	stw	ra,20(sp)
   82ff0:	df000415 	stw	fp,16(sp)
   82ff4:	df000404 	addi	fp,sp,16
   82ff8:	e13ffd15 	stw	r4,-12(fp)
   82ffc:	e17ffe15 	stw	r5,-8(fp)
   83000:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   83004:	e0bffd17 	ldw	r2,-12(fp)
   83008:	10800017 	ldw	r2,0(r2)
   8300c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   83010:	e0bffc17 	ldw	r2,-16(fp)
   83014:	10c00a04 	addi	r3,r2,40
   83018:	e0bffd17 	ldw	r2,-12(fp)
   8301c:	10800217 	ldw	r2,8(r2)
   83020:	1809883a 	mov	r4,r3
   83024:	e17ffe17 	ldw	r5,-8(fp)
   83028:	e1bfff17 	ldw	r6,-4(fp)
   8302c:	100f883a 	mov	r7,r2
   83030:	00836100 	call	83610 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   83034:	e037883a 	mov	sp,fp
   83038:	dfc00117 	ldw	ra,4(sp)
   8303c:	df000017 	ldw	fp,0(sp)
   83040:	dec00204 	addi	sp,sp,8
   83044:	f800283a 	ret

00083048 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   83048:	defffa04 	addi	sp,sp,-24
   8304c:	dfc00515 	stw	ra,20(sp)
   83050:	df000415 	stw	fp,16(sp)
   83054:	df000404 	addi	fp,sp,16
   83058:	e13ffd15 	stw	r4,-12(fp)
   8305c:	e17ffe15 	stw	r5,-8(fp)
   83060:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   83064:	e0bffd17 	ldw	r2,-12(fp)
   83068:	10800017 	ldw	r2,0(r2)
   8306c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   83070:	e0bffc17 	ldw	r2,-16(fp)
   83074:	10c00a04 	addi	r3,r2,40
   83078:	e0bffd17 	ldw	r2,-12(fp)
   8307c:	10800217 	ldw	r2,8(r2)
   83080:	1809883a 	mov	r4,r3
   83084:	e17ffe17 	ldw	r5,-8(fp)
   83088:	e1bfff17 	ldw	r6,-4(fp)
   8308c:	100f883a 	mov	r7,r2
   83090:	008381c0 	call	8381c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   83094:	e037883a 	mov	sp,fp
   83098:	dfc00117 	ldw	ra,4(sp)
   8309c:	df000017 	ldw	fp,0(sp)
   830a0:	dec00204 	addi	sp,sp,8
   830a4:	f800283a 	ret

000830a8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   830a8:	defffc04 	addi	sp,sp,-16
   830ac:	dfc00315 	stw	ra,12(sp)
   830b0:	df000215 	stw	fp,8(sp)
   830b4:	df000204 	addi	fp,sp,8
   830b8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   830bc:	e0bfff17 	ldw	r2,-4(fp)
   830c0:	10800017 	ldw	r2,0(r2)
   830c4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   830c8:	e0bffe17 	ldw	r2,-8(fp)
   830cc:	10c00a04 	addi	r3,r2,40
   830d0:	e0bfff17 	ldw	r2,-4(fp)
   830d4:	10800217 	ldw	r2,8(r2)
   830d8:	1809883a 	mov	r4,r3
   830dc:	100b883a 	mov	r5,r2
   830e0:	00834bc0 	call	834bc <altera_avalon_jtag_uart_close>
}
   830e4:	e037883a 	mov	sp,fp
   830e8:	dfc00117 	ldw	ra,4(sp)
   830ec:	df000017 	ldw	fp,0(sp)
   830f0:	dec00204 	addi	sp,sp,8
   830f4:	f800283a 	ret

000830f8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   830f8:	defffa04 	addi	sp,sp,-24
   830fc:	dfc00515 	stw	ra,20(sp)
   83100:	df000415 	stw	fp,16(sp)
   83104:	df000404 	addi	fp,sp,16
   83108:	e13ffd15 	stw	r4,-12(fp)
   8310c:	e17ffe15 	stw	r5,-8(fp)
   83110:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   83114:	e0bffd17 	ldw	r2,-12(fp)
   83118:	10800017 	ldw	r2,0(r2)
   8311c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   83120:	e0bffc17 	ldw	r2,-16(fp)
   83124:	10800a04 	addi	r2,r2,40
   83128:	1009883a 	mov	r4,r2
   8312c:	e17ffe17 	ldw	r5,-8(fp)
   83130:	e1bfff17 	ldw	r6,-4(fp)
   83134:	00835240 	call	83524 <altera_avalon_jtag_uart_ioctl>
}
   83138:	e037883a 	mov	sp,fp
   8313c:	dfc00117 	ldw	ra,4(sp)
   83140:	df000017 	ldw	fp,0(sp)
   83144:	dec00204 	addi	sp,sp,8
   83148:	f800283a 	ret

0008314c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8314c:	defffa04 	addi	sp,sp,-24
   83150:	dfc00515 	stw	ra,20(sp)
   83154:	df000415 	stw	fp,16(sp)
   83158:	df000404 	addi	fp,sp,16
   8315c:	e13ffd15 	stw	r4,-12(fp)
   83160:	e17ffe15 	stw	r5,-8(fp)
   83164:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   83168:	e0bffd17 	ldw	r2,-12(fp)
   8316c:	00c00044 	movi	r3,1
   83170:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   83174:	e0bffd17 	ldw	r2,-12(fp)
   83178:	10800017 	ldw	r2,0(r2)
   8317c:	10800104 	addi	r2,r2,4
   83180:	1007883a 	mov	r3,r2
   83184:	e0bffd17 	ldw	r2,-12(fp)
   83188:	10800817 	ldw	r2,32(r2)
   8318c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   83190:	e0fffe17 	ldw	r3,-8(fp)
   83194:	e0bfff17 	ldw	r2,-4(fp)
   83198:	d8000015 	stw	zero,0(sp)
   8319c:	1809883a 	mov	r4,r3
   831a0:	100b883a 	mov	r5,r2
   831a4:	01800234 	movhi	r6,8
   831a8:	318c8404 	addi	r6,r6,12816
   831ac:	e1fffd17 	ldw	r7,-12(fp)
   831b0:	0084e0c0 	call	84e0c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   831b4:	e0bffd17 	ldw	r2,-12(fp)
   831b8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   831bc:	e0bffd17 	ldw	r2,-12(fp)
   831c0:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   831c4:	00800274 	movhi	r2,9
   831c8:	10b00304 	addi	r2,r2,-16372
   831cc:	10800017 	ldw	r2,0(r2)
   831d0:	1809883a 	mov	r4,r3
   831d4:	100b883a 	mov	r5,r2
   831d8:	01800234 	movhi	r6,8
   831dc:	318d0504 	addi	r6,r6,13332
   831e0:	e1fffd17 	ldw	r7,-12(fp)
   831e4:	00848a00 	call	848a0 <alt_alarm_start>
   831e8:	1000040e 	bge	r2,zero,831fc <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   831ec:	e0fffd17 	ldw	r3,-12(fp)
   831f0:	00a00034 	movhi	r2,32768
   831f4:	10bfffc4 	addi	r2,r2,-1
   831f8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   831fc:	e037883a 	mov	sp,fp
   83200:	dfc00117 	ldw	ra,4(sp)
   83204:	df000017 	ldw	fp,0(sp)
   83208:	dec00204 	addi	sp,sp,8
   8320c:	f800283a 	ret

00083210 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   83210:	defff804 	addi	sp,sp,-32
   83214:	df000715 	stw	fp,28(sp)
   83218:	df000704 	addi	fp,sp,28
   8321c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   83220:	e0bfff17 	ldw	r2,-4(fp)
   83224:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   83228:	e0bffb17 	ldw	r2,-20(fp)
   8322c:	10800017 	ldw	r2,0(r2)
   83230:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   83234:	e0bffc17 	ldw	r2,-16(fp)
   83238:	10800104 	addi	r2,r2,4
   8323c:	10800037 	ldwio	r2,0(r2)
   83240:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   83244:	e0bffd17 	ldw	r2,-12(fp)
   83248:	1080c00c 	andi	r2,r2,768
   8324c:	1000011e 	bne	r2,zero,83254 <altera_avalon_jtag_uart_irq+0x44>
      break;
   83250:	00006c06 	br	83404 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   83254:	e0bffd17 	ldw	r2,-12(fp)
   83258:	1080400c 	andi	r2,r2,256
   8325c:	10003426 	beq	r2,zero,83330 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   83260:	00800074 	movhi	r2,1
   83264:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   83268:	e0bffb17 	ldw	r2,-20(fp)
   8326c:	10800a17 	ldw	r2,40(r2)
   83270:	10800044 	addi	r2,r2,1
   83274:	1081ffcc 	andi	r2,r2,2047
   83278:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   8327c:	e0bffb17 	ldw	r2,-20(fp)
   83280:	10c00b17 	ldw	r3,44(r2)
   83284:	e0bffe17 	ldw	r2,-8(fp)
   83288:	1880011e 	bne	r3,r2,83290 <altera_avalon_jtag_uart_irq+0x80>
          break;
   8328c:	00001606 	br	832e8 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   83290:	e0bffc17 	ldw	r2,-16(fp)
   83294:	10800037 	ldwio	r2,0(r2)
   83298:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   8329c:	e0bff917 	ldw	r2,-28(fp)
   832a0:	10a0000c 	andi	r2,r2,32768
   832a4:	1000011e 	bne	r2,zero,832ac <altera_avalon_jtag_uart_irq+0x9c>
          break;
   832a8:	00000f06 	br	832e8 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   832ac:	e0bffb17 	ldw	r2,-20(fp)
   832b0:	10800a17 	ldw	r2,40(r2)
   832b4:	e0fff917 	ldw	r3,-28(fp)
   832b8:	1809883a 	mov	r4,r3
   832bc:	e0fffb17 	ldw	r3,-20(fp)
   832c0:	1885883a 	add	r2,r3,r2
   832c4:	10800e04 	addi	r2,r2,56
   832c8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   832cc:	e0bffb17 	ldw	r2,-20(fp)
   832d0:	10800a17 	ldw	r2,40(r2)
   832d4:	10800044 	addi	r2,r2,1
   832d8:	10c1ffcc 	andi	r3,r2,2047
   832dc:	e0bffb17 	ldw	r2,-20(fp)
   832e0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   832e4:	003fe006 	br	83268 <rx_descriptor_end+0xfff83208>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   832e8:	e0bff917 	ldw	r2,-28(fp)
   832ec:	10bfffec 	andhi	r2,r2,65535
   832f0:	10000f26 	beq	r2,zero,83330 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   832f4:	e0bffb17 	ldw	r2,-20(fp)
   832f8:	10c00817 	ldw	r3,32(r2)
   832fc:	00bfff84 	movi	r2,-2
   83300:	1886703a 	and	r3,r3,r2
   83304:	e0bffb17 	ldw	r2,-20(fp)
   83308:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   8330c:	e0bffc17 	ldw	r2,-16(fp)
   83310:	10800104 	addi	r2,r2,4
   83314:	1007883a 	mov	r3,r2
   83318:	e0bffb17 	ldw	r2,-20(fp)
   8331c:	10800817 	ldw	r2,32(r2)
   83320:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   83324:	e0bffc17 	ldw	r2,-16(fp)
   83328:	10800104 	addi	r2,r2,4
   8332c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   83330:	e0bffd17 	ldw	r2,-12(fp)
   83334:	1080800c 	andi	r2,r2,512
   83338:	10003126 	beq	r2,zero,83400 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   8333c:	e0bffd17 	ldw	r2,-12(fp)
   83340:	1004d43a 	srli	r2,r2,16
   83344:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   83348:	00001406 	br	8339c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   8334c:	e0bffc17 	ldw	r2,-16(fp)
   83350:	e0fffb17 	ldw	r3,-20(fp)
   83354:	18c00d17 	ldw	r3,52(r3)
   83358:	e13ffb17 	ldw	r4,-20(fp)
   8335c:	20c7883a 	add	r3,r4,r3
   83360:	18c20e04 	addi	r3,r3,2104
   83364:	18c00003 	ldbu	r3,0(r3)
   83368:	18c03fcc 	andi	r3,r3,255
   8336c:	18c0201c 	xori	r3,r3,128
   83370:	18ffe004 	addi	r3,r3,-128
   83374:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   83378:	e0bffb17 	ldw	r2,-20(fp)
   8337c:	10800d17 	ldw	r2,52(r2)
   83380:	10800044 	addi	r2,r2,1
   83384:	10c1ffcc 	andi	r3,r2,2047
   83388:	e0bffb17 	ldw	r2,-20(fp)
   8338c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   83390:	e0bffa17 	ldw	r2,-24(fp)
   83394:	10bfffc4 	addi	r2,r2,-1
   83398:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   8339c:	e0bffa17 	ldw	r2,-24(fp)
   833a0:	10000526 	beq	r2,zero,833b8 <altera_avalon_jtag_uart_irq+0x1a8>
   833a4:	e0bffb17 	ldw	r2,-20(fp)
   833a8:	10c00d17 	ldw	r3,52(r2)
   833ac:	e0bffb17 	ldw	r2,-20(fp)
   833b0:	10800c17 	ldw	r2,48(r2)
   833b4:	18bfe51e 	bne	r3,r2,8334c <rx_descriptor_end+0xfff832ec>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   833b8:	e0bffa17 	ldw	r2,-24(fp)
   833bc:	10001026 	beq	r2,zero,83400 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   833c0:	e0bffb17 	ldw	r2,-20(fp)
   833c4:	10c00817 	ldw	r3,32(r2)
   833c8:	00bfff44 	movi	r2,-3
   833cc:	1886703a 	and	r3,r3,r2
   833d0:	e0bffb17 	ldw	r2,-20(fp)
   833d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   833d8:	e0bffb17 	ldw	r2,-20(fp)
   833dc:	10800017 	ldw	r2,0(r2)
   833e0:	10800104 	addi	r2,r2,4
   833e4:	1007883a 	mov	r3,r2
   833e8:	e0bffb17 	ldw	r2,-20(fp)
   833ec:	10800817 	ldw	r2,32(r2)
   833f0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   833f4:	e0bffc17 	ldw	r2,-16(fp)
   833f8:	10800104 	addi	r2,r2,4
   833fc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   83400:	003f8c06 	br	83234 <rx_descriptor_end+0xfff831d4>
}
   83404:	e037883a 	mov	sp,fp
   83408:	df000017 	ldw	fp,0(sp)
   8340c:	dec00104 	addi	sp,sp,4
   83410:	f800283a 	ret

00083414 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   83414:	defff804 	addi	sp,sp,-32
   83418:	df000715 	stw	fp,28(sp)
   8341c:	df000704 	addi	fp,sp,28
   83420:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   83424:	e0bffb17 	ldw	r2,-20(fp)
   83428:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   8342c:	e0bff917 	ldw	r2,-28(fp)
   83430:	10800017 	ldw	r2,0(r2)
   83434:	10800104 	addi	r2,r2,4
   83438:	10800037 	ldwio	r2,0(r2)
   8343c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   83440:	e0bffa17 	ldw	r2,-24(fp)
   83444:	1081000c 	andi	r2,r2,1024
   83448:	10000b26 	beq	r2,zero,83478 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   8344c:	e0bff917 	ldw	r2,-28(fp)
   83450:	10800017 	ldw	r2,0(r2)
   83454:	10800104 	addi	r2,r2,4
   83458:	1007883a 	mov	r3,r2
   8345c:	e0bff917 	ldw	r2,-28(fp)
   83460:	10800817 	ldw	r2,32(r2)
   83464:	10810014 	ori	r2,r2,1024
   83468:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   8346c:	e0bff917 	ldw	r2,-28(fp)
   83470:	10000915 	stw	zero,36(r2)
   83474:	00000a06 	br	834a0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   83478:	e0bff917 	ldw	r2,-28(fp)
   8347c:	10c00917 	ldw	r3,36(r2)
   83480:	00a00034 	movhi	r2,32768
   83484:	10bfff04 	addi	r2,r2,-4
   83488:	10c00536 	bltu	r2,r3,834a0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   8348c:	e0bff917 	ldw	r2,-28(fp)
   83490:	10800917 	ldw	r2,36(r2)
   83494:	10c00044 	addi	r3,r2,1
   83498:	e0bff917 	ldw	r2,-28(fp)
   8349c:	10c00915 	stw	r3,36(r2)
   834a0:	00800274 	movhi	r2,9
   834a4:	10b00304 	addi	r2,r2,-16372
   834a8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   834ac:	e037883a 	mov	sp,fp
   834b0:	df000017 	ldw	fp,0(sp)
   834b4:	dec00104 	addi	sp,sp,4
   834b8:	f800283a 	ret

000834bc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   834bc:	defffd04 	addi	sp,sp,-12
   834c0:	df000215 	stw	fp,8(sp)
   834c4:	df000204 	addi	fp,sp,8
   834c8:	e13ffe15 	stw	r4,-8(fp)
   834cc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   834d0:	00000506 	br	834e8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   834d4:	e0bfff17 	ldw	r2,-4(fp)
   834d8:	1090000c 	andi	r2,r2,16384
   834dc:	10000226 	beq	r2,zero,834e8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   834e0:	00bffd44 	movi	r2,-11
   834e4:	00000b06 	br	83514 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   834e8:	e0bffe17 	ldw	r2,-8(fp)
   834ec:	10c00d17 	ldw	r3,52(r2)
   834f0:	e0bffe17 	ldw	r2,-8(fp)
   834f4:	10800c17 	ldw	r2,48(r2)
   834f8:	18800526 	beq	r3,r2,83510 <altera_avalon_jtag_uart_close+0x54>
   834fc:	e0bffe17 	ldw	r2,-8(fp)
   83500:	10c00917 	ldw	r3,36(r2)
   83504:	e0bffe17 	ldw	r2,-8(fp)
   83508:	10800117 	ldw	r2,4(r2)
   8350c:	18bff136 	bltu	r3,r2,834d4 <rx_descriptor_end+0xfff83474>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   83510:	0005883a 	mov	r2,zero
}
   83514:	e037883a 	mov	sp,fp
   83518:	df000017 	ldw	fp,0(sp)
   8351c:	dec00104 	addi	sp,sp,4
   83520:	f800283a 	ret

00083524 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   83524:	defffa04 	addi	sp,sp,-24
   83528:	df000515 	stw	fp,20(sp)
   8352c:	df000504 	addi	fp,sp,20
   83530:	e13ffd15 	stw	r4,-12(fp)
   83534:	e17ffe15 	stw	r5,-8(fp)
   83538:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   8353c:	00bff9c4 	movi	r2,-25
   83540:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   83544:	e0bffe17 	ldw	r2,-8(fp)
   83548:	10da8060 	cmpeqi	r3,r2,27137
   8354c:	1800031e 	bne	r3,zero,8355c <altera_avalon_jtag_uart_ioctl+0x38>
   83550:	109a80a0 	cmpeqi	r2,r2,27138
   83554:	1000191e 	bne	r2,zero,835bc <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   83558:	00002806 	br	835fc <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   8355c:	e0bffd17 	ldw	r2,-12(fp)
   83560:	10c00117 	ldw	r3,4(r2)
   83564:	00a00034 	movhi	r2,32768
   83568:	10bfffc4 	addi	r2,r2,-1
   8356c:	18801226 	beq	r3,r2,835b8 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   83570:	e0bfff17 	ldw	r2,-4(fp)
   83574:	10800017 	ldw	r2,0(r2)
   83578:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   8357c:	e0bffc17 	ldw	r2,-16(fp)
   83580:	10800090 	cmplti	r2,r2,2
   83584:	1000061e 	bne	r2,zero,835a0 <altera_avalon_jtag_uart_ioctl+0x7c>
   83588:	e0fffc17 	ldw	r3,-16(fp)
   8358c:	00a00034 	movhi	r2,32768
   83590:	10bfffc4 	addi	r2,r2,-1
   83594:	18800226 	beq	r3,r2,835a0 <altera_avalon_jtag_uart_ioctl+0x7c>
   83598:	e0bffc17 	ldw	r2,-16(fp)
   8359c:	00000206 	br	835a8 <altera_avalon_jtag_uart_ioctl+0x84>
   835a0:	00a00034 	movhi	r2,32768
   835a4:	10bfff84 	addi	r2,r2,-2
   835a8:	e0fffd17 	ldw	r3,-12(fp)
   835ac:	18800115 	stw	r2,4(r3)
      rc = 0;
   835b0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   835b4:	00001106 	br	835fc <altera_avalon_jtag_uart_ioctl+0xd8>
   835b8:	00001006 	br	835fc <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   835bc:	e0bffd17 	ldw	r2,-12(fp)
   835c0:	10c00117 	ldw	r3,4(r2)
   835c4:	00a00034 	movhi	r2,32768
   835c8:	10bfffc4 	addi	r2,r2,-1
   835cc:	18800a26 	beq	r3,r2,835f8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   835d0:	e0bffd17 	ldw	r2,-12(fp)
   835d4:	10c00917 	ldw	r3,36(r2)
   835d8:	e0bffd17 	ldw	r2,-12(fp)
   835dc:	10800117 	ldw	r2,4(r2)
   835e0:	1885803a 	cmpltu	r2,r3,r2
   835e4:	10c03fcc 	andi	r3,r2,255
   835e8:	e0bfff17 	ldw	r2,-4(fp)
   835ec:	10c00015 	stw	r3,0(r2)
      rc = 0;
   835f0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   835f4:	00000006 	br	835f8 <altera_avalon_jtag_uart_ioctl+0xd4>
   835f8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   835fc:	e0bffb17 	ldw	r2,-20(fp)
}
   83600:	e037883a 	mov	sp,fp
   83604:	df000017 	ldw	fp,0(sp)
   83608:	dec00104 	addi	sp,sp,4
   8360c:	f800283a 	ret

00083610 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   83610:	defff304 	addi	sp,sp,-52
   83614:	dfc00c15 	stw	ra,48(sp)
   83618:	df000b15 	stw	fp,44(sp)
   8361c:	df000b04 	addi	fp,sp,44
   83620:	e13ffc15 	stw	r4,-16(fp)
   83624:	e17ffd15 	stw	r5,-12(fp)
   83628:	e1bffe15 	stw	r6,-8(fp)
   8362c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   83630:	e0bffd17 	ldw	r2,-12(fp)
   83634:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   83638:	00004906 	br	83760 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   8363c:	e0bffc17 	ldw	r2,-16(fp)
   83640:	10800a17 	ldw	r2,40(r2)
   83644:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   83648:	e0bffc17 	ldw	r2,-16(fp)
   8364c:	10800b17 	ldw	r2,44(r2)
   83650:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   83654:	e0fff717 	ldw	r3,-36(fp)
   83658:	e0bff817 	ldw	r2,-32(fp)
   8365c:	18800536 	bltu	r3,r2,83674 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   83660:	e0fff717 	ldw	r3,-36(fp)
   83664:	e0bff817 	ldw	r2,-32(fp)
   83668:	1885c83a 	sub	r2,r3,r2
   8366c:	e0bff615 	stw	r2,-40(fp)
   83670:	00000406 	br	83684 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   83674:	00c20004 	movi	r3,2048
   83678:	e0bff817 	ldw	r2,-32(fp)
   8367c:	1885c83a 	sub	r2,r3,r2
   83680:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   83684:	e0bff617 	ldw	r2,-40(fp)
   83688:	1000011e 	bne	r2,zero,83690 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   8368c:	00001d06 	br	83704 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   83690:	e0fffe17 	ldw	r3,-8(fp)
   83694:	e0bff617 	ldw	r2,-40(fp)
   83698:	1880022e 	bgeu	r3,r2,836a4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   8369c:	e0bffe17 	ldw	r2,-8(fp)
   836a0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   836a4:	e0bff817 	ldw	r2,-32(fp)
   836a8:	10800e04 	addi	r2,r2,56
   836ac:	e0fffc17 	ldw	r3,-16(fp)
   836b0:	1885883a 	add	r2,r3,r2
   836b4:	e13ff517 	ldw	r4,-44(fp)
   836b8:	100b883a 	mov	r5,r2
   836bc:	e1bff617 	ldw	r6,-40(fp)
   836c0:	00828900 	call	82890 <memcpy>
      ptr   += n;
   836c4:	e0fff517 	ldw	r3,-44(fp)
   836c8:	e0bff617 	ldw	r2,-40(fp)
   836cc:	1885883a 	add	r2,r3,r2
   836d0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   836d4:	e0fffe17 	ldw	r3,-8(fp)
   836d8:	e0bff617 	ldw	r2,-40(fp)
   836dc:	1885c83a 	sub	r2,r3,r2
   836e0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   836e4:	e0fff817 	ldw	r3,-32(fp)
   836e8:	e0bff617 	ldw	r2,-40(fp)
   836ec:	1885883a 	add	r2,r3,r2
   836f0:	10c1ffcc 	andi	r3,r2,2047
   836f4:	e0bffc17 	ldw	r2,-16(fp)
   836f8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   836fc:	e0bffe17 	ldw	r2,-8(fp)
   83700:	00bfce16 	blt	zero,r2,8363c <rx_descriptor_end+0xfff835dc>

    /* If we read any data then return it */
    if (ptr != buffer)
   83704:	e0fff517 	ldw	r3,-44(fp)
   83708:	e0bffd17 	ldw	r2,-12(fp)
   8370c:	18800126 	beq	r3,r2,83714 <altera_avalon_jtag_uart_read+0x104>
      break;
   83710:	00001506 	br	83768 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   83714:	e0bfff17 	ldw	r2,-4(fp)
   83718:	1090000c 	andi	r2,r2,16384
   8371c:	10000126 	beq	r2,zero,83724 <altera_avalon_jtag_uart_read+0x114>
      break;
   83720:	00001106 	br	83768 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   83724:	0001883a 	nop
   83728:	e0bffc17 	ldw	r2,-16(fp)
   8372c:	10c00a17 	ldw	r3,40(r2)
   83730:	e0bff717 	ldw	r2,-36(fp)
   83734:	1880051e 	bne	r3,r2,8374c <altera_avalon_jtag_uart_read+0x13c>
   83738:	e0bffc17 	ldw	r2,-16(fp)
   8373c:	10c00917 	ldw	r3,36(r2)
   83740:	e0bffc17 	ldw	r2,-16(fp)
   83744:	10800117 	ldw	r2,4(r2)
   83748:	18bff736 	bltu	r3,r2,83728 <rx_descriptor_end+0xfff836c8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   8374c:	e0bffc17 	ldw	r2,-16(fp)
   83750:	10c00a17 	ldw	r3,40(r2)
   83754:	e0bff717 	ldw	r2,-36(fp)
   83758:	1880011e 	bne	r3,r2,83760 <altera_avalon_jtag_uart_read+0x150>
      break;
   8375c:	00000206 	br	83768 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   83760:	e0bffe17 	ldw	r2,-8(fp)
   83764:	00bfb516 	blt	zero,r2,8363c <rx_descriptor_end+0xfff835dc>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   83768:	e0fff517 	ldw	r3,-44(fp)
   8376c:	e0bffd17 	ldw	r2,-12(fp)
   83770:	18801826 	beq	r3,r2,837d4 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   83774:	0005303a 	rdctl	r2,status
   83778:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8377c:	e0fffa17 	ldw	r3,-24(fp)
   83780:	00bfff84 	movi	r2,-2
   83784:	1884703a 	and	r2,r3,r2
   83788:	1001703a 	wrctl	status,r2
  
  return context;
   8378c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   83790:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   83794:	e0bffc17 	ldw	r2,-16(fp)
   83798:	10800817 	ldw	r2,32(r2)
   8379c:	10c00054 	ori	r3,r2,1
   837a0:	e0bffc17 	ldw	r2,-16(fp)
   837a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   837a8:	e0bffc17 	ldw	r2,-16(fp)
   837ac:	10800017 	ldw	r2,0(r2)
   837b0:	10800104 	addi	r2,r2,4
   837b4:	1007883a 	mov	r3,r2
   837b8:	e0bffc17 	ldw	r2,-16(fp)
   837bc:	10800817 	ldw	r2,32(r2)
   837c0:	18800035 	stwio	r2,0(r3)
   837c4:	e0bff917 	ldw	r2,-28(fp)
   837c8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   837cc:	e0bffb17 	ldw	r2,-20(fp)
   837d0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   837d4:	e0fff517 	ldw	r3,-44(fp)
   837d8:	e0bffd17 	ldw	r2,-12(fp)
   837dc:	18800426 	beq	r3,r2,837f0 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   837e0:	e0fff517 	ldw	r3,-44(fp)
   837e4:	e0bffd17 	ldw	r2,-12(fp)
   837e8:	1885c83a 	sub	r2,r3,r2
   837ec:	00000606 	br	83808 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   837f0:	e0bfff17 	ldw	r2,-4(fp)
   837f4:	1090000c 	andi	r2,r2,16384
   837f8:	10000226 	beq	r2,zero,83804 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   837fc:	00bffd44 	movi	r2,-11
   83800:	00000106 	br	83808 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   83804:	00bffec4 	movi	r2,-5
}
   83808:	e037883a 	mov	sp,fp
   8380c:	dfc00117 	ldw	ra,4(sp)
   83810:	df000017 	ldw	fp,0(sp)
   83814:	dec00204 	addi	sp,sp,8
   83818:	f800283a 	ret

0008381c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8381c:	defff304 	addi	sp,sp,-52
   83820:	dfc00c15 	stw	ra,48(sp)
   83824:	df000b15 	stw	fp,44(sp)
   83828:	df000b04 	addi	fp,sp,44
   8382c:	e13ffc15 	stw	r4,-16(fp)
   83830:	e17ffd15 	stw	r5,-12(fp)
   83834:	e1bffe15 	stw	r6,-8(fp)
   83838:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   8383c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   83840:	e0bffd17 	ldw	r2,-12(fp)
   83844:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   83848:	00003806 	br	8392c <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   8384c:	e0bffc17 	ldw	r2,-16(fp)
   83850:	10800c17 	ldw	r2,48(r2)
   83854:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   83858:	e0bffc17 	ldw	r2,-16(fp)
   8385c:	10800d17 	ldw	r2,52(r2)
   83860:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   83864:	e0fff817 	ldw	r3,-32(fp)
   83868:	e0bff517 	ldw	r2,-44(fp)
   8386c:	1880062e 	bgeu	r3,r2,83888 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   83870:	e0fff517 	ldw	r3,-44(fp)
   83874:	e0bff817 	ldw	r2,-32(fp)
   83878:	1885c83a 	sub	r2,r3,r2
   8387c:	10bfffc4 	addi	r2,r2,-1
   83880:	e0bff615 	stw	r2,-40(fp)
   83884:	00000b06 	br	838b4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   83888:	e0bff517 	ldw	r2,-44(fp)
   8388c:	10000526 	beq	r2,zero,838a4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   83890:	00c20004 	movi	r3,2048
   83894:	e0bff817 	ldw	r2,-32(fp)
   83898:	1885c83a 	sub	r2,r3,r2
   8389c:	e0bff615 	stw	r2,-40(fp)
   838a0:	00000406 	br	838b4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   838a4:	00c1ffc4 	movi	r3,2047
   838a8:	e0bff817 	ldw	r2,-32(fp)
   838ac:	1885c83a 	sub	r2,r3,r2
   838b0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   838b4:	e0bff617 	ldw	r2,-40(fp)
   838b8:	1000011e 	bne	r2,zero,838c0 <altera_avalon_jtag_uart_write+0xa4>
        break;
   838bc:	00001d06 	br	83934 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   838c0:	e0fffe17 	ldw	r3,-8(fp)
   838c4:	e0bff617 	ldw	r2,-40(fp)
   838c8:	1880022e 	bgeu	r3,r2,838d4 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   838cc:	e0bffe17 	ldw	r2,-8(fp)
   838d0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   838d4:	e0bff817 	ldw	r2,-32(fp)
   838d8:	10820e04 	addi	r2,r2,2104
   838dc:	e0fffc17 	ldw	r3,-16(fp)
   838e0:	1885883a 	add	r2,r3,r2
   838e4:	1009883a 	mov	r4,r2
   838e8:	e17ffd17 	ldw	r5,-12(fp)
   838ec:	e1bff617 	ldw	r6,-40(fp)
   838f0:	00828900 	call	82890 <memcpy>
      ptr   += n;
   838f4:	e0fffd17 	ldw	r3,-12(fp)
   838f8:	e0bff617 	ldw	r2,-40(fp)
   838fc:	1885883a 	add	r2,r3,r2
   83900:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   83904:	e0fffe17 	ldw	r3,-8(fp)
   83908:	e0bff617 	ldw	r2,-40(fp)
   8390c:	1885c83a 	sub	r2,r3,r2
   83910:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   83914:	e0fff817 	ldw	r3,-32(fp)
   83918:	e0bff617 	ldw	r2,-40(fp)
   8391c:	1885883a 	add	r2,r3,r2
   83920:	10c1ffcc 	andi	r3,r2,2047
   83924:	e0bffc17 	ldw	r2,-16(fp)
   83928:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8392c:	e0bffe17 	ldw	r2,-8(fp)
   83930:	00bfc616 	blt	zero,r2,8384c <rx_descriptor_end+0xfff837ec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   83934:	0005303a 	rdctl	r2,status
   83938:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8393c:	e0fffa17 	ldw	r3,-24(fp)
   83940:	00bfff84 	movi	r2,-2
   83944:	1884703a 	and	r2,r3,r2
   83948:	1001703a 	wrctl	status,r2
  
  return context;
   8394c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   83950:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   83954:	e0bffc17 	ldw	r2,-16(fp)
   83958:	10800817 	ldw	r2,32(r2)
   8395c:	10c00094 	ori	r3,r2,2
   83960:	e0bffc17 	ldw	r2,-16(fp)
   83964:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   83968:	e0bffc17 	ldw	r2,-16(fp)
   8396c:	10800017 	ldw	r2,0(r2)
   83970:	10800104 	addi	r2,r2,4
   83974:	1007883a 	mov	r3,r2
   83978:	e0bffc17 	ldw	r2,-16(fp)
   8397c:	10800817 	ldw	r2,32(r2)
   83980:	18800035 	stwio	r2,0(r3)
   83984:	e0bff917 	ldw	r2,-28(fp)
   83988:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8398c:	e0bffb17 	ldw	r2,-20(fp)
   83990:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   83994:	e0bffe17 	ldw	r2,-8(fp)
   83998:	0080120e 	bge	zero,r2,839e4 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   8399c:	e0bfff17 	ldw	r2,-4(fp)
   839a0:	1090000c 	andi	r2,r2,16384
   839a4:	10000126 	beq	r2,zero,839ac <altera_avalon_jtag_uart_write+0x190>
        break;
   839a8:	00001006 	br	839ec <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   839ac:	0001883a 	nop
   839b0:	e0bffc17 	ldw	r2,-16(fp)
   839b4:	10c00d17 	ldw	r3,52(r2)
   839b8:	e0bff517 	ldw	r2,-44(fp)
   839bc:	1880051e 	bne	r3,r2,839d4 <altera_avalon_jtag_uart_write+0x1b8>
   839c0:	e0bffc17 	ldw	r2,-16(fp)
   839c4:	10c00917 	ldw	r3,36(r2)
   839c8:	e0bffc17 	ldw	r2,-16(fp)
   839cc:	10800117 	ldw	r2,4(r2)
   839d0:	18bff736 	bltu	r3,r2,839b0 <rx_descriptor_end+0xfff83950>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   839d4:	e0bffc17 	ldw	r2,-16(fp)
   839d8:	10800917 	ldw	r2,36(r2)
   839dc:	10000126 	beq	r2,zero,839e4 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   839e0:	00000206 	br	839ec <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   839e4:	e0bffe17 	ldw	r2,-8(fp)
   839e8:	00bf9716 	blt	zero,r2,83848 <rx_descriptor_end+0xfff837e8>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   839ec:	e0fffd17 	ldw	r3,-12(fp)
   839f0:	e0bff717 	ldw	r2,-36(fp)
   839f4:	18800426 	beq	r3,r2,83a08 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   839f8:	e0fffd17 	ldw	r3,-12(fp)
   839fc:	e0bff717 	ldw	r2,-36(fp)
   83a00:	1885c83a 	sub	r2,r3,r2
   83a04:	00000606 	br	83a20 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   83a08:	e0bfff17 	ldw	r2,-4(fp)
   83a0c:	1090000c 	andi	r2,r2,16384
   83a10:	10000226 	beq	r2,zero,83a1c <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   83a14:	00bffd44 	movi	r2,-11
   83a18:	00000106 	br	83a20 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   83a1c:	00bffec4 	movi	r2,-5
}
   83a20:	e037883a 	mov	sp,fp
   83a24:	dfc00117 	ldw	ra,4(sp)
   83a28:	df000017 	ldw	fp,0(sp)
   83a2c:	dec00204 	addi	sp,sp,8
   83a30:	f800283a 	ret

00083a34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   83a34:	defffe04 	addi	sp,sp,-8
   83a38:	dfc00115 	stw	ra,4(sp)
   83a3c:	df000015 	stw	fp,0(sp)
   83a40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   83a44:	00800274 	movhi	r2,9
   83a48:	10a93904 	addi	r2,r2,-23324
   83a4c:	10800017 	ldw	r2,0(r2)
   83a50:	10000526 	beq	r2,zero,83a68 <alt_get_errno+0x34>
   83a54:	00800274 	movhi	r2,9
   83a58:	10a93904 	addi	r2,r2,-23324
   83a5c:	10800017 	ldw	r2,0(r2)
   83a60:	103ee83a 	callr	r2
   83a64:	00000206 	br	83a70 <alt_get_errno+0x3c>
   83a68:	00800274 	movhi	r2,9
   83a6c:	10b00604 	addi	r2,r2,-16360
}
   83a70:	e037883a 	mov	sp,fp
   83a74:	dfc00117 	ldw	ra,4(sp)
   83a78:	df000017 	ldw	fp,0(sp)
   83a7c:	dec00204 	addi	sp,sp,8
   83a80:	f800283a 	ret

00083a84 <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
   83a84:	defffc04 	addi	sp,sp,-16
   83a88:	df000315 	stw	fp,12(sp)
   83a8c:	df000304 	addi	fp,sp,12
   83a90:	e13ffe15 	stw	r4,-8(fp)
   83a94:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   83a98:	e0bffe17 	ldw	r2,-8(fp)
   83a9c:	10800317 	ldw	r2,12(r2)
   83aa0:	10800037 	ldwio	r2,0(r2)
   83aa4:	1080040c 	andi	r2,r2,16
   83aa8:	10000226 	beq	r2,zero,83ab4 <alt_avalon_sgdma_do_async_transfer+0x30>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
   83aac:	00bffc04 	movi	r2,-16
   83ab0:	00003906 	br	83b98 <alt_avalon_sgdma_do_async_transfer+0x114>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   83ab4:	e0bffe17 	ldw	r2,-8(fp)
   83ab8:	10800317 	ldw	r2,12(r2)
   83abc:	10800404 	addi	r2,r2,16
   83ac0:	e0fffe17 	ldw	r3,-8(fp)
   83ac4:	18c00317 	ldw	r3,12(r3)
   83ac8:	18c00404 	addi	r3,r3,16
   83acc:	19000037 	ldwio	r4,0(r3)
   83ad0:	00fff7c4 	movi	r3,-33
   83ad4:	20c6703a 	and	r3,r4,r3
   83ad8:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   83adc:	e0bffe17 	ldw	r2,-8(fp)
   83ae0:	10800317 	ldw	r2,12(r2)
   83ae4:	00c03fc4 	movi	r3,255
   83ae8:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
   83aec:	e0bffe17 	ldw	r2,-8(fp)
   83af0:	10800317 	ldw	r2,12(r2)
   83af4:	10800804 	addi	r2,r2,32
   83af8:	e0ffff17 	ldw	r3,-4(fp)
   83afc:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
   83b00:	e0bffe17 	ldw	r2,-8(fp)
   83b04:	10800917 	ldw	r2,36(r2)
   83b08:	10001126 	beq	r2,zero,83b50 <alt_avalon_sgdma_do_async_transfer+0xcc>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   83b0c:	e0bffe17 	ldw	r2,-8(fp)
   83b10:	10800317 	ldw	r2,12(r2)
   83b14:	10800404 	addi	r2,r2,16
   83b18:	10800037 	ldwio	r2,0(r2)
   83b1c:	e0bffd15 	stw	r2,-12(fp)

    control |= (dev->chain_control                          |
   83b20:	e0bffe17 	ldw	r2,-8(fp)
   83b24:	10c00b17 	ldw	r3,44(r2)
   83b28:	e0bffd17 	ldw	r2,-12(fp)
   83b2c:	1884b03a 	or	r2,r3,r2
   83b30:	10801814 	ori	r2,r2,96
   83b34:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   83b38:	e0bffe17 	ldw	r2,-8(fp)
   83b3c:	10800317 	ldw	r2,12(r2)
   83b40:	10800404 	addi	r2,r2,16
   83b44:	e0fffd17 	ldw	r3,-12(fp)
   83b48:	10c00035 	stwio	r3,0(r2)
   83b4c:	00001106 	br	83b94 <alt_avalon_sgdma_do_async_transfer+0x110>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   83b50:	e0bffe17 	ldw	r2,-8(fp)
   83b54:	10800317 	ldw	r2,12(r2)
   83b58:	10800404 	addi	r2,r2,16
   83b5c:	10800037 	ldwio	r2,0(r2)
   83b60:	e0bffd15 	stw	r2,-12(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
   83b64:	e0bffd17 	ldw	r2,-12(fp)
   83b68:	10801814 	ori	r2,r2,96
   83b6c:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
   83b70:	e0fffd17 	ldw	r3,-12(fp)
   83b74:	00bffbc4 	movi	r2,-17
   83b78:	1884703a 	and	r2,r3,r2
   83b7c:	e0bffd15 	stw	r2,-12(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   83b80:	e0bffe17 	ldw	r2,-8(fp)
   83b84:	10800317 	ldw	r2,12(r2)
   83b88:	10800404 	addi	r2,r2,16
   83b8c:	e0fffd17 	ldw	r3,-12(fp)
   83b90:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
   83b94:	0005883a 	mov	r2,zero
}
   83b98:	e037883a 	mov	sp,fp
   83b9c:	df000017 	ldw	fp,0(sp)
   83ba0:	dec00104 	addi	sp,sp,4
   83ba4:	f800283a 	ret

00083ba8 <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
   83ba8:	defffc04 	addi	sp,sp,-16
   83bac:	df000315 	stw	fp,12(sp)
   83bb0:	df000304 	addi	fp,sp,12
   83bb4:	e13ffe15 	stw	r4,-8(fp)
   83bb8:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   83bbc:	0001883a 	nop
   83bc0:	e0bffe17 	ldw	r2,-8(fp)
   83bc4:	10800317 	ldw	r2,12(r2)
   83bc8:	10800037 	ldwio	r2,0(r2)
   83bcc:	1080040c 	andi	r2,r2,16
   83bd0:	103ffb1e 	bne	r2,zero,83bc0 <rx_descriptor_end+0xfff83b60>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   83bd4:	e0bffe17 	ldw	r2,-8(fp)
   83bd8:	10800317 	ldw	r2,12(r2)
   83bdc:	10800404 	addi	r2,r2,16
   83be0:	e0fffe17 	ldw	r3,-8(fp)
   83be4:	18c00317 	ldw	r3,12(r3)
   83be8:	18c00404 	addi	r3,r3,16
   83bec:	19000037 	ldwio	r4,0(r3)
   83bf0:	00fff7c4 	movi	r3,-33
   83bf4:	20c6703a 	and	r3,r4,r3
   83bf8:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   83bfc:	e0bffe17 	ldw	r2,-8(fp)
   83c00:	10800317 	ldw	r2,12(r2)
   83c04:	00c03fc4 	movi	r3,255
   83c08:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
   83c0c:	e0bffe17 	ldw	r2,-8(fp)
   83c10:	10800317 	ldw	r2,12(r2)
   83c14:	10800804 	addi	r2,r2,32
   83c18:	e0ffff17 	ldw	r3,-4(fp)
   83c1c:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   83c20:	e0bffe17 	ldw	r2,-8(fp)
   83c24:	10800317 	ldw	r2,12(r2)
   83c28:	10800404 	addi	r2,r2,16
   83c2c:	e0fffe17 	ldw	r3,-8(fp)
   83c30:	18c00317 	ldw	r3,12(r3)
   83c34:	18c00404 	addi	r3,r3,16
   83c38:	18c00037 	ldwio	r3,0(r3)
   83c3c:	18c01814 	ori	r3,r3,96
   83c40:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   83c44:	0001883a 	nop
   83c48:	e0bffe17 	ldw	r2,-8(fp)
   83c4c:	10800317 	ldw	r2,12(r2)
   83c50:	10800037 	ldwio	r2,0(r2)
   83c54:	1080040c 	andi	r2,r2,16
   83c58:	103ffb1e 	bne	r2,zero,83c48 <rx_descriptor_end+0xfff83be8>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
   83c5c:	e0bffe17 	ldw	r2,-8(fp)
   83c60:	10800317 	ldw	r2,12(r2)
   83c64:	10800404 	addi	r2,r2,16
   83c68:	e0fffe17 	ldw	r3,-8(fp)
   83c6c:	18c00317 	ldw	r3,12(r3)
   83c70:	18c00404 	addi	r3,r3,16
   83c74:	19000037 	ldwio	r4,0(r3)
   83c78:	00fff7c4 	movi	r3,-33
   83c7c:	20c6703a 	and	r3,r4,r3
   83c80:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
   83c84:	e0bffe17 	ldw	r2,-8(fp)
   83c88:	10800317 	ldw	r2,12(r2)
   83c8c:	10800037 	ldwio	r2,0(r2)
   83c90:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   83c94:	e0bffe17 	ldw	r2,-8(fp)
   83c98:	10800317 	ldw	r2,12(r2)
   83c9c:	00c03fc4 	movi	r3,255
   83ca0:	10c00035 	stwio	r3,0(r2)

  return status;
   83ca4:	e0bffd03 	ldbu	r2,-12(fp)
}
   83ca8:	e037883a 	mov	sp,fp
   83cac:	df000017 	ldw	fp,0(sp)
   83cb0:	dec00104 	addi	sp,sp,4
   83cb4:	f800283a 	ret

00083cb8 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
   83cb8:	defff404 	addi	sp,sp,-48
   83cbc:	dfc00b15 	stw	ra,44(sp)
   83cc0:	df000a15 	stw	fp,40(sp)
   83cc4:	df000a04 	addi	fp,sp,40
   83cc8:	e13ffb15 	stw	r4,-20(fp)
   83ccc:	e17ffc15 	stw	r5,-16(fp)
   83cd0:	e1bffd15 	stw	r6,-12(fp)
   83cd4:	e1fffe15 	stw	r7,-8(fp)
   83cd8:	e0800217 	ldw	r2,8(fp)
   83cdc:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
   83ce0:	e0bfff0b 	ldhu	r2,-4(fp)
   83ce4:	d8800015 	stw	r2,0(sp)
   83ce8:	e0800317 	ldw	r2,12(fp)
   83cec:	d8800115 	stw	r2,4(sp)
   83cf0:	e0800417 	ldw	r2,16(fp)
   83cf4:	d8800215 	stw	r2,8(sp)
   83cf8:	d8000315 	stw	zero,12(sp)
   83cfc:	d8000415 	stw	zero,16(sp)
   83d00:	e13ffb17 	ldw	r4,-20(fp)
   83d04:	e17ffc17 	ldw	r5,-16(fp)
   83d08:	e1bffd17 	ldw	r6,-12(fp)
   83d0c:	e1fffe17 	ldw	r7,-8(fp)
   83d10:	0083d280 	call	83d28 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
   83d14:	e037883a 	mov	sp,fp
   83d18:	dfc00117 	ldw	ra,4(sp)
   83d1c:	df000017 	ldw	fp,0(sp)
   83d20:	dec00204 	addi	sp,sp,8
   83d24:	f800283a 	ret

00083d28 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
   83d28:	defff204 	addi	sp,sp,-56
   83d2c:	dfc00d15 	stw	ra,52(sp)
   83d30:	df000c15 	stw	fp,48(sp)
   83d34:	df000c04 	addi	fp,sp,48
   83d38:	e13ffb15 	stw	r4,-20(fp)
   83d3c:	e17ffc15 	stw	r5,-16(fp)
   83d40:	e1bffd15 	stw	r6,-12(fp)
   83d44:	e1fffe15 	stw	r7,-8(fp)
   83d48:	e0800217 	ldw	r2,8(fp)
   83d4c:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
   83d50:	e0bfff0b 	ldhu	r2,-4(fp)
   83d54:	d8800015 	stw	r2,0(sp)
   83d58:	d8000115 	stw	zero,4(sp)
   83d5c:	e0800317 	ldw	r2,12(fp)
   83d60:	d8800215 	stw	r2,8(sp)
   83d64:	e0800417 	ldw	r2,16(fp)
   83d68:	d8800315 	stw	r2,12(sp)
   83d6c:	e0800517 	ldw	r2,20(fp)
   83d70:	d8800415 	stw	r2,16(sp)
   83d74:	e0800617 	ldw	r2,24(fp)
   83d78:	d8800515 	stw	r2,20(sp)
   83d7c:	d8000615 	stw	zero,24(sp)
   83d80:	e13ffb17 	ldw	r4,-20(fp)
   83d84:	e17ffc17 	ldw	r5,-16(fp)
   83d88:	e1bffd17 	ldw	r6,-12(fp)
   83d8c:	e1fffe17 	ldw	r7,-8(fp)
   83d90:	00842940 	call	84294 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
   83d94:	e037883a 	mov	sp,fp
   83d98:	dfc00117 	ldw	ra,4(sp)
   83d9c:	df000017 	ldw	fp,0(sp)
   83da0:	dec00204 	addi	sp,sp,8
   83da4:	f800283a 	ret

00083da8 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
   83da8:	defff804 	addi	sp,sp,-32
   83dac:	dfc00715 	stw	ra,28(sp)
   83db0:	df000615 	stw	fp,24(sp)
   83db4:	df000604 	addi	fp,sp,24
   83db8:	e13ffc15 	stw	r4,-16(fp)
   83dbc:	e17ffd15 	stw	r5,-12(fp)
   83dc0:	e1bffe15 	stw	r6,-8(fp)
   83dc4:	3805883a 	mov	r2,r7
   83dc8:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
   83dcc:	e0ffff0b 	ldhu	r3,-4(fp)
   83dd0:	e0800217 	ldw	r2,8(fp)
   83dd4:	d8800015 	stw	r2,0(sp)
   83dd8:	d8000115 	stw	zero,4(sp)
   83ddc:	e13ffc17 	ldw	r4,-16(fp)
   83de0:	e17ffd17 	ldw	r5,-12(fp)
   83de4:	e1bffe17 	ldw	r6,-8(fp)
   83de8:	180f883a 	mov	r7,r3
   83dec:	0083e040 	call	83e04 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
   83df0:	e037883a 	mov	sp,fp
   83df4:	dfc00117 	ldw	ra,4(sp)
   83df8:	df000017 	ldw	fp,0(sp)
   83dfc:	dec00204 	addi	sp,sp,8
   83e00:	f800283a 	ret

00083e04 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
   83e04:	defff304 	addi	sp,sp,-52
   83e08:	dfc00c15 	stw	ra,48(sp)
   83e0c:	df000b15 	stw	fp,44(sp)
   83e10:	df000b04 	addi	fp,sp,44
   83e14:	e13ffc15 	stw	r4,-16(fp)
   83e18:	e17ffd15 	stw	r5,-12(fp)
   83e1c:	e1bffe15 	stw	r6,-8(fp)
   83e20:	3805883a 	mov	r2,r7
   83e24:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
   83e28:	e0bfff0b 	ldhu	r2,-4(fp)
   83e2c:	d8800015 	stw	r2,0(sp)
   83e30:	d8000115 	stw	zero,4(sp)
   83e34:	d8000215 	stw	zero,8(sp)
   83e38:	e0800217 	ldw	r2,8(fp)
   83e3c:	d8800315 	stw	r2,12(sp)
   83e40:	d8000415 	stw	zero,16(sp)
   83e44:	e0800317 	ldw	r2,12(fp)
   83e48:	d8800515 	stw	r2,20(sp)
   83e4c:	d8000615 	stw	zero,24(sp)
   83e50:	e13ffc17 	ldw	r4,-16(fp)
   83e54:	e17ffd17 	ldw	r5,-12(fp)
   83e58:	000d883a 	mov	r6,zero
   83e5c:	e1fffe17 	ldw	r7,-8(fp)
   83e60:	00842940 	call	84294 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
   83e64:	e037883a 	mov	sp,fp
   83e68:	dfc00117 	ldw	ra,4(sp)
   83e6c:	df000017 	ldw	fp,0(sp)
   83e70:	dec00204 	addi	sp,sp,8
   83e74:	f800283a 	ret

00083e78 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
   83e78:	defff404 	addi	sp,sp,-48
   83e7c:	dfc00b15 	stw	ra,44(sp)
   83e80:	df000a15 	stw	fp,40(sp)
   83e84:	df000a04 	addi	fp,sp,40
   83e88:	e13ffb15 	stw	r4,-20(fp)
   83e8c:	e17ffc15 	stw	r5,-16(fp)
   83e90:	e1bffd15 	stw	r6,-12(fp)
   83e94:	3807883a 	mov	r3,r7
   83e98:	e0800517 	ldw	r2,20(fp)
   83e9c:	e0fffe0d 	sth	r3,-8(fp)
   83ea0:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
   83ea4:	e1fffe0b 	ldhu	r7,-8(fp)
   83ea8:	e0bfff03 	ldbu	r2,-4(fp)
   83eac:	e0c00217 	ldw	r3,8(fp)
   83eb0:	d8c00015 	stw	r3,0(sp)
   83eb4:	e0c00317 	ldw	r3,12(fp)
   83eb8:	d8c00115 	stw	r3,4(sp)
   83ebc:	e0c00417 	ldw	r3,16(fp)
   83ec0:	d8c00215 	stw	r3,8(sp)
   83ec4:	d8000315 	stw	zero,12(sp)
   83ec8:	d8800415 	stw	r2,16(sp)
   83ecc:	e13ffb17 	ldw	r4,-20(fp)
   83ed0:	e17ffc17 	ldw	r5,-16(fp)
   83ed4:	e1bffd17 	ldw	r6,-12(fp)
   83ed8:	0083ef00 	call	83ef0 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
   83edc:	e037883a 	mov	sp,fp
   83ee0:	dfc00117 	ldw	ra,4(sp)
   83ee4:	df000017 	ldw	fp,0(sp)
   83ee8:	dec00204 	addi	sp,sp,8
   83eec:	f800283a 	ret

00083ef0 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
   83ef0:	defff204 	addi	sp,sp,-56
   83ef4:	dfc00d15 	stw	ra,52(sp)
   83ef8:	df000c15 	stw	fp,48(sp)
   83efc:	df000c04 	addi	fp,sp,48
   83f00:	e13ffb15 	stw	r4,-20(fp)
   83f04:	e17ffc15 	stw	r5,-16(fp)
   83f08:	e1bffd15 	stw	r6,-12(fp)
   83f0c:	3807883a 	mov	r3,r7
   83f10:	e0800617 	ldw	r2,24(fp)
   83f14:	e0fffe0d 	sth	r3,-8(fp)
   83f18:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
   83f1c:	e0fffe0b 	ldhu	r3,-8(fp)
   83f20:	e0bfff03 	ldbu	r2,-4(fp)
   83f24:	d8c00015 	stw	r3,0(sp)
   83f28:	e0c00417 	ldw	r3,16(fp)
   83f2c:	d8c00115 	stw	r3,4(sp)
   83f30:	e0c00217 	ldw	r3,8(fp)
   83f34:	d8c00215 	stw	r3,8(sp)
   83f38:	e0c00317 	ldw	r3,12(fp)
   83f3c:	d8c00315 	stw	r3,12(sp)
   83f40:	e0c00517 	ldw	r3,20(fp)
   83f44:	d8c00415 	stw	r3,16(sp)
   83f48:	d8000515 	stw	zero,20(sp)
   83f4c:	d8800615 	stw	r2,24(sp)
   83f50:	e13ffb17 	ldw	r4,-20(fp)
   83f54:	e17ffc17 	ldw	r5,-16(fp)
   83f58:	e1bffd17 	ldw	r6,-12(fp)
   83f5c:	000f883a 	mov	r7,zero
   83f60:	00842940 	call	84294 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
   83f64:	e037883a 	mov	sp,fp
   83f68:	dfc00117 	ldw	ra,4(sp)
   83f6c:	df000017 	ldw	fp,0(sp)
   83f70:	dec00204 	addi	sp,sp,8
   83f74:	f800283a 	ret

00083f78 <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
   83f78:	defffb04 	addi	sp,sp,-20
   83f7c:	df000415 	stw	fp,16(sp)
   83f80:	df000404 	addi	fp,sp,16
   83f84:	e13ffc15 	stw	r4,-16(fp)
   83f88:	e17ffd15 	stw	r5,-12(fp)
   83f8c:	e1bffe15 	stw	r6,-8(fp)
   83f90:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
   83f94:	e0bffc17 	ldw	r2,-16(fp)
   83f98:	e0fffd17 	ldw	r3,-12(fp)
   83f9c:	10c00915 	stw	r3,36(r2)
  dev->callback_context = context;
   83fa0:	e0bffc17 	ldw	r2,-16(fp)
   83fa4:	e0ffff17 	ldw	r3,-4(fp)
   83fa8:	10c00a15 	stw	r3,40(r2)
  dev->chain_control    = chain_control;
   83fac:	e0bffc17 	ldw	r2,-16(fp)
   83fb0:	e0fffe17 	ldw	r3,-8(fp)
   83fb4:	10c00b15 	stw	r3,44(r2)
}
   83fb8:	e037883a 	mov	sp,fp
   83fbc:	df000017 	ldw	fp,0(sp)
   83fc0:	dec00104 	addi	sp,sp,4
   83fc4:	f800283a 	ret

00083fc8 <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
   83fc8:	defffd04 	addi	sp,sp,-12
   83fcc:	df000215 	stw	fp,8(sp)
   83fd0:	df000204 	addi	fp,sp,8
   83fd4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   83fd8:	e0bfff17 	ldw	r2,-4(fp)
   83fdc:	10800317 	ldw	r2,12(r2)
   83fe0:	10800404 	addi	r2,r2,16
   83fe4:	10800037 	ldwio	r2,0(r2)
   83fe8:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
   83fec:	e0bffe17 	ldw	r2,-8(fp)
   83ff0:	10800814 	ori	r2,r2,32
   83ff4:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   83ff8:	e0bfff17 	ldw	r2,-4(fp)
   83ffc:	10800317 	ldw	r2,12(r2)
   84000:	10800404 	addi	r2,r2,16
   84004:	e0fffe17 	ldw	r3,-8(fp)
   84008:	10c00035 	stwio	r3,0(r2)
}
   8400c:	e037883a 	mov	sp,fp
   84010:	df000017 	ldw	fp,0(sp)
   84014:	dec00104 	addi	sp,sp,4
   84018:	f800283a 	ret

0008401c <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
   8401c:	defffd04 	addi	sp,sp,-12
   84020:	df000215 	stw	fp,8(sp)
   84024:	df000204 	addi	fp,sp,8
   84028:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   8402c:	e0bfff17 	ldw	r2,-4(fp)
   84030:	10800317 	ldw	r2,12(r2)
   84034:	10800404 	addi	r2,r2,16
   84038:	10800037 	ldwio	r2,0(r2)
   8403c:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
   84040:	e0fffe17 	ldw	r3,-8(fp)
   84044:	00bff7c4 	movi	r2,-33
   84048:	1884703a 	and	r2,r3,r2
   8404c:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   84050:	e0bfff17 	ldw	r2,-4(fp)
   84054:	10800317 	ldw	r2,12(r2)
   84058:	10800404 	addi	r2,r2,16
   8405c:	e0fffe17 	ldw	r3,-8(fp)
   84060:	10c00035 	stwio	r3,0(r2)
}
   84064:	e037883a 	mov	sp,fp
   84068:	df000017 	ldw	fp,0(sp)
   8406c:	dec00104 	addi	sp,sp,4
   84070:	f800283a 	ret

00084074 <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
   84074:	defffe04 	addi	sp,sp,-8
   84078:	df000115 	stw	fp,4(sp)
   8407c:	df000104 	addi	fp,sp,4
   84080:	e13fff15 	stw	r4,-4(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
   84084:	e0bfff17 	ldw	r2,-4(fp)
   84088:	10800784 	addi	r2,r2,30
   8408c:	10800023 	ldbuio	r2,0(r2)
   84090:	10803fcc 	andi	r2,r2,255
   84094:	10801fcc 	andi	r2,r2,127
   84098:	10000226 	beq	r2,zero,840a4 <alt_avalon_sgdma_check_descriptor_status+0x30>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
   8409c:	00bffec4 	movi	r2,-5
   840a0:	00000906 	br	840c8 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
   840a4:	e0bfff17 	ldw	r2,-4(fp)
   840a8:	108007c4 	addi	r2,r2,31
   840ac:	10800023 	ldbuio	r2,0(r2)
   840b0:	10803fcc 	andi	r2,r2,255
   840b4:	1080200c 	andi	r2,r2,128
   840b8:	10000226 	beq	r2,zero,840c4 <alt_avalon_sgdma_check_descriptor_status+0x50>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
   840bc:	00bfe244 	movi	r2,-119
   840c0:	00000106 	br	840c8 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

    return 0;
   840c4:	0005883a 	mov	r2,zero
}
   840c8:	e037883a 	mov	sp,fp
   840cc:	df000017 	ldw	fp,0(sp)
   840d0:	dec00104 	addi	sp,sp,4
   840d4:	f800283a 	ret

000840d8 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
   840d8:	defffc04 	addi	sp,sp,-16
   840dc:	dfc00315 	stw	ra,12(sp)
   840e0:	df000215 	stw	fp,8(sp)
   840e4:	df000204 	addi	fp,sp,8
   840e8:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
   840ec:	e13fff17 	ldw	r4,-4(fp)
   840f0:	d1600004 	addi	r5,gp,-32768
   840f4:	0084d4c0 	call	84d4c <alt_find_dev>
   840f8:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev) {
   840fc:	e0bffe17 	ldw	r2,-8(fp)
   84100:	1000041e 	bne	r2,zero,84114 <alt_avalon_sgdma_open+0x3c>
    ALT_ERRNO = ENODEV;
   84104:	0083a340 	call	83a34 <alt_get_errno>
   84108:	1007883a 	mov	r3,r2
   8410c:	008004c4 	movi	r2,19
   84110:	18800015 	stw	r2,0(r3)
  }

  return dev;
   84114:	e0bffe17 	ldw	r2,-8(fp)
}
   84118:	e037883a 	mov	sp,fp
   8411c:	dfc00117 	ldw	ra,4(sp)
   84120:	df000017 	ldw	fp,0(sp)
   84124:	dec00204 	addi	sp,sp,8
   84128:	f800283a 	ret

0008412c <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
   8412c:	defff104 	addi	sp,sp,-60
   84130:	dfc00e15 	stw	ra,56(sp)
   84134:	df000d15 	stw	fp,52(sp)
   84138:	df000d04 	addi	fp,sp,52
   8413c:	e13ffa15 	stw	r4,-24(fp)
   84140:	e17ffb15 	stw	r5,-20(fp)
   84144:	e1bffc15 	stw	r6,-16(fp)
   84148:	e1fffd15 	stw	r7,-12(fp)
   8414c:	e0c00217 	ldw	r3,8(fp)
   84150:	e0800617 	ldw	r2,24(fp)
   84154:	e0fffe0d 	sth	r3,-8(fp)
   84158:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
   8415c:	e0fffe0b 	ldhu	r3,-8(fp)
   84160:	e0bfff03 	ldbu	r2,-4(fp)
   84164:	d8c00015 	stw	r3,0(sp)
   84168:	e0c00317 	ldw	r3,12(fp)
   8416c:	d8c00115 	stw	r3,4(sp)
   84170:	e0c00417 	ldw	r3,16(fp)
   84174:	d8c00215 	stw	r3,8(sp)
   84178:	e0c00517 	ldw	r3,20(fp)
   8417c:	d8c00315 	stw	r3,12(sp)
   84180:	d8000415 	stw	zero,16(sp)
   84184:	d8000515 	stw	zero,20(sp)
   84188:	d8800615 	stw	r2,24(sp)
   8418c:	e13ffa17 	ldw	r4,-24(fp)
   84190:	e17ffb17 	ldw	r5,-20(fp)
   84194:	e1bffc17 	ldw	r6,-16(fp)
   84198:	e1fffd17 	ldw	r7,-12(fp)
   8419c:	00842940 	call	84294 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
   841a0:	e037883a 	mov	sp,fp
   841a4:	dfc00117 	ldw	ra,4(sp)
   841a8:	df000017 	ldw	fp,0(sp)
   841ac:	dec00204 	addi	sp,sp,8
   841b0:	f800283a 	ret

000841b4 <alt_avalon_sgdma_enable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
   841b4:	defffc04 	addi	sp,sp,-16
   841b8:	df000315 	stw	fp,12(sp)
   841bc:	df000304 	addi	fp,sp,12
   841c0:	e13ffe15 	stw	r4,-8(fp)
   841c4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   841c8:	e0bffe17 	ldw	r2,-8(fp)
   841cc:	10800317 	ldw	r2,12(r2)
   841d0:	10800404 	addi	r2,r2,16
   841d4:	10800037 	ldwio	r2,0(r2)
   841d8:	e0bffd15 	stw	r2,-12(fp)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
   841dc:	e0fffd17 	ldw	r3,-12(fp)
   841e0:	00a00434 	movhi	r2,32784
   841e4:	10bfffc4 	addi	r2,r2,-1
   841e8:	1884703a 	and	r2,r3,r2
   841ec:	e0bffd15 	stw	r2,-12(fp)
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
   841f0:	e0bfff17 	ldw	r2,-4(fp)
   841f4:	1004953a 	slli	r2,r2,20
   841f8:	10dffc2c 	andhi	r3,r2,32752

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
   841fc:	e0bffd17 	ldw	r2,-12(fp)
   84200:	1884b03a 	or	r2,r3,r2
   84204:	10800134 	orhi	r2,r2,4
   84208:	e0bffd15 	stw	r2,-12(fp)
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   8420c:	e0bffe17 	ldw	r2,-8(fp)
   84210:	10800317 	ldw	r2,12(r2)
   84214:	10800404 	addi	r2,r2,16
   84218:	e0fffd17 	ldw	r3,-12(fp)
   8421c:	10c00035 	stwio	r3,0(r2)
  
  return;
   84220:	0001883a 	nop
}
   84224:	e037883a 	mov	sp,fp
   84228:	df000017 	ldw	fp,0(sp)
   8422c:	dec00104 	addi	sp,sp,4
   84230:	f800283a 	ret

00084234 <alt_avalon_sgdma_disable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
   84234:	defffd04 	addi	sp,sp,-12
   84238:	df000215 	stw	fp,8(sp)
   8423c:	df000204 	addi	fp,sp,8
   84240:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   84244:	e0bfff17 	ldw	r2,-4(fp)
   84248:	10800317 	ldw	r2,12(r2)
   8424c:	10800404 	addi	r2,r2,16
   84250:	10800037 	ldwio	r2,0(r2)
   84254:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
   84258:	e0fffe17 	ldw	r3,-8(fp)
   8425c:	00bfff34 	movhi	r2,65532
   84260:	10bfffc4 	addi	r2,r2,-1
   84264:	1884703a 	and	r2,r3,r2
   84268:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   8426c:	e0bfff17 	ldw	r2,-4(fp)
   84270:	10800317 	ldw	r2,12(r2)
   84274:	10800404 	addi	r2,r2,16
   84278:	e0fffe17 	ldw	r3,-8(fp)
   8427c:	10c00035 	stwio	r3,0(r2)
  
  return;
   84280:	0001883a 	nop
}
   84284:	e037883a 	mov	sp,fp
   84288:	df000017 	ldw	fp,0(sp)
   8428c:	dec00104 	addi	sp,sp,4
   84290:	f800283a 	ret

00084294 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
   84294:	defff804 	addi	sp,sp,-32
   84298:	dfc00715 	stw	ra,28(sp)
   8429c:	df000615 	stw	fp,24(sp)
   842a0:	df000604 	addi	fp,sp,24
   842a4:	e13ffa15 	stw	r4,-24(fp)
   842a8:	e17ffb15 	stw	r5,-20(fp)
   842ac:	e1bffc15 	stw	r6,-16(fp)
   842b0:	e1fffd15 	stw	r7,-12(fp)
   842b4:	e0c00217 	ldw	r3,8(fp)
   842b8:	e0800817 	ldw	r2,32(fp)
   842bc:	e0fffe0d 	sth	r3,-8(fp)
   842c0:	e0bfff05 	stb	r2,-4(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
   842c4:	e0bffb17 	ldw	r2,-20(fp)
   842c8:	108007c4 	addi	r2,r2,31
   842cc:	e0fffb17 	ldw	r3,-20(fp)
   842d0:	18c007c3 	ldbu	r3,31(r3)
   842d4:	19003fcc 	andi	r4,r3,255
   842d8:	00ffdfc4 	movi	r3,-129
   842dc:	20c6703a 	and	r3,r4,r3
   842e0:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
   842e4:	e0bffa17 	ldw	r2,-24(fp)
   842e8:	e0fffc17 	ldw	r3,-16(fp)
   842ec:	19403fcc 	andi	r5,r3,255
   842f0:	10c00003 	ldbu	r3,0(r2)
   842f4:	1806703a 	and	r3,r3,zero
   842f8:	1809883a 	mov	r4,r3
   842fc:	2807883a 	mov	r3,r5
   84300:	20c6b03a 	or	r3,r4,r3
   84304:	10c00005 	stb	r3,0(r2)
   84308:	e0fffc17 	ldw	r3,-16(fp)
   8430c:	1806d23a 	srli	r3,r3,8
   84310:	19403fcc 	andi	r5,r3,255
   84314:	10c00043 	ldbu	r3,1(r2)
   84318:	1806703a 	and	r3,r3,zero
   8431c:	1809883a 	mov	r4,r3
   84320:	2807883a 	mov	r3,r5
   84324:	20c6b03a 	or	r3,r4,r3
   84328:	10c00045 	stb	r3,1(r2)
   8432c:	e0fffc17 	ldw	r3,-16(fp)
   84330:	1806d43a 	srli	r3,r3,16
   84334:	19403fcc 	andi	r5,r3,255
   84338:	10c00083 	ldbu	r3,2(r2)
   8433c:	1806703a 	and	r3,r3,zero
   84340:	1809883a 	mov	r4,r3
   84344:	2807883a 	mov	r3,r5
   84348:	20c6b03a 	or	r3,r4,r3
   8434c:	10c00085 	stb	r3,2(r2)
   84350:	e0fffc17 	ldw	r3,-16(fp)
   84354:	180ad63a 	srli	r5,r3,24
   84358:	10c000c3 	ldbu	r3,3(r2)
   8435c:	1806703a 	and	r3,r3,zero
   84360:	1809883a 	mov	r4,r3
   84364:	2807883a 	mov	r3,r5
   84368:	20c6b03a 	or	r3,r4,r3
   8436c:	10c000c5 	stb	r3,3(r2)
  desc->write_addr               = write_addr;
   84370:	e0bffa17 	ldw	r2,-24(fp)
   84374:	e0fffd17 	ldw	r3,-12(fp)
   84378:	19403fcc 	andi	r5,r3,255
   8437c:	10c00203 	ldbu	r3,8(r2)
   84380:	1806703a 	and	r3,r3,zero
   84384:	1809883a 	mov	r4,r3
   84388:	2807883a 	mov	r3,r5
   8438c:	20c6b03a 	or	r3,r4,r3
   84390:	10c00205 	stb	r3,8(r2)
   84394:	e0fffd17 	ldw	r3,-12(fp)
   84398:	1806d23a 	srli	r3,r3,8
   8439c:	19403fcc 	andi	r5,r3,255
   843a0:	10c00243 	ldbu	r3,9(r2)
   843a4:	1806703a 	and	r3,r3,zero
   843a8:	1809883a 	mov	r4,r3
   843ac:	2807883a 	mov	r3,r5
   843b0:	20c6b03a 	or	r3,r4,r3
   843b4:	10c00245 	stb	r3,9(r2)
   843b8:	e0fffd17 	ldw	r3,-12(fp)
   843bc:	1806d43a 	srli	r3,r3,16
   843c0:	19403fcc 	andi	r5,r3,255
   843c4:	10c00283 	ldbu	r3,10(r2)
   843c8:	1806703a 	and	r3,r3,zero
   843cc:	1809883a 	mov	r4,r3
   843d0:	2807883a 	mov	r3,r5
   843d4:	20c6b03a 	or	r3,r4,r3
   843d8:	10c00285 	stb	r3,10(r2)
   843dc:	e0fffd17 	ldw	r3,-12(fp)
   843e0:	180ad63a 	srli	r5,r3,24
   843e4:	10c002c3 	ldbu	r3,11(r2)
   843e8:	1806703a 	and	r3,r3,zero
   843ec:	1809883a 	mov	r4,r3
   843f0:	2807883a 	mov	r3,r5
   843f4:	20c6b03a 	or	r3,r4,r3
   843f8:	10c002c5 	stb	r3,11(r2)
  desc->next                     = (alt_u32 *) next;
   843fc:	e0bffa17 	ldw	r2,-24(fp)
   84400:	e0fffb17 	ldw	r3,-20(fp)
   84404:	19403fcc 	andi	r5,r3,255
   84408:	10c00403 	ldbu	r3,16(r2)
   8440c:	1806703a 	and	r3,r3,zero
   84410:	1809883a 	mov	r4,r3
   84414:	2807883a 	mov	r3,r5
   84418:	20c6b03a 	or	r3,r4,r3
   8441c:	10c00405 	stb	r3,16(r2)
   84420:	e0fffb17 	ldw	r3,-20(fp)
   84424:	1806d23a 	srli	r3,r3,8
   84428:	19403fcc 	andi	r5,r3,255
   8442c:	10c00443 	ldbu	r3,17(r2)
   84430:	1806703a 	and	r3,r3,zero
   84434:	1809883a 	mov	r4,r3
   84438:	2807883a 	mov	r3,r5
   8443c:	20c6b03a 	or	r3,r4,r3
   84440:	10c00445 	stb	r3,17(r2)
   84444:	e0fffb17 	ldw	r3,-20(fp)
   84448:	1806d43a 	srli	r3,r3,16
   8444c:	19403fcc 	andi	r5,r3,255
   84450:	10c00483 	ldbu	r3,18(r2)
   84454:	1806703a 	and	r3,r3,zero
   84458:	1809883a 	mov	r4,r3
   8445c:	2807883a 	mov	r3,r5
   84460:	20c6b03a 	or	r3,r4,r3
   84464:	10c00485 	stb	r3,18(r2)
   84468:	e0fffb17 	ldw	r3,-20(fp)
   8446c:	180ad63a 	srli	r5,r3,24
   84470:	10c004c3 	ldbu	r3,19(r2)
   84474:	1806703a 	and	r3,r3,zero
   84478:	1809883a 	mov	r4,r3
   8447c:	2807883a 	mov	r3,r5
   84480:	20c6b03a 	or	r3,r4,r3
   84484:	10c004c5 	stb	r3,19(r2)
  desc->read_addr_pad            = 0x0;
   84488:	e0bffa17 	ldw	r2,-24(fp)
   8448c:	10c00103 	ldbu	r3,4(r2)
   84490:	1806703a 	and	r3,r3,zero
   84494:	10c00105 	stb	r3,4(r2)
   84498:	10c00143 	ldbu	r3,5(r2)
   8449c:	1806703a 	and	r3,r3,zero
   844a0:	10c00145 	stb	r3,5(r2)
   844a4:	10c00183 	ldbu	r3,6(r2)
   844a8:	1806703a 	and	r3,r3,zero
   844ac:	10c00185 	stb	r3,6(r2)
   844b0:	10c001c3 	ldbu	r3,7(r2)
   844b4:	1806703a 	and	r3,r3,zero
   844b8:	10c001c5 	stb	r3,7(r2)
  desc->write_addr_pad           = 0x0;
   844bc:	e0bffa17 	ldw	r2,-24(fp)
   844c0:	10c00303 	ldbu	r3,12(r2)
   844c4:	1806703a 	and	r3,r3,zero
   844c8:	10c00305 	stb	r3,12(r2)
   844cc:	10c00343 	ldbu	r3,13(r2)
   844d0:	1806703a 	and	r3,r3,zero
   844d4:	10c00345 	stb	r3,13(r2)
   844d8:	10c00383 	ldbu	r3,14(r2)
   844dc:	1806703a 	and	r3,r3,zero
   844e0:	10c00385 	stb	r3,14(r2)
   844e4:	10c003c3 	ldbu	r3,15(r2)
   844e8:	1806703a 	and	r3,r3,zero
   844ec:	10c003c5 	stb	r3,15(r2)
  desc->next_pad                 = 0x0;
   844f0:	e0bffa17 	ldw	r2,-24(fp)
   844f4:	10c00503 	ldbu	r3,20(r2)
   844f8:	1806703a 	and	r3,r3,zero
   844fc:	10c00505 	stb	r3,20(r2)
   84500:	10c00543 	ldbu	r3,21(r2)
   84504:	1806703a 	and	r3,r3,zero
   84508:	10c00545 	stb	r3,21(r2)
   8450c:	10c00583 	ldbu	r3,22(r2)
   84510:	1806703a 	and	r3,r3,zero
   84514:	10c00585 	stb	r3,22(r2)
   84518:	10c005c3 	ldbu	r3,23(r2)
   8451c:	1806703a 	and	r3,r3,zero
   84520:	10c005c5 	stb	r3,23(r2)
  desc->bytes_to_transfer        = length_or_eop;
   84524:	e0bffa17 	ldw	r2,-24(fp)
   84528:	e0fffe17 	ldw	r3,-8(fp)
   8452c:	19403fcc 	andi	r5,r3,255
   84530:	10c00603 	ldbu	r3,24(r2)
   84534:	1806703a 	and	r3,r3,zero
   84538:	1809883a 	mov	r4,r3
   8453c:	2807883a 	mov	r3,r5
   84540:	20c6b03a 	or	r3,r4,r3
   84544:	10c00605 	stb	r3,24(r2)
   84548:	e0fffe17 	ldw	r3,-8(fp)
   8454c:	1806d23a 	srli	r3,r3,8
   84550:	19403fcc 	andi	r5,r3,255
   84554:	10c00643 	ldbu	r3,25(r2)
   84558:	1806703a 	and	r3,r3,zero
   8455c:	1809883a 	mov	r4,r3
   84560:	2807883a 	mov	r3,r5
   84564:	20c6b03a 	or	r3,r4,r3
   84568:	10c00645 	stb	r3,25(r2)
  desc->actual_bytes_transferred = 0;
   8456c:	e0bffa17 	ldw	r2,-24(fp)
   84570:	10c00703 	ldbu	r3,28(r2)
   84574:	1806703a 	and	r3,r3,zero
   84578:	10c00705 	stb	r3,28(r2)
   8457c:	10c00743 	ldbu	r3,29(r2)
   84580:	1806703a 	and	r3,r3,zero
   84584:	10c00745 	stb	r3,29(r2)
  desc->status                   = 0x0;
   84588:	e0bffa17 	ldw	r2,-24(fp)
   8458c:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
   84590:	e0800617 	ldw	r2,24(fp)
   84594:	1007883a 	mov	r3,r2
   84598:	e0bffa17 	ldw	r2,-24(fp)
   8459c:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
   845a0:	e0800717 	ldw	r2,28(fp)
   845a4:	1007883a 	mov	r3,r2
   845a8:	e0bffa17 	ldw	r2,-24(fp)
   845ac:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
   845b0:	e0800317 	ldw	r2,12(fp)
   845b4:	10000226 	beq	r2,zero,845c0 <alt_avalon_sgdma_construct_descriptor_burst+0x32c>
   845b8:	00bfe044 	movi	r2,-127
   845bc:	00000106 	br	845c4 <alt_avalon_sgdma_construct_descriptor_burst+0x330>
   845c0:	00bfe004 	movi	r2,-128
   845c4:	e0c00417 	ldw	r3,16(fp)
   845c8:	18000226 	beq	r3,zero,845d4 <alt_avalon_sgdma_construct_descriptor_burst+0x340>
   845cc:	00c00084 	movi	r3,2
   845d0:	00000106 	br	845d8 <alt_avalon_sgdma_construct_descriptor_burst+0x344>
   845d4:	0007883a 	mov	r3,zero
   845d8:	10c4b03a 	or	r2,r2,r3
   845dc:	1007883a 	mov	r3,r2
   845e0:	e0800517 	ldw	r2,20(fp)
   845e4:	10000226 	beq	r2,zero,845f0 <alt_avalon_sgdma_construct_descriptor_burst+0x35c>
   845e8:	00800104 	movi	r2,4
   845ec:	00000106 	br	845f4 <alt_avalon_sgdma_construct_descriptor_burst+0x360>
   845f0:	0005883a 	mov	r2,zero
   845f4:	1884b03a 	or	r2,r3,r2
   845f8:	1007883a 	mov	r3,r2
   845fc:	e0bfff03 	ldbu	r2,-4(fp)
   84600:	10000426 	beq	r2,zero,84614 <alt_avalon_sgdma_construct_descriptor_burst+0x380>
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MSK : 0x0)        |
    (read_fixed ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_READ_FIXED_ADDRESS_MSK : 0x0)  |
    (write_fixed_or_sop ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_WRITE_FIXED_ADDRESS_MSK : 0x0) |
    (atlantic_channel ? ( (atlantic_channel & 0x0F) << 3) : 0)
   84604:	e0bfff03 	ldbu	r2,-4(fp)
   84608:	108003cc 	andi	r2,r2,15
   8460c:	100490fa 	slli	r2,r2,3
   84610:	00000106 	br	84618 <alt_avalon_sgdma_construct_descriptor_burst+0x384>
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
   84614:	0005883a 	mov	r2,zero
   84618:	1884b03a 	or	r2,r3,r2
   8461c:	1007883a 	mov	r3,r2
   84620:	e0bffa17 	ldw	r2,-24(fp)
   84624:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
   84628:	e13ffa17 	ldw	r4,-24(fp)
   8462c:	01400804 	movi	r5,32
   84630:	0084b000 	call	84b00 <alt_dcache_flush>
}
   84634:	e037883a 	mov	sp,fp
   84638:	dfc00117 	ldw	ra,4(sp)
   8463c:	df000017 	ldw	fp,0(sp)
   84640:	dec00204 	addi	sp,sp,8
   84644:	f800283a 	ret

00084648 <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
   84648:	defff904 	addi	sp,sp,-28
   8464c:	dfc00615 	stw	ra,24(sp)
   84650:	df000515 	stw	fp,20(sp)
   84654:	df000504 	addi	fp,sp,20
   84658:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
   8465c:	e0bfff17 	ldw	r2,-4(fp)
   84660:	e0bffb15 	stw	r2,-20(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
   84664:	e0bffb17 	ldw	r2,-20(fp)
   84668:	10800317 	ldw	r2,12(r2)
   8466c:	10800404 	addi	r2,r2,16
   84670:	e0fffb17 	ldw	r3,-20(fp)
   84674:	18c00317 	ldw	r3,12(r3)
   84678:	18c00404 	addi	r3,r3,16
   8467c:	18c00037 	ldwio	r3,0(r3)
   84680:	18e00034 	orhi	r3,r3,32768
   84684:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   84688:	e0bffb17 	ldw	r2,-20(fp)
   8468c:	10800317 	ldw	r2,12(r2)
   84690:	10800404 	addi	r2,r2,16
   84694:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
   84698:	e0bffb17 	ldw	r2,-20(fp)
   8469c:	10800917 	ldw	r2,36(r2)
   846a0:	10001226 	beq	r2,zero,846ec <alt_avalon_sgdma_irq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   846a4:	0005303a 	rdctl	r2,status
   846a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   846ac:	e0fffd17 	ldw	r3,-12(fp)
   846b0:	00bfff84 	movi	r2,-2
   846b4:	1884703a 	and	r2,r3,r2
   846b8:	1001703a 	wrctl	status,r2
  
  return context;
   846bc:	e0bffd17 	ldw	r2,-12(fp)
    cpu_sr = alt_irq_disable_all();
   846c0:	e0bffc15 	stw	r2,-16(fp)
    (dev->callback)(dev->callback_context);
   846c4:	e0bffb17 	ldw	r2,-20(fp)
   846c8:	10800917 	ldw	r2,36(r2)
   846cc:	e0fffb17 	ldw	r3,-20(fp)
   846d0:	18c00a17 	ldw	r3,40(r3)
   846d4:	1809883a 	mov	r4,r3
   846d8:	103ee83a 	callr	r2
   846dc:	e0bffc17 	ldw	r2,-16(fp)
   846e0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   846e4:	e0bffe17 	ldw	r2,-8(fp)
   846e8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
   846ec:	e037883a 	mov	sp,fp
   846f0:	dfc00117 	ldw	ra,4(sp)
   846f4:	df000017 	ldw	fp,0(sp)
   846f8:	dec00204 	addi	sp,sp,8
   846fc:	f800283a 	ret

00084700 <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
   84700:	defffa04 	addi	sp,sp,-24
   84704:	dfc00515 	stw	ra,20(sp)
   84708:	df000415 	stw	fp,16(sp)
   8470c:	df000404 	addi	fp,sp,16
   84710:	e13ffd15 	stw	r4,-12(fp)
   84714:	e17ffe15 	stw	r5,-8(fp)
   84718:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   8471c:	e0bffd17 	ldw	r2,-12(fp)
   84720:	10800317 	ldw	r2,12(r2)
   84724:	10800404 	addi	r2,r2,16
   84728:	00c00074 	movhi	r3,1
   8472c:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   84730:	e0bffd17 	ldw	r2,-12(fp)
   84734:	10800317 	ldw	r2,12(r2)
   84738:	10800404 	addi	r2,r2,16
   8473c:	00c00074 	movhi	r3,1
   84740:	10c00035 	stwio	r3,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
   84744:	e0bffd17 	ldw	r2,-12(fp)
   84748:	10800317 	ldw	r2,12(r2)
   8474c:	10800404 	addi	r2,r2,16
   84750:	0007883a 	mov	r3,zero
   84754:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   84758:	e0bffd17 	ldw	r2,-12(fp)
   8475c:	10800317 	ldw	r2,12(r2)
   84760:	00c03fc4 	movi	r3,255
   84764:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
   84768:	e13ffd17 	ldw	r4,-12(fp)
   8476c:	d1600004 	addi	r5,gp,-32768
   84770:	0084bf00 	call	84bf0 <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
   84774:	d8000015 	stw	zero,0(sp)
   84778:	e13ffe17 	ldw	r4,-8(fp)
   8477c:	e17fff17 	ldw	r5,-4(fp)
   84780:	01800234 	movhi	r6,8
   84784:	31919204 	addi	r6,r6,17992
   84788:	e1fffd17 	ldw	r7,-12(fp)
   8478c:	0084e0c0 	call	84e0c <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
   84790:	e037883a 	mov	sp,fp
   84794:	dfc00117 	ldw	ra,4(sp)
   84798:	df000017 	ldw	fp,0(sp)
   8479c:	dec00204 	addi	sp,sp,8
   847a0:	f800283a 	ret

000847a4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   847a4:	defffa04 	addi	sp,sp,-24
   847a8:	dfc00515 	stw	ra,20(sp)
   847ac:	df000415 	stw	fp,16(sp)
   847b0:	df000404 	addi	fp,sp,16
   847b4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   847b8:	0007883a 	mov	r3,zero
   847bc:	e0bfff17 	ldw	r2,-4(fp)
   847c0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   847c4:	e0bfff17 	ldw	r2,-4(fp)
   847c8:	10800104 	addi	r2,r2,4
   847cc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   847d0:	0005303a 	rdctl	r2,status
   847d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   847d8:	e0fffd17 	ldw	r3,-12(fp)
   847dc:	00bfff84 	movi	r2,-2
   847e0:	1884703a 	and	r2,r3,r2
   847e4:	1001703a 	wrctl	status,r2
  
  return context;
   847e8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   847ec:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   847f0:	00855800 	call	85580 <alt_tick>
   847f4:	e0bffc17 	ldw	r2,-16(fp)
   847f8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   847fc:	e0bffe17 	ldw	r2,-8(fp)
   84800:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   84804:	e037883a 	mov	sp,fp
   84808:	dfc00117 	ldw	ra,4(sp)
   8480c:	df000017 	ldw	fp,0(sp)
   84810:	dec00204 	addi	sp,sp,8
   84814:	f800283a 	ret

00084818 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   84818:	defff804 	addi	sp,sp,-32
   8481c:	dfc00715 	stw	ra,28(sp)
   84820:	df000615 	stw	fp,24(sp)
   84824:	df000604 	addi	fp,sp,24
   84828:	e13ffc15 	stw	r4,-16(fp)
   8482c:	e17ffd15 	stw	r5,-12(fp)
   84830:	e1bffe15 	stw	r6,-8(fp)
   84834:	e1ffff15 	stw	r7,-4(fp)
   84838:	e0bfff17 	ldw	r2,-4(fp)
   8483c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   84840:	00800274 	movhi	r2,9
   84844:	10b00304 	addi	r2,r2,-16372
   84848:	10800017 	ldw	r2,0(r2)
   8484c:	1000041e 	bne	r2,zero,84860 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   84850:	00800274 	movhi	r2,9
   84854:	10b00304 	addi	r2,r2,-16372
   84858:	e0fffb17 	ldw	r3,-20(fp)
   8485c:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   84860:	e0bffc17 	ldw	r2,-16(fp)
   84864:	10800104 	addi	r2,r2,4
   84868:	00c001c4 	movi	r3,7
   8486c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   84870:	d8000015 	stw	zero,0(sp)
   84874:	e13ffd17 	ldw	r4,-12(fp)
   84878:	e17ffe17 	ldw	r5,-8(fp)
   8487c:	01800234 	movhi	r6,8
   84880:	3191e904 	addi	r6,r6,18340
   84884:	e1fffc17 	ldw	r7,-16(fp)
   84888:	0084e0c0 	call	84e0c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   8488c:	e037883a 	mov	sp,fp
   84890:	dfc00117 	ldw	ra,4(sp)
   84894:	df000017 	ldw	fp,0(sp)
   84898:	dec00204 	addi	sp,sp,8
   8489c:	f800283a 	ret

000848a0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   848a0:	defff504 	addi	sp,sp,-44
   848a4:	df000a15 	stw	fp,40(sp)
   848a8:	df000a04 	addi	fp,sp,40
   848ac:	e13ffc15 	stw	r4,-16(fp)
   848b0:	e17ffd15 	stw	r5,-12(fp)
   848b4:	e1bffe15 	stw	r6,-8(fp)
   848b8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   848bc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   848c0:	00800274 	movhi	r2,9
   848c4:	10b00304 	addi	r2,r2,-16372
   848c8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   848cc:	10003f26 	beq	r2,zero,849cc <alt_alarm_start+0x12c>
  {
    if (alarm)
   848d0:	e0bffc17 	ldw	r2,-16(fp)
   848d4:	10003b26 	beq	r2,zero,849c4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   848d8:	e0bffc17 	ldw	r2,-16(fp)
   848dc:	e0fffe17 	ldw	r3,-8(fp)
   848e0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   848e4:	e0bffc17 	ldw	r2,-16(fp)
   848e8:	e0ffff17 	ldw	r3,-4(fp)
   848ec:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   848f0:	0005303a 	rdctl	r2,status
   848f4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   848f8:	e0fff817 	ldw	r3,-32(fp)
   848fc:	00bfff84 	movi	r2,-2
   84900:	1884703a 	and	r2,r3,r2
   84904:	1001703a 	wrctl	status,r2
  
  return context;
   84908:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   8490c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   84910:	00800274 	movhi	r2,9
   84914:	10b00404 	addi	r2,r2,-16368
   84918:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   8491c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   84920:	e0fffd17 	ldw	r3,-12(fp)
   84924:	e0bff617 	ldw	r2,-40(fp)
   84928:	1885883a 	add	r2,r3,r2
   8492c:	10c00044 	addi	r3,r2,1
   84930:	e0bffc17 	ldw	r2,-16(fp)
   84934:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   84938:	e0bffc17 	ldw	r2,-16(fp)
   8493c:	10c00217 	ldw	r3,8(r2)
   84940:	e0bff617 	ldw	r2,-40(fp)
   84944:	1880042e 	bgeu	r3,r2,84958 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   84948:	e0bffc17 	ldw	r2,-16(fp)
   8494c:	00c00044 	movi	r3,1
   84950:	10c00405 	stb	r3,16(r2)
   84954:	00000206 	br	84960 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   84958:	e0bffc17 	ldw	r2,-16(fp)
   8495c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   84960:	e0fffc17 	ldw	r3,-16(fp)
   84964:	00800274 	movhi	r2,9
   84968:	10a93b04 	addi	r2,r2,-23316
   8496c:	e0bff915 	stw	r2,-28(fp)
   84970:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   84974:	e0bffa17 	ldw	r2,-24(fp)
   84978:	e0fff917 	ldw	r3,-28(fp)
   8497c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   84980:	e0bff917 	ldw	r2,-28(fp)
   84984:	10c00017 	ldw	r3,0(r2)
   84988:	e0bffa17 	ldw	r2,-24(fp)
   8498c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   84990:	e0bff917 	ldw	r2,-28(fp)
   84994:	10800017 	ldw	r2,0(r2)
   84998:	e0fffa17 	ldw	r3,-24(fp)
   8499c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   849a0:	e0bff917 	ldw	r2,-28(fp)
   849a4:	e0fffa17 	ldw	r3,-24(fp)
   849a8:	10c00015 	stw	r3,0(r2)
   849ac:	e0bff717 	ldw	r2,-36(fp)
   849b0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   849b4:	e0bffb17 	ldw	r2,-20(fp)
   849b8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   849bc:	0005883a 	mov	r2,zero
   849c0:	00000306 	br	849d0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   849c4:	00bffa84 	movi	r2,-22
   849c8:	00000106 	br	849d0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   849cc:	00bfde84 	movi	r2,-134
  }
}
   849d0:	e037883a 	mov	sp,fp
   849d4:	df000017 	ldw	fp,0(sp)
   849d8:	dec00104 	addi	sp,sp,4
   849dc:	f800283a 	ret

000849e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   849e0:	defffe04 	addi	sp,sp,-8
   849e4:	dfc00115 	stw	ra,4(sp)
   849e8:	df000015 	stw	fp,0(sp)
   849ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   849f0:	00800274 	movhi	r2,9
   849f4:	10a93904 	addi	r2,r2,-23324
   849f8:	10800017 	ldw	r2,0(r2)
   849fc:	10000526 	beq	r2,zero,84a14 <alt_get_errno+0x34>
   84a00:	00800274 	movhi	r2,9
   84a04:	10a93904 	addi	r2,r2,-23324
   84a08:	10800017 	ldw	r2,0(r2)
   84a0c:	103ee83a 	callr	r2
   84a10:	00000206 	br	84a1c <alt_get_errno+0x3c>
   84a14:	00800274 	movhi	r2,9
   84a18:	10b00604 	addi	r2,r2,-16360
}
   84a1c:	e037883a 	mov	sp,fp
   84a20:	dfc00117 	ldw	ra,4(sp)
   84a24:	df000017 	ldw	fp,0(sp)
   84a28:	dec00204 	addi	sp,sp,8
   84a2c:	f800283a 	ret

00084a30 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   84a30:	defffb04 	addi	sp,sp,-20
   84a34:	dfc00415 	stw	ra,16(sp)
   84a38:	df000315 	stw	fp,12(sp)
   84a3c:	df000304 	addi	fp,sp,12
   84a40:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   84a44:	e0bfff17 	ldw	r2,-4(fp)
   84a48:	10000616 	blt	r2,zero,84a64 <close+0x34>
   84a4c:	e0bfff17 	ldw	r2,-4(fp)
   84a50:	10c00324 	muli	r3,r2,12
   84a54:	00800274 	movhi	r2,9
   84a58:	10a6c704 	addi	r2,r2,-25828
   84a5c:	1885883a 	add	r2,r3,r2
   84a60:	00000106 	br	84a68 <close+0x38>
   84a64:	0005883a 	mov	r2,zero
   84a68:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   84a6c:	e0bffd17 	ldw	r2,-12(fp)
   84a70:	10001926 	beq	r2,zero,84ad8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   84a74:	e0bffd17 	ldw	r2,-12(fp)
   84a78:	10800017 	ldw	r2,0(r2)
   84a7c:	10800417 	ldw	r2,16(r2)
   84a80:	10000626 	beq	r2,zero,84a9c <close+0x6c>
   84a84:	e0bffd17 	ldw	r2,-12(fp)
   84a88:	10800017 	ldw	r2,0(r2)
   84a8c:	10800417 	ldw	r2,16(r2)
   84a90:	e13ffd17 	ldw	r4,-12(fp)
   84a94:	103ee83a 	callr	r2
   84a98:	00000106 	br	84aa0 <close+0x70>
   84a9c:	0005883a 	mov	r2,zero
   84aa0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   84aa4:	e13fff17 	ldw	r4,-4(fp)
   84aa8:	00854880 	call	85488 <alt_release_fd>
    if (rval < 0)
   84aac:	e0bffe17 	ldw	r2,-8(fp)
   84ab0:	1000070e 	bge	r2,zero,84ad0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   84ab4:	00849e00 	call	849e0 <alt_get_errno>
   84ab8:	1007883a 	mov	r3,r2
   84abc:	e0bffe17 	ldw	r2,-8(fp)
   84ac0:	0085c83a 	sub	r2,zero,r2
   84ac4:	18800015 	stw	r2,0(r3)
      return -1;
   84ac8:	00bfffc4 	movi	r2,-1
   84acc:	00000706 	br	84aec <close+0xbc>
    }
    return 0;
   84ad0:	0005883a 	mov	r2,zero
   84ad4:	00000506 	br	84aec <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   84ad8:	00849e00 	call	849e0 <alt_get_errno>
   84adc:	1007883a 	mov	r3,r2
   84ae0:	00801444 	movi	r2,81
   84ae4:	18800015 	stw	r2,0(r3)
    return -1;
   84ae8:	00bfffc4 	movi	r2,-1
  }
}
   84aec:	e037883a 	mov	sp,fp
   84af0:	dfc00117 	ldw	ra,4(sp)
   84af4:	df000017 	ldw	fp,0(sp)
   84af8:	dec00204 	addi	sp,sp,8
   84afc:	f800283a 	ret

00084b00 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
   84b00:	defffb04 	addi	sp,sp,-20
   84b04:	df000415 	stw	fp,16(sp)
   84b08:	df000404 	addi	fp,sp,16
   84b0c:	e13ffe15 	stw	r4,-8(fp)
   84b10:	e17fff15 	stw	r5,-4(fp)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
   84b14:	e0fffe17 	ldw	r3,-8(fp)
   84b18:	e0bfff17 	ldw	r2,-4(fp)
   84b1c:	1885883a 	add	r2,r3,r2
   84b20:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   84b24:	e0bffe17 	ldw	r2,-8(fp)
   84b28:	e0bffc15 	stw	r2,-16(fp)
   84b2c:	00000506 	br	84b44 <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
   84b30:	e0bffc17 	ldw	r2,-16(fp)
   84b34:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   84b38:	e0bffc17 	ldw	r2,-16(fp)
   84b3c:	10800804 	addi	r2,r2,32
   84b40:	e0bffc15 	stw	r2,-16(fp)
   84b44:	e0fffc17 	ldw	r3,-16(fp)
   84b48:	e0bffd17 	ldw	r2,-12(fp)
   84b4c:	18bff836 	bltu	r3,r2,84b30 <rx_descriptor_end+0xfff84ad0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
   84b50:	e0bffe17 	ldw	r2,-8(fp)
   84b54:	108007cc 	andi	r2,r2,31
   84b58:	10000226 	beq	r2,zero,84b64 <alt_dcache_flush+0x64>
  {
    ALT_FLUSH_DATA(i);
   84b5c:	e0bffc17 	ldw	r2,-16(fp)
   84b60:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   84b64:	e037883a 	mov	sp,fp
   84b68:	df000017 	ldw	fp,0(sp)
   84b6c:	dec00104 	addi	sp,sp,4
   84b70:	f800283a 	ret

00084b74 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   84b74:	defffc04 	addi	sp,sp,-16
   84b78:	df000315 	stw	fp,12(sp)
   84b7c:	df000304 	addi	fp,sp,12
   84b80:	e13ffd15 	stw	r4,-12(fp)
   84b84:	e17ffe15 	stw	r5,-8(fp)
   84b88:	e1bfff15 	stw	r6,-4(fp)
  return len;
   84b8c:	e0bfff17 	ldw	r2,-4(fp)
}
   84b90:	e037883a 	mov	sp,fp
   84b94:	df000017 	ldw	fp,0(sp)
   84b98:	dec00104 	addi	sp,sp,4
   84b9c:	f800283a 	ret

00084ba0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   84ba0:	defffe04 	addi	sp,sp,-8
   84ba4:	dfc00115 	stw	ra,4(sp)
   84ba8:	df000015 	stw	fp,0(sp)
   84bac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   84bb0:	00800274 	movhi	r2,9
   84bb4:	10a93904 	addi	r2,r2,-23324
   84bb8:	10800017 	ldw	r2,0(r2)
   84bbc:	10000526 	beq	r2,zero,84bd4 <alt_get_errno+0x34>
   84bc0:	00800274 	movhi	r2,9
   84bc4:	10a93904 	addi	r2,r2,-23324
   84bc8:	10800017 	ldw	r2,0(r2)
   84bcc:	103ee83a 	callr	r2
   84bd0:	00000206 	br	84bdc <alt_get_errno+0x3c>
   84bd4:	00800274 	movhi	r2,9
   84bd8:	10b00604 	addi	r2,r2,-16360
}
   84bdc:	e037883a 	mov	sp,fp
   84be0:	dfc00117 	ldw	ra,4(sp)
   84be4:	df000017 	ldw	fp,0(sp)
   84be8:	dec00204 	addi	sp,sp,8
   84bec:	f800283a 	ret

00084bf0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   84bf0:	defffa04 	addi	sp,sp,-24
   84bf4:	dfc00515 	stw	ra,20(sp)
   84bf8:	df000415 	stw	fp,16(sp)
   84bfc:	df000404 	addi	fp,sp,16
   84c00:	e13ffe15 	stw	r4,-8(fp)
   84c04:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   84c08:	e0bffe17 	ldw	r2,-8(fp)
   84c0c:	10000326 	beq	r2,zero,84c1c <alt_dev_llist_insert+0x2c>
   84c10:	e0bffe17 	ldw	r2,-8(fp)
   84c14:	10800217 	ldw	r2,8(r2)
   84c18:	1000061e 	bne	r2,zero,84c34 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   84c1c:	0084ba00 	call	84ba0 <alt_get_errno>
   84c20:	1007883a 	mov	r3,r2
   84c24:	00800584 	movi	r2,22
   84c28:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   84c2c:	00bffa84 	movi	r2,-22
   84c30:	00001306 	br	84c80 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   84c34:	e0bffe17 	ldw	r2,-8(fp)
   84c38:	e0ffff17 	ldw	r3,-4(fp)
   84c3c:	e0fffc15 	stw	r3,-16(fp)
   84c40:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   84c44:	e0bffd17 	ldw	r2,-12(fp)
   84c48:	e0fffc17 	ldw	r3,-16(fp)
   84c4c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   84c50:	e0bffc17 	ldw	r2,-16(fp)
   84c54:	10c00017 	ldw	r3,0(r2)
   84c58:	e0bffd17 	ldw	r2,-12(fp)
   84c5c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   84c60:	e0bffc17 	ldw	r2,-16(fp)
   84c64:	10800017 	ldw	r2,0(r2)
   84c68:	e0fffd17 	ldw	r3,-12(fp)
   84c6c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   84c70:	e0bffc17 	ldw	r2,-16(fp)
   84c74:	e0fffd17 	ldw	r3,-12(fp)
   84c78:	10c00015 	stw	r3,0(r2)

  return 0;  
   84c7c:	0005883a 	mov	r2,zero
}
   84c80:	e037883a 	mov	sp,fp
   84c84:	dfc00117 	ldw	ra,4(sp)
   84c88:	df000017 	ldw	fp,0(sp)
   84c8c:	dec00204 	addi	sp,sp,8
   84c90:	f800283a 	ret

00084c94 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   84c94:	defffd04 	addi	sp,sp,-12
   84c98:	dfc00215 	stw	ra,8(sp)
   84c9c:	df000115 	stw	fp,4(sp)
   84ca0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   84ca4:	00800274 	movhi	r2,9
   84ca8:	10a08104 	addi	r2,r2,-32252
   84cac:	e0bfff15 	stw	r2,-4(fp)
   84cb0:	00000606 	br	84ccc <_do_ctors+0x38>
        (*ctor) (); 
   84cb4:	e0bfff17 	ldw	r2,-4(fp)
   84cb8:	10800017 	ldw	r2,0(r2)
   84cbc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   84cc0:	e0bfff17 	ldw	r2,-4(fp)
   84cc4:	10bfff04 	addi	r2,r2,-4
   84cc8:	e0bfff15 	stw	r2,-4(fp)
   84ccc:	e0ffff17 	ldw	r3,-4(fp)
   84cd0:	00800274 	movhi	r2,9
   84cd4:	10a08204 	addi	r2,r2,-32248
   84cd8:	18bff62e 	bgeu	r3,r2,84cb4 <rx_descriptor_end+0xfff84c54>
        (*ctor) (); 
}
   84cdc:	e037883a 	mov	sp,fp
   84ce0:	dfc00117 	ldw	ra,4(sp)
   84ce4:	df000017 	ldw	fp,0(sp)
   84ce8:	dec00204 	addi	sp,sp,8
   84cec:	f800283a 	ret

00084cf0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   84cf0:	defffd04 	addi	sp,sp,-12
   84cf4:	dfc00215 	stw	ra,8(sp)
   84cf8:	df000115 	stw	fp,4(sp)
   84cfc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   84d00:	00800274 	movhi	r2,9
   84d04:	10a08104 	addi	r2,r2,-32252
   84d08:	e0bfff15 	stw	r2,-4(fp)
   84d0c:	00000606 	br	84d28 <_do_dtors+0x38>
        (*dtor) (); 
   84d10:	e0bfff17 	ldw	r2,-4(fp)
   84d14:	10800017 	ldw	r2,0(r2)
   84d18:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   84d1c:	e0bfff17 	ldw	r2,-4(fp)
   84d20:	10bfff04 	addi	r2,r2,-4
   84d24:	e0bfff15 	stw	r2,-4(fp)
   84d28:	e0ffff17 	ldw	r3,-4(fp)
   84d2c:	00800274 	movhi	r2,9
   84d30:	10a08204 	addi	r2,r2,-32248
   84d34:	18bff62e 	bgeu	r3,r2,84d10 <rx_descriptor_end+0xfff84cb0>
        (*dtor) (); 
}
   84d38:	e037883a 	mov	sp,fp
   84d3c:	dfc00117 	ldw	ra,4(sp)
   84d40:	df000017 	ldw	fp,0(sp)
   84d44:	dec00204 	addi	sp,sp,8
   84d48:	f800283a 	ret

00084d4c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   84d4c:	defffa04 	addi	sp,sp,-24
   84d50:	dfc00515 	stw	ra,20(sp)
   84d54:	df000415 	stw	fp,16(sp)
   84d58:	df000404 	addi	fp,sp,16
   84d5c:	e13ffe15 	stw	r4,-8(fp)
   84d60:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   84d64:	e0bfff17 	ldw	r2,-4(fp)
   84d68:	10800017 	ldw	r2,0(r2)
   84d6c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   84d70:	e13ffe17 	ldw	r4,-8(fp)
   84d74:	0085bc40 	call	85bc4 <strlen>
   84d78:	10800044 	addi	r2,r2,1
   84d7c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   84d80:	00000d06 	br	84db8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   84d84:	e0bffc17 	ldw	r2,-16(fp)
   84d88:	10c00217 	ldw	r3,8(r2)
   84d8c:	e0bffd17 	ldw	r2,-12(fp)
   84d90:	1809883a 	mov	r4,r3
   84d94:	e17ffe17 	ldw	r5,-8(fp)
   84d98:	100d883a 	mov	r6,r2
   84d9c:	00859e00 	call	859e0 <memcmp>
   84da0:	1000021e 	bne	r2,zero,84dac <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   84da4:	e0bffc17 	ldw	r2,-16(fp)
   84da8:	00000706 	br	84dc8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   84dac:	e0bffc17 	ldw	r2,-16(fp)
   84db0:	10800017 	ldw	r2,0(r2)
   84db4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   84db8:	e0fffc17 	ldw	r3,-16(fp)
   84dbc:	e0bfff17 	ldw	r2,-4(fp)
   84dc0:	18bff01e 	bne	r3,r2,84d84 <rx_descriptor_end+0xfff84d24>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   84dc4:	0005883a 	mov	r2,zero
}
   84dc8:	e037883a 	mov	sp,fp
   84dcc:	dfc00117 	ldw	ra,4(sp)
   84dd0:	df000017 	ldw	fp,0(sp)
   84dd4:	dec00204 	addi	sp,sp,8
   84dd8:	f800283a 	ret

00084ddc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   84ddc:	defffe04 	addi	sp,sp,-8
   84de0:	dfc00115 	stw	ra,4(sp)
   84de4:	df000015 	stw	fp,0(sp)
   84de8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   84dec:	0009883a 	mov	r4,zero
   84df0:	01440004 	movi	r5,4096
   84df4:	008586c0 	call	8586c <alt_icache_flush>
#endif
}
   84df8:	e037883a 	mov	sp,fp
   84dfc:	dfc00117 	ldw	ra,4(sp)
   84e00:	df000017 	ldw	fp,0(sp)
   84e04:	dec00204 	addi	sp,sp,8
   84e08:	f800283a 	ret

00084e0c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   84e0c:	defff904 	addi	sp,sp,-28
   84e10:	dfc00615 	stw	ra,24(sp)
   84e14:	df000515 	stw	fp,20(sp)
   84e18:	df000504 	addi	fp,sp,20
   84e1c:	e13ffc15 	stw	r4,-16(fp)
   84e20:	e17ffd15 	stw	r5,-12(fp)
   84e24:	e1bffe15 	stw	r6,-8(fp)
   84e28:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   84e2c:	e0800217 	ldw	r2,8(fp)
   84e30:	d8800015 	stw	r2,0(sp)
   84e34:	e13ffc17 	ldw	r4,-16(fp)
   84e38:	e17ffd17 	ldw	r5,-12(fp)
   84e3c:	e1bffe17 	ldw	r6,-8(fp)
   84e40:	e1ffff17 	ldw	r7,-4(fp)
   84e44:	0084fec0 	call	84fec <alt_iic_isr_register>
}  
   84e48:	e037883a 	mov	sp,fp
   84e4c:	dfc00117 	ldw	ra,4(sp)
   84e50:	df000017 	ldw	fp,0(sp)
   84e54:	dec00204 	addi	sp,sp,8
   84e58:	f800283a 	ret

00084e5c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   84e5c:	defff904 	addi	sp,sp,-28
   84e60:	df000615 	stw	fp,24(sp)
   84e64:	df000604 	addi	fp,sp,24
   84e68:	e13ffe15 	stw	r4,-8(fp)
   84e6c:	e17fff15 	stw	r5,-4(fp)
   84e70:	e0bfff17 	ldw	r2,-4(fp)
   84e74:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84e78:	0005303a 	rdctl	r2,status
   84e7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84e80:	e0fffb17 	ldw	r3,-20(fp)
   84e84:	00bfff84 	movi	r2,-2
   84e88:	1884703a 	and	r2,r3,r2
   84e8c:	1001703a 	wrctl	status,r2
  
  return context;
   84e90:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   84e94:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   84e98:	e0bffa17 	ldw	r2,-24(fp)
   84e9c:	00c00044 	movi	r3,1
   84ea0:	1884983a 	sll	r2,r3,r2
   84ea4:	1007883a 	mov	r3,r2
   84ea8:	00800274 	movhi	r2,9
   84eac:	10b00204 	addi	r2,r2,-16376
   84eb0:	10800017 	ldw	r2,0(r2)
   84eb4:	1886b03a 	or	r3,r3,r2
   84eb8:	00800274 	movhi	r2,9
   84ebc:	10b00204 	addi	r2,r2,-16376
   84ec0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   84ec4:	00800274 	movhi	r2,9
   84ec8:	10b00204 	addi	r2,r2,-16376
   84ecc:	10800017 	ldw	r2,0(r2)
   84ed0:	100170fa 	wrctl	ienable,r2
   84ed4:	e0bffc17 	ldw	r2,-16(fp)
   84ed8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84edc:	e0bffd17 	ldw	r2,-12(fp)
   84ee0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   84ee4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   84ee8:	0001883a 	nop
}
   84eec:	e037883a 	mov	sp,fp
   84ef0:	df000017 	ldw	fp,0(sp)
   84ef4:	dec00104 	addi	sp,sp,4
   84ef8:	f800283a 	ret

00084efc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   84efc:	defff904 	addi	sp,sp,-28
   84f00:	df000615 	stw	fp,24(sp)
   84f04:	df000604 	addi	fp,sp,24
   84f08:	e13ffe15 	stw	r4,-8(fp)
   84f0c:	e17fff15 	stw	r5,-4(fp)
   84f10:	e0bfff17 	ldw	r2,-4(fp)
   84f14:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84f18:	0005303a 	rdctl	r2,status
   84f1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84f20:	e0fffb17 	ldw	r3,-20(fp)
   84f24:	00bfff84 	movi	r2,-2
   84f28:	1884703a 	and	r2,r3,r2
   84f2c:	1001703a 	wrctl	status,r2
  
  return context;
   84f30:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   84f34:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   84f38:	e0bffa17 	ldw	r2,-24(fp)
   84f3c:	00c00044 	movi	r3,1
   84f40:	1884983a 	sll	r2,r3,r2
   84f44:	0084303a 	nor	r2,zero,r2
   84f48:	1007883a 	mov	r3,r2
   84f4c:	00800274 	movhi	r2,9
   84f50:	10b00204 	addi	r2,r2,-16376
   84f54:	10800017 	ldw	r2,0(r2)
   84f58:	1886703a 	and	r3,r3,r2
   84f5c:	00800274 	movhi	r2,9
   84f60:	10b00204 	addi	r2,r2,-16376
   84f64:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   84f68:	00800274 	movhi	r2,9
   84f6c:	10b00204 	addi	r2,r2,-16376
   84f70:	10800017 	ldw	r2,0(r2)
   84f74:	100170fa 	wrctl	ienable,r2
   84f78:	e0bffc17 	ldw	r2,-16(fp)
   84f7c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84f80:	e0bffd17 	ldw	r2,-12(fp)
   84f84:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   84f88:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   84f8c:	0001883a 	nop
}
   84f90:	e037883a 	mov	sp,fp
   84f94:	df000017 	ldw	fp,0(sp)
   84f98:	dec00104 	addi	sp,sp,4
   84f9c:	f800283a 	ret

00084fa0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   84fa0:	defffc04 	addi	sp,sp,-16
   84fa4:	df000315 	stw	fp,12(sp)
   84fa8:	df000304 	addi	fp,sp,12
   84fac:	e13ffe15 	stw	r4,-8(fp)
   84fb0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   84fb4:	000530fa 	rdctl	r2,ienable
   84fb8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   84fbc:	e0bfff17 	ldw	r2,-4(fp)
   84fc0:	00c00044 	movi	r3,1
   84fc4:	1884983a 	sll	r2,r3,r2
   84fc8:	1007883a 	mov	r3,r2
   84fcc:	e0bffd17 	ldw	r2,-12(fp)
   84fd0:	1884703a 	and	r2,r3,r2
   84fd4:	1004c03a 	cmpne	r2,r2,zero
   84fd8:	10803fcc 	andi	r2,r2,255
}
   84fdc:	e037883a 	mov	sp,fp
   84fe0:	df000017 	ldw	fp,0(sp)
   84fe4:	dec00104 	addi	sp,sp,4
   84fe8:	f800283a 	ret

00084fec <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   84fec:	defff504 	addi	sp,sp,-44
   84ff0:	dfc00a15 	stw	ra,40(sp)
   84ff4:	df000915 	stw	fp,36(sp)
   84ff8:	df000904 	addi	fp,sp,36
   84ffc:	e13ffc15 	stw	r4,-16(fp)
   85000:	e17ffd15 	stw	r5,-12(fp)
   85004:	e1bffe15 	stw	r6,-8(fp)
   85008:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   8500c:	00bffa84 	movi	r2,-22
   85010:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   85014:	e0bffd17 	ldw	r2,-12(fp)
   85018:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8501c:	e0bff817 	ldw	r2,-32(fp)
   85020:	10800808 	cmpgei	r2,r2,32
   85024:	1000271e 	bne	r2,zero,850c4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   85028:	0005303a 	rdctl	r2,status
   8502c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   85030:	e0fffa17 	ldw	r3,-24(fp)
   85034:	00bfff84 	movi	r2,-2
   85038:	1884703a 	and	r2,r3,r2
   8503c:	1001703a 	wrctl	status,r2
  
  return context;
   85040:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   85044:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   85048:	00800274 	movhi	r2,9
   8504c:	10b03f04 	addi	r2,r2,-16132
   85050:	e0fff817 	ldw	r3,-32(fp)
   85054:	180690fa 	slli	r3,r3,3
   85058:	10c5883a 	add	r2,r2,r3
   8505c:	e0fffe17 	ldw	r3,-8(fp)
   85060:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   85064:	00800274 	movhi	r2,9
   85068:	10b03f04 	addi	r2,r2,-16132
   8506c:	e0fff817 	ldw	r3,-32(fp)
   85070:	180690fa 	slli	r3,r3,3
   85074:	10c5883a 	add	r2,r2,r3
   85078:	10800104 	addi	r2,r2,4
   8507c:	e0ffff17 	ldw	r3,-4(fp)
   85080:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   85084:	e0bffe17 	ldw	r2,-8(fp)
   85088:	10000526 	beq	r2,zero,850a0 <alt_iic_isr_register+0xb4>
   8508c:	e0bff817 	ldw	r2,-32(fp)
   85090:	e13ffc17 	ldw	r4,-16(fp)
   85094:	100b883a 	mov	r5,r2
   85098:	0084e5c0 	call	84e5c <alt_ic_irq_enable>
   8509c:	00000406 	br	850b0 <alt_iic_isr_register+0xc4>
   850a0:	e0bff817 	ldw	r2,-32(fp)
   850a4:	e13ffc17 	ldw	r4,-16(fp)
   850a8:	100b883a 	mov	r5,r2
   850ac:	0084efc0 	call	84efc <alt_ic_irq_disable>
   850b0:	e0bff715 	stw	r2,-36(fp)
   850b4:	e0bff917 	ldw	r2,-28(fp)
   850b8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   850bc:	e0bffb17 	ldw	r2,-20(fp)
   850c0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   850c4:	e0bff717 	ldw	r2,-36(fp)
}
   850c8:	e037883a 	mov	sp,fp
   850cc:	dfc00117 	ldw	ra,4(sp)
   850d0:	df000017 	ldw	fp,0(sp)
   850d4:	dec00204 	addi	sp,sp,8
   850d8:	f800283a 	ret

000850dc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   850dc:	defff904 	addi	sp,sp,-28
   850e0:	dfc00615 	stw	ra,24(sp)
   850e4:	df000515 	stw	fp,20(sp)
   850e8:	df000504 	addi	fp,sp,20
   850ec:	e13ffc15 	stw	r4,-16(fp)
   850f0:	e17ffd15 	stw	r5,-12(fp)
   850f4:	e1bffe15 	stw	r6,-8(fp)
   850f8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   850fc:	e13ffd17 	ldw	r4,-12(fp)
   85100:	e17ffe17 	ldw	r5,-8(fp)
   85104:	e1bfff17 	ldw	r6,-4(fp)
   85108:	00853300 	call	85330 <open>
   8510c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   85110:	e0bffb17 	ldw	r2,-20(fp)
   85114:	10001c16 	blt	r2,zero,85188 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   85118:	00800274 	movhi	r2,9
   8511c:	10a6c704 	addi	r2,r2,-25828
   85120:	e0fffb17 	ldw	r3,-20(fp)
   85124:	18c00324 	muli	r3,r3,12
   85128:	10c5883a 	add	r2,r2,r3
   8512c:	10c00017 	ldw	r3,0(r2)
   85130:	e0bffc17 	ldw	r2,-16(fp)
   85134:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   85138:	00800274 	movhi	r2,9
   8513c:	10a6c704 	addi	r2,r2,-25828
   85140:	e0fffb17 	ldw	r3,-20(fp)
   85144:	18c00324 	muli	r3,r3,12
   85148:	10c5883a 	add	r2,r2,r3
   8514c:	10800104 	addi	r2,r2,4
   85150:	10c00017 	ldw	r3,0(r2)
   85154:	e0bffc17 	ldw	r2,-16(fp)
   85158:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   8515c:	00800274 	movhi	r2,9
   85160:	10a6c704 	addi	r2,r2,-25828
   85164:	e0fffb17 	ldw	r3,-20(fp)
   85168:	18c00324 	muli	r3,r3,12
   8516c:	10c5883a 	add	r2,r2,r3
   85170:	10800204 	addi	r2,r2,8
   85174:	10c00017 	ldw	r3,0(r2)
   85178:	e0bffc17 	ldw	r2,-16(fp)
   8517c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   85180:	e13ffb17 	ldw	r4,-20(fp)
   85184:	00854880 	call	85488 <alt_release_fd>
  }
} 
   85188:	e037883a 	mov	sp,fp
   8518c:	dfc00117 	ldw	ra,4(sp)
   85190:	df000017 	ldw	fp,0(sp)
   85194:	dec00204 	addi	sp,sp,8
   85198:	f800283a 	ret

0008519c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   8519c:	defffb04 	addi	sp,sp,-20
   851a0:	dfc00415 	stw	ra,16(sp)
   851a4:	df000315 	stw	fp,12(sp)
   851a8:	df000304 	addi	fp,sp,12
   851ac:	e13ffd15 	stw	r4,-12(fp)
   851b0:	e17ffe15 	stw	r5,-8(fp)
   851b4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   851b8:	01000274 	movhi	r4,9
   851bc:	2126ca04 	addi	r4,r4,-25816
   851c0:	e17ffd17 	ldw	r5,-12(fp)
   851c4:	01800044 	movi	r6,1
   851c8:	01c07fc4 	movi	r7,511
   851cc:	00850dc0 	call	850dc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   851d0:	01000274 	movhi	r4,9
   851d4:	2126c704 	addi	r4,r4,-25828
   851d8:	e17ffe17 	ldw	r5,-8(fp)
   851dc:	000d883a 	mov	r6,zero
   851e0:	01c07fc4 	movi	r7,511
   851e4:	00850dc0 	call	850dc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   851e8:	01000274 	movhi	r4,9
   851ec:	2126cd04 	addi	r4,r4,-25804
   851f0:	e17fff17 	ldw	r5,-4(fp)
   851f4:	01800044 	movi	r6,1
   851f8:	01c07fc4 	movi	r7,511
   851fc:	00850dc0 	call	850dc <alt_open_fd>
}  
   85200:	e037883a 	mov	sp,fp
   85204:	dfc00117 	ldw	ra,4(sp)
   85208:	df000017 	ldw	fp,0(sp)
   8520c:	dec00204 	addi	sp,sp,8
   85210:	f800283a 	ret

00085214 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   85214:	defffe04 	addi	sp,sp,-8
   85218:	dfc00115 	stw	ra,4(sp)
   8521c:	df000015 	stw	fp,0(sp)
   85220:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   85224:	00800274 	movhi	r2,9
   85228:	10a93904 	addi	r2,r2,-23324
   8522c:	10800017 	ldw	r2,0(r2)
   85230:	10000526 	beq	r2,zero,85248 <alt_get_errno+0x34>
   85234:	00800274 	movhi	r2,9
   85238:	10a93904 	addi	r2,r2,-23324
   8523c:	10800017 	ldw	r2,0(r2)
   85240:	103ee83a 	callr	r2
   85244:	00000206 	br	85250 <alt_get_errno+0x3c>
   85248:	00800274 	movhi	r2,9
   8524c:	10b00604 	addi	r2,r2,-16360
}
   85250:	e037883a 	mov	sp,fp
   85254:	dfc00117 	ldw	ra,4(sp)
   85258:	df000017 	ldw	fp,0(sp)
   8525c:	dec00204 	addi	sp,sp,8
   85260:	f800283a 	ret

00085264 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   85264:	defffd04 	addi	sp,sp,-12
   85268:	df000215 	stw	fp,8(sp)
   8526c:	df000204 	addi	fp,sp,8
   85270:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   85274:	e0bfff17 	ldw	r2,-4(fp)
   85278:	10800217 	ldw	r2,8(r2)
   8527c:	10d00034 	orhi	r3,r2,16384
   85280:	e0bfff17 	ldw	r2,-4(fp)
   85284:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   85288:	e03ffe15 	stw	zero,-8(fp)
   8528c:	00001d06 	br	85304 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   85290:	00800274 	movhi	r2,9
   85294:	10a6c704 	addi	r2,r2,-25828
   85298:	e0fffe17 	ldw	r3,-8(fp)
   8529c:	18c00324 	muli	r3,r3,12
   852a0:	10c5883a 	add	r2,r2,r3
   852a4:	10c00017 	ldw	r3,0(r2)
   852a8:	e0bfff17 	ldw	r2,-4(fp)
   852ac:	10800017 	ldw	r2,0(r2)
   852b0:	1880111e 	bne	r3,r2,852f8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   852b4:	00800274 	movhi	r2,9
   852b8:	10a6c704 	addi	r2,r2,-25828
   852bc:	e0fffe17 	ldw	r3,-8(fp)
   852c0:	18c00324 	muli	r3,r3,12
   852c4:	10c5883a 	add	r2,r2,r3
   852c8:	10800204 	addi	r2,r2,8
   852cc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   852d0:	1000090e 	bge	r2,zero,852f8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   852d4:	e0bffe17 	ldw	r2,-8(fp)
   852d8:	10c00324 	muli	r3,r2,12
   852dc:	00800274 	movhi	r2,9
   852e0:	10a6c704 	addi	r2,r2,-25828
   852e4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   852e8:	e0bfff17 	ldw	r2,-4(fp)
   852ec:	18800226 	beq	r3,r2,852f8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   852f0:	00bffcc4 	movi	r2,-13
   852f4:	00000a06 	br	85320 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   852f8:	e0bffe17 	ldw	r2,-8(fp)
   852fc:	10800044 	addi	r2,r2,1
   85300:	e0bffe15 	stw	r2,-8(fp)
   85304:	00800274 	movhi	r2,9
   85308:	10a93804 	addi	r2,r2,-23328
   8530c:	10800017 	ldw	r2,0(r2)
   85310:	1007883a 	mov	r3,r2
   85314:	e0bffe17 	ldw	r2,-8(fp)
   85318:	18bfdd2e 	bgeu	r3,r2,85290 <rx_descriptor_end+0xfff85230>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   8531c:	0005883a 	mov	r2,zero
}
   85320:	e037883a 	mov	sp,fp
   85324:	df000017 	ldw	fp,0(sp)
   85328:	dec00104 	addi	sp,sp,4
   8532c:	f800283a 	ret

00085330 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   85330:	defff604 	addi	sp,sp,-40
   85334:	dfc00915 	stw	ra,36(sp)
   85338:	df000815 	stw	fp,32(sp)
   8533c:	df000804 	addi	fp,sp,32
   85340:	e13ffd15 	stw	r4,-12(fp)
   85344:	e17ffe15 	stw	r5,-8(fp)
   85348:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   8534c:	00bfffc4 	movi	r2,-1
   85350:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   85354:	00bffb44 	movi	r2,-19
   85358:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   8535c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   85360:	e13ffd17 	ldw	r4,-12(fp)
   85364:	01400274 	movhi	r5,9
   85368:	29693604 	addi	r5,r5,-23336
   8536c:	0084d4c0 	call	84d4c <alt_find_dev>
   85370:	e0bff815 	stw	r2,-32(fp)
   85374:	e0bff817 	ldw	r2,-32(fp)
   85378:	1000051e 	bne	r2,zero,85390 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   8537c:	e13ffd17 	ldw	r4,-12(fp)
   85380:	00856a40 	call	856a4 <alt_find_file>
   85384:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   85388:	00800044 	movi	r2,1
   8538c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   85390:	e0bff817 	ldw	r2,-32(fp)
   85394:	10002926 	beq	r2,zero,8543c <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   85398:	e13ff817 	ldw	r4,-32(fp)
   8539c:	00857b80 	call	857b8 <alt_get_fd>
   853a0:	e0bff915 	stw	r2,-28(fp)
   853a4:	e0bff917 	ldw	r2,-28(fp)
   853a8:	1000030e 	bge	r2,zero,853b8 <open+0x88>
    {
      status = index;
   853ac:	e0bff917 	ldw	r2,-28(fp)
   853b0:	e0bffa15 	stw	r2,-24(fp)
   853b4:	00002306 	br	85444 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   853b8:	e0bff917 	ldw	r2,-28(fp)
   853bc:	10c00324 	muli	r3,r2,12
   853c0:	00800274 	movhi	r2,9
   853c4:	10a6c704 	addi	r2,r2,-25828
   853c8:	1885883a 	add	r2,r3,r2
   853cc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   853d0:	e0fffe17 	ldw	r3,-8(fp)
   853d4:	00900034 	movhi	r2,16384
   853d8:	10bfffc4 	addi	r2,r2,-1
   853dc:	1886703a 	and	r3,r3,r2
   853e0:	e0bffc17 	ldw	r2,-16(fp)
   853e4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   853e8:	e0bffb17 	ldw	r2,-20(fp)
   853ec:	1000051e 	bne	r2,zero,85404 <open+0xd4>
   853f0:	e13ffc17 	ldw	r4,-16(fp)
   853f4:	00852640 	call	85264 <alt_file_locked>
   853f8:	e0bffa15 	stw	r2,-24(fp)
   853fc:	e0bffa17 	ldw	r2,-24(fp)
   85400:	10001016 	blt	r2,zero,85444 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   85404:	e0bff817 	ldw	r2,-32(fp)
   85408:	10800317 	ldw	r2,12(r2)
   8540c:	10000826 	beq	r2,zero,85430 <open+0x100>
   85410:	e0bff817 	ldw	r2,-32(fp)
   85414:	10800317 	ldw	r2,12(r2)
   85418:	e13ffc17 	ldw	r4,-16(fp)
   8541c:	e17ffd17 	ldw	r5,-12(fp)
   85420:	e1bffe17 	ldw	r6,-8(fp)
   85424:	e1ffff17 	ldw	r7,-4(fp)
   85428:	103ee83a 	callr	r2
   8542c:	00000106 	br	85434 <open+0x104>
   85430:	0005883a 	mov	r2,zero
   85434:	e0bffa15 	stw	r2,-24(fp)
   85438:	00000206 	br	85444 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   8543c:	00bffb44 	movi	r2,-19
   85440:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   85444:	e0bffa17 	ldw	r2,-24(fp)
   85448:	1000090e 	bge	r2,zero,85470 <open+0x140>
  {
    alt_release_fd (index);  
   8544c:	e13ff917 	ldw	r4,-28(fp)
   85450:	00854880 	call	85488 <alt_release_fd>
    ALT_ERRNO = -status;
   85454:	00852140 	call	85214 <alt_get_errno>
   85458:	1007883a 	mov	r3,r2
   8545c:	e0bffa17 	ldw	r2,-24(fp)
   85460:	0085c83a 	sub	r2,zero,r2
   85464:	18800015 	stw	r2,0(r3)
    return -1;
   85468:	00bfffc4 	movi	r2,-1
   8546c:	00000106 	br	85474 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   85470:	e0bff917 	ldw	r2,-28(fp)
}
   85474:	e037883a 	mov	sp,fp
   85478:	dfc00117 	ldw	ra,4(sp)
   8547c:	df000017 	ldw	fp,0(sp)
   85480:	dec00204 	addi	sp,sp,8
   85484:	f800283a 	ret

00085488 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   85488:	defffe04 	addi	sp,sp,-8
   8548c:	df000115 	stw	fp,4(sp)
   85490:	df000104 	addi	fp,sp,4
   85494:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   85498:	e0bfff17 	ldw	r2,-4(fp)
   8549c:	108000d0 	cmplti	r2,r2,3
   854a0:	10000d1e 	bne	r2,zero,854d8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   854a4:	00800274 	movhi	r2,9
   854a8:	10a6c704 	addi	r2,r2,-25828
   854ac:	e0ffff17 	ldw	r3,-4(fp)
   854b0:	18c00324 	muli	r3,r3,12
   854b4:	10c5883a 	add	r2,r2,r3
   854b8:	10800204 	addi	r2,r2,8
   854bc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   854c0:	00800274 	movhi	r2,9
   854c4:	10a6c704 	addi	r2,r2,-25828
   854c8:	e0ffff17 	ldw	r3,-4(fp)
   854cc:	18c00324 	muli	r3,r3,12
   854d0:	10c5883a 	add	r2,r2,r3
   854d4:	10000015 	stw	zero,0(r2)
  }
}
   854d8:	e037883a 	mov	sp,fp
   854dc:	df000017 	ldw	fp,0(sp)
   854e0:	dec00104 	addi	sp,sp,4
   854e4:	f800283a 	ret

000854e8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   854e8:	defffa04 	addi	sp,sp,-24
   854ec:	df000515 	stw	fp,20(sp)
   854f0:	df000504 	addi	fp,sp,20
   854f4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   854f8:	0005303a 	rdctl	r2,status
   854fc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   85500:	e0fffc17 	ldw	r3,-16(fp)
   85504:	00bfff84 	movi	r2,-2
   85508:	1884703a 	and	r2,r3,r2
   8550c:	1001703a 	wrctl	status,r2
  
  return context;
   85510:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   85514:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   85518:	e0bfff17 	ldw	r2,-4(fp)
   8551c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   85520:	e0bffd17 	ldw	r2,-12(fp)
   85524:	10800017 	ldw	r2,0(r2)
   85528:	e0fffd17 	ldw	r3,-12(fp)
   8552c:	18c00117 	ldw	r3,4(r3)
   85530:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   85534:	e0bffd17 	ldw	r2,-12(fp)
   85538:	10800117 	ldw	r2,4(r2)
   8553c:	e0fffd17 	ldw	r3,-12(fp)
   85540:	18c00017 	ldw	r3,0(r3)
   85544:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   85548:	e0bffd17 	ldw	r2,-12(fp)
   8554c:	e0fffd17 	ldw	r3,-12(fp)
   85550:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   85554:	e0bffd17 	ldw	r2,-12(fp)
   85558:	e0fffd17 	ldw	r3,-12(fp)
   8555c:	10c00015 	stw	r3,0(r2)
   85560:	e0bffb17 	ldw	r2,-20(fp)
   85564:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   85568:	e0bffe17 	ldw	r2,-8(fp)
   8556c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   85570:	e037883a 	mov	sp,fp
   85574:	df000017 	ldw	fp,0(sp)
   85578:	dec00104 	addi	sp,sp,4
   8557c:	f800283a 	ret

00085580 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   85580:	defffb04 	addi	sp,sp,-20
   85584:	dfc00415 	stw	ra,16(sp)
   85588:	df000315 	stw	fp,12(sp)
   8558c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   85590:	d0a00917 	ldw	r2,-32732(gp)
   85594:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   85598:	d0a6d217 	ldw	r2,-25784(gp)
   8559c:	10800044 	addi	r2,r2,1
   855a0:	d0a6d215 	stw	r2,-25784(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   855a4:	00002e06 	br	85660 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   855a8:	e0bffd17 	ldw	r2,-12(fp)
   855ac:	10800017 	ldw	r2,0(r2)
   855b0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   855b4:	e0bffd17 	ldw	r2,-12(fp)
   855b8:	10800403 	ldbu	r2,16(r2)
   855bc:	10803fcc 	andi	r2,r2,255
   855c0:	10000426 	beq	r2,zero,855d4 <alt_tick+0x54>
   855c4:	d0a6d217 	ldw	r2,-25784(gp)
   855c8:	1000021e 	bne	r2,zero,855d4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   855cc:	e0bffd17 	ldw	r2,-12(fp)
   855d0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   855d4:	e0bffd17 	ldw	r2,-12(fp)
   855d8:	10800217 	ldw	r2,8(r2)
   855dc:	d0e6d217 	ldw	r3,-25784(gp)
   855e0:	18801d36 	bltu	r3,r2,85658 <alt_tick+0xd8>
   855e4:	e0bffd17 	ldw	r2,-12(fp)
   855e8:	10800403 	ldbu	r2,16(r2)
   855ec:	10803fcc 	andi	r2,r2,255
   855f0:	1000191e 	bne	r2,zero,85658 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   855f4:	e0bffd17 	ldw	r2,-12(fp)
   855f8:	10800317 	ldw	r2,12(r2)
   855fc:	e0fffd17 	ldw	r3,-12(fp)
   85600:	18c00517 	ldw	r3,20(r3)
   85604:	1809883a 	mov	r4,r3
   85608:	103ee83a 	callr	r2
   8560c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   85610:	e0bfff17 	ldw	r2,-4(fp)
   85614:	1000031e 	bne	r2,zero,85624 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   85618:	e13ffd17 	ldw	r4,-12(fp)
   8561c:	00854e80 	call	854e8 <alt_alarm_stop>
   85620:	00000d06 	br	85658 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   85624:	e0bffd17 	ldw	r2,-12(fp)
   85628:	10c00217 	ldw	r3,8(r2)
   8562c:	e0bfff17 	ldw	r2,-4(fp)
   85630:	1887883a 	add	r3,r3,r2
   85634:	e0bffd17 	ldw	r2,-12(fp)
   85638:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   8563c:	e0bffd17 	ldw	r2,-12(fp)
   85640:	10c00217 	ldw	r3,8(r2)
   85644:	d0a6d217 	ldw	r2,-25784(gp)
   85648:	1880032e 	bgeu	r3,r2,85658 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   8564c:	e0bffd17 	ldw	r2,-12(fp)
   85650:	00c00044 	movi	r3,1
   85654:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   85658:	e0bffe17 	ldw	r2,-8(fp)
   8565c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   85660:	e0fffd17 	ldw	r3,-12(fp)
   85664:	d0a00904 	addi	r2,gp,-32732
   85668:	18bfcf1e 	bne	r3,r2,855a8 <rx_descriptor_end+0xfff85548>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   8566c:	0001883a 	nop
}
   85670:	e037883a 	mov	sp,fp
   85674:	dfc00117 	ldw	ra,4(sp)
   85678:	df000017 	ldw	fp,0(sp)
   8567c:	dec00204 	addi	sp,sp,8
   85680:	f800283a 	ret

00085684 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   85684:	deffff04 	addi	sp,sp,-4
   85688:	df000015 	stw	fp,0(sp)
   8568c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   85690:	000170fa 	wrctl	ienable,zero
}
   85694:	e037883a 	mov	sp,fp
   85698:	df000017 	ldw	fp,0(sp)
   8569c:	dec00104 	addi	sp,sp,4
   856a0:	f800283a 	ret

000856a4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   856a4:	defffb04 	addi	sp,sp,-20
   856a8:	dfc00415 	stw	ra,16(sp)
   856ac:	df000315 	stw	fp,12(sp)
   856b0:	df000304 	addi	fp,sp,12
   856b4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   856b8:	00800274 	movhi	r2,9
   856bc:	10a93404 	addi	r2,r2,-23344
   856c0:	10800017 	ldw	r2,0(r2)
   856c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   856c8:	00003106 	br	85790 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   856cc:	e0bffd17 	ldw	r2,-12(fp)
   856d0:	10800217 	ldw	r2,8(r2)
   856d4:	1009883a 	mov	r4,r2
   856d8:	0085bc40 	call	85bc4 <strlen>
   856dc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   856e0:	e0bffd17 	ldw	r2,-12(fp)
   856e4:	10c00217 	ldw	r3,8(r2)
   856e8:	e0bffe17 	ldw	r2,-8(fp)
   856ec:	10bfffc4 	addi	r2,r2,-1
   856f0:	1885883a 	add	r2,r3,r2
   856f4:	10800003 	ldbu	r2,0(r2)
   856f8:	10803fcc 	andi	r2,r2,255
   856fc:	1080201c 	xori	r2,r2,128
   85700:	10bfe004 	addi	r2,r2,-128
   85704:	10800bd8 	cmpnei	r2,r2,47
   85708:	1000031e 	bne	r2,zero,85718 <alt_find_file+0x74>
    {
      len -= 1;
   8570c:	e0bffe17 	ldw	r2,-8(fp)
   85710:	10bfffc4 	addi	r2,r2,-1
   85714:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   85718:	e0bffe17 	ldw	r2,-8(fp)
   8571c:	e0ffff17 	ldw	r3,-4(fp)
   85720:	1885883a 	add	r2,r3,r2
   85724:	10800003 	ldbu	r2,0(r2)
   85728:	10803fcc 	andi	r2,r2,255
   8572c:	1080201c 	xori	r2,r2,128
   85730:	10bfe004 	addi	r2,r2,-128
   85734:	10800be0 	cmpeqi	r2,r2,47
   85738:	1000081e 	bne	r2,zero,8575c <alt_find_file+0xb8>
   8573c:	e0bffe17 	ldw	r2,-8(fp)
   85740:	e0ffff17 	ldw	r3,-4(fp)
   85744:	1885883a 	add	r2,r3,r2
   85748:	10800003 	ldbu	r2,0(r2)
   8574c:	10803fcc 	andi	r2,r2,255
   85750:	1080201c 	xori	r2,r2,128
   85754:	10bfe004 	addi	r2,r2,-128
   85758:	10000a1e 	bne	r2,zero,85784 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   8575c:	e0bffd17 	ldw	r2,-12(fp)
   85760:	10c00217 	ldw	r3,8(r2)
   85764:	e0bffe17 	ldw	r2,-8(fp)
   85768:	1809883a 	mov	r4,r3
   8576c:	e17fff17 	ldw	r5,-4(fp)
   85770:	100d883a 	mov	r6,r2
   85774:	00859e00 	call	859e0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   85778:	1000021e 	bne	r2,zero,85784 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   8577c:	e0bffd17 	ldw	r2,-12(fp)
   85780:	00000806 	br	857a4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   85784:	e0bffd17 	ldw	r2,-12(fp)
   85788:	10800017 	ldw	r2,0(r2)
   8578c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   85790:	e0fffd17 	ldw	r3,-12(fp)
   85794:	00800274 	movhi	r2,9
   85798:	10a93404 	addi	r2,r2,-23344
   8579c:	18bfcb1e 	bne	r3,r2,856cc <rx_descriptor_end+0xfff8566c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   857a0:	0005883a 	mov	r2,zero
}
   857a4:	e037883a 	mov	sp,fp
   857a8:	dfc00117 	ldw	ra,4(sp)
   857ac:	df000017 	ldw	fp,0(sp)
   857b0:	dec00204 	addi	sp,sp,8
   857b4:	f800283a 	ret

000857b8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   857b8:	defffc04 	addi	sp,sp,-16
   857bc:	df000315 	stw	fp,12(sp)
   857c0:	df000304 	addi	fp,sp,12
   857c4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   857c8:	00bffa04 	movi	r2,-24
   857cc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   857d0:	e03ffd15 	stw	zero,-12(fp)
   857d4:	00001d06 	br	8584c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   857d8:	00800274 	movhi	r2,9
   857dc:	10a6c704 	addi	r2,r2,-25828
   857e0:	e0fffd17 	ldw	r3,-12(fp)
   857e4:	18c00324 	muli	r3,r3,12
   857e8:	10c5883a 	add	r2,r2,r3
   857ec:	10800017 	ldw	r2,0(r2)
   857f0:	1000131e 	bne	r2,zero,85840 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   857f4:	00800274 	movhi	r2,9
   857f8:	10a6c704 	addi	r2,r2,-25828
   857fc:	e0fffd17 	ldw	r3,-12(fp)
   85800:	18c00324 	muli	r3,r3,12
   85804:	10c5883a 	add	r2,r2,r3
   85808:	e0ffff17 	ldw	r3,-4(fp)
   8580c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   85810:	00800274 	movhi	r2,9
   85814:	10a93804 	addi	r2,r2,-23328
   85818:	10c00017 	ldw	r3,0(r2)
   8581c:	e0bffd17 	ldw	r2,-12(fp)
   85820:	1880040e 	bge	r3,r2,85834 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   85824:	00800274 	movhi	r2,9
   85828:	10a93804 	addi	r2,r2,-23328
   8582c:	e0fffd17 	ldw	r3,-12(fp)
   85830:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   85834:	e0bffd17 	ldw	r2,-12(fp)
   85838:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   8583c:	00000606 	br	85858 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   85840:	e0bffd17 	ldw	r2,-12(fp)
   85844:	10800044 	addi	r2,r2,1
   85848:	e0bffd15 	stw	r2,-12(fp)
   8584c:	e0bffd17 	ldw	r2,-12(fp)
   85850:	10800810 	cmplti	r2,r2,32
   85854:	103fe01e 	bne	r2,zero,857d8 <rx_descriptor_end+0xfff85778>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   85858:	e0bffe17 	ldw	r2,-8(fp)
}
   8585c:	e037883a 	mov	sp,fp
   85860:	df000017 	ldw	fp,0(sp)
   85864:	dec00104 	addi	sp,sp,4
   85868:	f800283a 	ret

0008586c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   8586c:	defffb04 	addi	sp,sp,-20
   85870:	df000415 	stw	fp,16(sp)
   85874:	df000404 	addi	fp,sp,16
   85878:	e13ffe15 	stw	r4,-8(fp)
   8587c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   85880:	e0bfff17 	ldw	r2,-4(fp)
   85884:	10840070 	cmpltui	r2,r2,4097
   85888:	1000021e 	bne	r2,zero,85894 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   8588c:	00840004 	movi	r2,4096
   85890:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   85894:	e0fffe17 	ldw	r3,-8(fp)
   85898:	e0bfff17 	ldw	r2,-4(fp)
   8589c:	1885883a 	add	r2,r3,r2
   858a0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   858a4:	e0bffe17 	ldw	r2,-8(fp)
   858a8:	e0bffc15 	stw	r2,-16(fp)
   858ac:	00000506 	br	858c4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   858b0:	e0bffc17 	ldw	r2,-16(fp)
   858b4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   858b8:	e0bffc17 	ldw	r2,-16(fp)
   858bc:	10800804 	addi	r2,r2,32
   858c0:	e0bffc15 	stw	r2,-16(fp)
   858c4:	e0fffc17 	ldw	r3,-16(fp)
   858c8:	e0bffd17 	ldw	r2,-12(fp)
   858cc:	18bff836 	bltu	r3,r2,858b0 <rx_descriptor_end+0xfff85850>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   858d0:	e0bffe17 	ldw	r2,-8(fp)
   858d4:	108007cc 	andi	r2,r2,31
   858d8:	10000226 	beq	r2,zero,858e4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   858dc:	e0bffc17 	ldw	r2,-16(fp)
   858e0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   858e4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   858e8:	e037883a 	mov	sp,fp
   858ec:	df000017 	ldw	fp,0(sp)
   858f0:	dec00104 	addi	sp,sp,4
   858f4:	f800283a 	ret

000858f8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   858f8:	defffe04 	addi	sp,sp,-8
   858fc:	df000115 	stw	fp,4(sp)
   85900:	df000104 	addi	fp,sp,4
   85904:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   85908:	e0bfff17 	ldw	r2,-4(fp)
   8590c:	10bffe84 	addi	r2,r2,-6
   85910:	10c00428 	cmpgeui	r3,r2,16
   85914:	18001a1e 	bne	r3,zero,85980 <alt_exception_cause_generated_bad_addr+0x88>
   85918:	100690ba 	slli	r3,r2,2
   8591c:	00800234 	movhi	r2,8
   85920:	10964c04 	addi	r2,r2,22832
   85924:	1885883a 	add	r2,r3,r2
   85928:	10800017 	ldw	r2,0(r2)
   8592c:	1000683a 	jmp	r2
   85930:	00085970 	cmpltui	zero,zero,8549
   85934:	00085970 	cmpltui	zero,zero,8549
   85938:	00085980 	call	8598 <__reset-0x77a68>
   8593c:	00085980 	call	8598 <__reset-0x77a68>
   85940:	00085980 	call	8598 <__reset-0x77a68>
   85944:	00085970 	cmpltui	zero,zero,8549
   85948:	00085978 	rdprs	zero,zero,8549
   8594c:	00085980 	call	8598 <__reset-0x77a68>
   85950:	00085970 	cmpltui	zero,zero,8549
   85954:	00085970 	cmpltui	zero,zero,8549
   85958:	00085980 	call	8598 <__reset-0x77a68>
   8595c:	00085970 	cmpltui	zero,zero,8549
   85960:	00085978 	rdprs	zero,zero,8549
   85964:	00085980 	call	8598 <__reset-0x77a68>
   85968:	00085980 	call	8598 <__reset-0x77a68>
   8596c:	00085970 	cmpltui	zero,zero,8549
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   85970:	00800044 	movi	r2,1
   85974:	00000306 	br	85984 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   85978:	0005883a 	mov	r2,zero
   8597c:	00000106 	br	85984 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   85980:	0005883a 	mov	r2,zero
  }
}
   85984:	e037883a 	mov	sp,fp
   85988:	df000017 	ldw	fp,0(sp)
   8598c:	dec00104 	addi	sp,sp,4
   85990:	f800283a 	ret

00085994 <atexit>:
   85994:	200b883a 	mov	r5,r4
   85998:	000d883a 	mov	r6,zero
   8599c:	0009883a 	mov	r4,zero
   859a0:	000f883a 	mov	r7,zero
   859a4:	0085efc1 	jmpi	85efc <__register_exitproc>

000859a8 <exit>:
   859a8:	defffe04 	addi	sp,sp,-8
   859ac:	000b883a 	mov	r5,zero
   859b0:	dc000015 	stw	r16,0(sp)
   859b4:	dfc00115 	stw	ra,4(sp)
   859b8:	2021883a 	mov	r16,r4
   859bc:	00860100 	call	86010 <__call_exitprocs>
   859c0:	00800274 	movhi	r2,9
   859c4:	10a93d04 	addi	r2,r2,-23308
   859c8:	11000017 	ldw	r4,0(r2)
   859cc:	20800f17 	ldw	r2,60(r4)
   859d0:	10000126 	beq	r2,zero,859d8 <exit+0x30>
   859d4:	103ee83a 	callr	r2
   859d8:	8009883a 	mov	r4,r16
   859dc:	0087b380 	call	87b38 <_exit>

000859e0 <memcmp>:
   859e0:	01c000c4 	movi	r7,3
   859e4:	3980192e 	bgeu	r7,r6,85a4c <memcmp+0x6c>
   859e8:	2144b03a 	or	r2,r4,r5
   859ec:	11c4703a 	and	r2,r2,r7
   859f0:	10000f26 	beq	r2,zero,85a30 <memcmp+0x50>
   859f4:	20800003 	ldbu	r2,0(r4)
   859f8:	28c00003 	ldbu	r3,0(r5)
   859fc:	10c0151e 	bne	r2,r3,85a54 <memcmp+0x74>
   85a00:	31bfff84 	addi	r6,r6,-2
   85a04:	01ffffc4 	movi	r7,-1
   85a08:	00000406 	br	85a1c <memcmp+0x3c>
   85a0c:	20800003 	ldbu	r2,0(r4)
   85a10:	28c00003 	ldbu	r3,0(r5)
   85a14:	31bfffc4 	addi	r6,r6,-1
   85a18:	10c00e1e 	bne	r2,r3,85a54 <memcmp+0x74>
   85a1c:	21000044 	addi	r4,r4,1
   85a20:	29400044 	addi	r5,r5,1
   85a24:	31fff91e 	bne	r6,r7,85a0c <rx_descriptor_end+0xfff859ac>
   85a28:	0005883a 	mov	r2,zero
   85a2c:	f800283a 	ret
   85a30:	20c00017 	ldw	r3,0(r4)
   85a34:	28800017 	ldw	r2,0(r5)
   85a38:	1880041e 	bne	r3,r2,85a4c <memcmp+0x6c>
   85a3c:	31bfff04 	addi	r6,r6,-4
   85a40:	21000104 	addi	r4,r4,4
   85a44:	29400104 	addi	r5,r5,4
   85a48:	39bff936 	bltu	r7,r6,85a30 <rx_descriptor_end+0xfff859d0>
   85a4c:	303fe91e 	bne	r6,zero,859f4 <rx_descriptor_end+0xfff85994>
   85a50:	003ff506 	br	85a28 <rx_descriptor_end+0xfff859c8>
   85a54:	10c5c83a 	sub	r2,r2,r3
   85a58:	f800283a 	ret

00085a5c <_putc_r>:
   85a5c:	defffc04 	addi	sp,sp,-16
   85a60:	dc000215 	stw	r16,8(sp)
   85a64:	dfc00315 	stw	ra,12(sp)
   85a68:	2021883a 	mov	r16,r4
   85a6c:	20000226 	beq	r4,zero,85a78 <_putc_r+0x1c>
   85a70:	20800e17 	ldw	r2,56(r4)
   85a74:	10001b26 	beq	r2,zero,85ae4 <_putc_r+0x88>
   85a78:	30800217 	ldw	r2,8(r6)
   85a7c:	10bfffc4 	addi	r2,r2,-1
   85a80:	30800215 	stw	r2,8(r6)
   85a84:	10000a16 	blt	r2,zero,85ab0 <_putc_r+0x54>
   85a88:	30800017 	ldw	r2,0(r6)
   85a8c:	11400005 	stb	r5,0(r2)
   85a90:	30800017 	ldw	r2,0(r6)
   85a94:	10c00044 	addi	r3,r2,1
   85a98:	30c00015 	stw	r3,0(r6)
   85a9c:	10800003 	ldbu	r2,0(r2)
   85aa0:	dfc00317 	ldw	ra,12(sp)
   85aa4:	dc000217 	ldw	r16,8(sp)
   85aa8:	dec00404 	addi	sp,sp,16
   85aac:	f800283a 	ret
   85ab0:	30c00617 	ldw	r3,24(r6)
   85ab4:	10c00616 	blt	r2,r3,85ad0 <_putc_r+0x74>
   85ab8:	30800017 	ldw	r2,0(r6)
   85abc:	00c00284 	movi	r3,10
   85ac0:	11400005 	stb	r5,0(r2)
   85ac4:	30800017 	ldw	r2,0(r6)
   85ac8:	11400003 	ldbu	r5,0(r2)
   85acc:	28fff11e 	bne	r5,r3,85a94 <rx_descriptor_end+0xfff85a34>
   85ad0:	8009883a 	mov	r4,r16
   85ad4:	dfc00317 	ldw	ra,12(sp)
   85ad8:	dc000217 	ldw	r16,8(sp)
   85adc:	dec00404 	addi	sp,sp,16
   85ae0:	0085c5c1 	jmpi	85c5c <__swbuf_r>
   85ae4:	d9400015 	stw	r5,0(sp)
   85ae8:	d9800115 	stw	r6,4(sp)
   85aec:	008674c0 	call	8674c <__sinit>
   85af0:	d9800117 	ldw	r6,4(sp)
   85af4:	d9400017 	ldw	r5,0(sp)
   85af8:	003fdf06 	br	85a78 <rx_descriptor_end+0xfff85a18>

00085afc <putc>:
   85afc:	defffc04 	addi	sp,sp,-16
   85b00:	dc400115 	stw	r17,4(sp)
   85b04:	04400274 	movhi	r17,9
   85b08:	8c693e04 	addi	r17,r17,-23304
   85b0c:	dc800215 	stw	r18,8(sp)
   85b10:	2025883a 	mov	r18,r4
   85b14:	89000017 	ldw	r4,0(r17)
   85b18:	dc000015 	stw	r16,0(sp)
   85b1c:	dfc00315 	stw	ra,12(sp)
   85b20:	2821883a 	mov	r16,r5
   85b24:	20000226 	beq	r4,zero,85b30 <putc+0x34>
   85b28:	20c00e17 	ldw	r3,56(r4)
   85b2c:	18001a26 	beq	r3,zero,85b98 <putc+0x9c>
   85b30:	80800217 	ldw	r2,8(r16)
   85b34:	10bfffc4 	addi	r2,r2,-1
   85b38:	80800215 	stw	r2,8(r16)
   85b3c:	10000c16 	blt	r2,zero,85b70 <putc+0x74>
   85b40:	80800017 	ldw	r2,0(r16)
   85b44:	14800005 	stb	r18,0(r2)
   85b48:	80800017 	ldw	r2,0(r16)
   85b4c:	10c00044 	addi	r3,r2,1
   85b50:	80c00015 	stw	r3,0(r16)
   85b54:	10800003 	ldbu	r2,0(r2)
   85b58:	dfc00317 	ldw	ra,12(sp)
   85b5c:	dc800217 	ldw	r18,8(sp)
   85b60:	dc400117 	ldw	r17,4(sp)
   85b64:	dc000017 	ldw	r16,0(sp)
   85b68:	dec00404 	addi	sp,sp,16
   85b6c:	f800283a 	ret
   85b70:	80c00617 	ldw	r3,24(r16)
   85b74:	10c00a16 	blt	r2,r3,85ba0 <putc+0xa4>
   85b78:	80800017 	ldw	r2,0(r16)
   85b7c:	00c00284 	movi	r3,10
   85b80:	14800005 	stb	r18,0(r2)
   85b84:	80800017 	ldw	r2,0(r16)
   85b88:	11400003 	ldbu	r5,0(r2)
   85b8c:	28ffef1e 	bne	r5,r3,85b4c <rx_descriptor_end+0xfff85aec>
   85b90:	89000017 	ldw	r4,0(r17)
   85b94:	00000406 	br	85ba8 <putc+0xac>
   85b98:	008674c0 	call	8674c <__sinit>
   85b9c:	003fe406 	br	85b30 <rx_descriptor_end+0xfff85ad0>
   85ba0:	89000017 	ldw	r4,0(r17)
   85ba4:	900b883a 	mov	r5,r18
   85ba8:	800d883a 	mov	r6,r16
   85bac:	dfc00317 	ldw	ra,12(sp)
   85bb0:	dc800217 	ldw	r18,8(sp)
   85bb4:	dc400117 	ldw	r17,4(sp)
   85bb8:	dc000017 	ldw	r16,0(sp)
   85bbc:	dec00404 	addi	sp,sp,16
   85bc0:	0085c5c1 	jmpi	85c5c <__swbuf_r>

00085bc4 <strlen>:
   85bc4:	208000cc 	andi	r2,r4,3
   85bc8:	10002026 	beq	r2,zero,85c4c <strlen+0x88>
   85bcc:	20800007 	ldb	r2,0(r4)
   85bd0:	10002026 	beq	r2,zero,85c54 <strlen+0x90>
   85bd4:	2005883a 	mov	r2,r4
   85bd8:	00000206 	br	85be4 <strlen+0x20>
   85bdc:	10c00007 	ldb	r3,0(r2)
   85be0:	18001826 	beq	r3,zero,85c44 <strlen+0x80>
   85be4:	10800044 	addi	r2,r2,1
   85be8:	10c000cc 	andi	r3,r2,3
   85bec:	183ffb1e 	bne	r3,zero,85bdc <rx_descriptor_end+0xfff85b7c>
   85bf0:	10c00017 	ldw	r3,0(r2)
   85bf4:	01ffbff4 	movhi	r7,65279
   85bf8:	39ffbfc4 	addi	r7,r7,-257
   85bfc:	00ca303a 	nor	r5,zero,r3
   85c00:	01a02074 	movhi	r6,32897
   85c04:	19c7883a 	add	r3,r3,r7
   85c08:	31a02004 	addi	r6,r6,-32640
   85c0c:	1946703a 	and	r3,r3,r5
   85c10:	1986703a 	and	r3,r3,r6
   85c14:	1800091e 	bne	r3,zero,85c3c <strlen+0x78>
   85c18:	10800104 	addi	r2,r2,4
   85c1c:	10c00017 	ldw	r3,0(r2)
   85c20:	19cb883a 	add	r5,r3,r7
   85c24:	00c6303a 	nor	r3,zero,r3
   85c28:	28c6703a 	and	r3,r5,r3
   85c2c:	1986703a 	and	r3,r3,r6
   85c30:	183ff926 	beq	r3,zero,85c18 <rx_descriptor_end+0xfff85bb8>
   85c34:	00000106 	br	85c3c <strlen+0x78>
   85c38:	10800044 	addi	r2,r2,1
   85c3c:	10c00007 	ldb	r3,0(r2)
   85c40:	183ffd1e 	bne	r3,zero,85c38 <rx_descriptor_end+0xfff85bd8>
   85c44:	1105c83a 	sub	r2,r2,r4
   85c48:	f800283a 	ret
   85c4c:	2005883a 	mov	r2,r4
   85c50:	003fe706 	br	85bf0 <rx_descriptor_end+0xfff85b90>
   85c54:	0005883a 	mov	r2,zero
   85c58:	f800283a 	ret

00085c5c <__swbuf_r>:
   85c5c:	defffc04 	addi	sp,sp,-16
   85c60:	dc800215 	stw	r18,8(sp)
   85c64:	dc400115 	stw	r17,4(sp)
   85c68:	dc000015 	stw	r16,0(sp)
   85c6c:	dfc00315 	stw	ra,12(sp)
   85c70:	2025883a 	mov	r18,r4
   85c74:	2823883a 	mov	r17,r5
   85c78:	3021883a 	mov	r16,r6
   85c7c:	20000226 	beq	r4,zero,85c88 <__swbuf_r+0x2c>
   85c80:	20800e17 	ldw	r2,56(r4)
   85c84:	10004126 	beq	r2,zero,85d8c <__swbuf_r+0x130>
   85c88:	80c00617 	ldw	r3,24(r16)
   85c8c:	8180030b 	ldhu	r6,12(r16)
   85c90:	80c00215 	stw	r3,8(r16)
   85c94:	30c0020c 	andi	r3,r6,8
   85c98:	18003526 	beq	r3,zero,85d70 <__swbuf_r+0x114>
   85c9c:	80c00417 	ldw	r3,16(r16)
   85ca0:	18003326 	beq	r3,zero,85d70 <__swbuf_r+0x114>
   85ca4:	3088000c 	andi	r2,r6,8192
   85ca8:	8c403fcc 	andi	r17,r17,255
   85cac:	10001726 	beq	r2,zero,85d0c <__swbuf_r+0xb0>
   85cb0:	80800017 	ldw	r2,0(r16)
   85cb4:	81000517 	ldw	r4,20(r16)
   85cb8:	10c7c83a 	sub	r3,r2,r3
   85cbc:	19001d0e 	bge	r3,r4,85d34 <__swbuf_r+0xd8>
   85cc0:	18c00044 	addi	r3,r3,1
   85cc4:	81400217 	ldw	r5,8(r16)
   85cc8:	11000044 	addi	r4,r2,1
   85ccc:	81000015 	stw	r4,0(r16)
   85cd0:	297fffc4 	addi	r5,r5,-1
   85cd4:	81400215 	stw	r5,8(r16)
   85cd8:	14400005 	stb	r17,0(r2)
   85cdc:	80800517 	ldw	r2,20(r16)
   85ce0:	10c01d26 	beq	r2,r3,85d58 <__swbuf_r+0xfc>
   85ce4:	8080030b 	ldhu	r2,12(r16)
   85ce8:	1080004c 	andi	r2,r2,1
   85cec:	1000181e 	bne	r2,zero,85d50 <__swbuf_r+0xf4>
   85cf0:	8805883a 	mov	r2,r17
   85cf4:	dfc00317 	ldw	ra,12(sp)
   85cf8:	dc800217 	ldw	r18,8(sp)
   85cfc:	dc400117 	ldw	r17,4(sp)
   85d00:	dc000017 	ldw	r16,0(sp)
   85d04:	dec00404 	addi	sp,sp,16
   85d08:	f800283a 	ret
   85d0c:	81001917 	ldw	r4,100(r16)
   85d10:	00b7ffc4 	movi	r2,-8193
   85d14:	31880014 	ori	r6,r6,8192
   85d18:	2084703a 	and	r2,r4,r2
   85d1c:	80801915 	stw	r2,100(r16)
   85d20:	80800017 	ldw	r2,0(r16)
   85d24:	81000517 	ldw	r4,20(r16)
   85d28:	8180030d 	sth	r6,12(r16)
   85d2c:	10c7c83a 	sub	r3,r2,r3
   85d30:	193fe316 	blt	r3,r4,85cc0 <rx_descriptor_end+0xfff85c60>
   85d34:	9009883a 	mov	r4,r18
   85d38:	800b883a 	mov	r5,r16
   85d3c:	00861a40 	call	861a4 <_fflush_r>
   85d40:	1000091e 	bne	r2,zero,85d68 <__swbuf_r+0x10c>
   85d44:	80800017 	ldw	r2,0(r16)
   85d48:	00c00044 	movi	r3,1
   85d4c:	003fdd06 	br	85cc4 <rx_descriptor_end+0xfff85c64>
   85d50:	00800284 	movi	r2,10
   85d54:	88bfe61e 	bne	r17,r2,85cf0 <rx_descriptor_end+0xfff85c90>
   85d58:	9009883a 	mov	r4,r18
   85d5c:	800b883a 	mov	r5,r16
   85d60:	00861a40 	call	861a4 <_fflush_r>
   85d64:	103fe226 	beq	r2,zero,85cf0 <rx_descriptor_end+0xfff85c90>
   85d68:	00bfffc4 	movi	r2,-1
   85d6c:	003fe106 	br	85cf4 <rx_descriptor_end+0xfff85c94>
   85d70:	9009883a 	mov	r4,r18
   85d74:	800b883a 	mov	r5,r16
   85d78:	0085dcc0 	call	85dcc <__swsetup_r>
   85d7c:	1000051e 	bne	r2,zero,85d94 <__swbuf_r+0x138>
   85d80:	8180030b 	ldhu	r6,12(r16)
   85d84:	80c00417 	ldw	r3,16(r16)
   85d88:	003fc606 	br	85ca4 <rx_descriptor_end+0xfff85c44>
   85d8c:	008674c0 	call	8674c <__sinit>
   85d90:	003fbd06 	br	85c88 <rx_descriptor_end+0xfff85c28>
   85d94:	80c0030b 	ldhu	r3,12(r16)
   85d98:	00bfffc4 	movi	r2,-1
   85d9c:	18c01014 	ori	r3,r3,64
   85da0:	80c0030d 	sth	r3,12(r16)
   85da4:	00c00244 	movi	r3,9
   85da8:	90c00015 	stw	r3,0(r18)
   85dac:	003fd106 	br	85cf4 <rx_descriptor_end+0xfff85c94>

00085db0 <__swbuf>:
   85db0:	00c00274 	movhi	r3,9
   85db4:	18e93e04 	addi	r3,r3,-23304
   85db8:	2005883a 	mov	r2,r4
   85dbc:	19000017 	ldw	r4,0(r3)
   85dc0:	280d883a 	mov	r6,r5
   85dc4:	100b883a 	mov	r5,r2
   85dc8:	0085c5c1 	jmpi	85c5c <__swbuf_r>

00085dcc <__swsetup_r>:
   85dcc:	00800274 	movhi	r2,9
   85dd0:	defffd04 	addi	sp,sp,-12
   85dd4:	10a93e04 	addi	r2,r2,-23304
   85dd8:	dc400115 	stw	r17,4(sp)
   85ddc:	2023883a 	mov	r17,r4
   85de0:	11000017 	ldw	r4,0(r2)
   85de4:	dc000015 	stw	r16,0(sp)
   85de8:	dfc00215 	stw	ra,8(sp)
   85dec:	2821883a 	mov	r16,r5
   85df0:	20000226 	beq	r4,zero,85dfc <__swsetup_r+0x30>
   85df4:	20c00e17 	ldw	r3,56(r4)
   85df8:	18002e26 	beq	r3,zero,85eb4 <__swsetup_r+0xe8>
   85dfc:	8080030b 	ldhu	r2,12(r16)
   85e00:	10c0020c 	andi	r3,r2,8
   85e04:	100d883a 	mov	r6,r2
   85e08:	18000f26 	beq	r3,zero,85e48 <__swsetup_r+0x7c>
   85e0c:	80c00417 	ldw	r3,16(r16)
   85e10:	18001526 	beq	r3,zero,85e68 <__swsetup_r+0x9c>
   85e14:	1100004c 	andi	r4,r2,1
   85e18:	20001c1e 	bne	r4,zero,85e8c <__swsetup_r+0xc0>
   85e1c:	1080008c 	andi	r2,r2,2
   85e20:	1000261e 	bne	r2,zero,85ebc <__swsetup_r+0xf0>
   85e24:	80800517 	ldw	r2,20(r16)
   85e28:	80800215 	stw	r2,8(r16)
   85e2c:	18001c26 	beq	r3,zero,85ea0 <__swsetup_r+0xd4>
   85e30:	0005883a 	mov	r2,zero
   85e34:	dfc00217 	ldw	ra,8(sp)
   85e38:	dc400117 	ldw	r17,4(sp)
   85e3c:	dc000017 	ldw	r16,0(sp)
   85e40:	dec00304 	addi	sp,sp,12
   85e44:	f800283a 	ret
   85e48:	3080040c 	andi	r2,r6,16
   85e4c:	10001726 	beq	r2,zero,85eac <__swsetup_r+0xe0>
   85e50:	3080010c 	andi	r2,r6,4
   85e54:	10001b1e 	bne	r2,zero,85ec4 <__swsetup_r+0xf8>
   85e58:	80c00417 	ldw	r3,16(r16)
   85e5c:	30800214 	ori	r2,r6,8
   85e60:	8080030d 	sth	r2,12(r16)
   85e64:	183feb1e 	bne	r3,zero,85e14 <rx_descriptor_end+0xfff85db4>
   85e68:	1140a00c 	andi	r5,r2,640
   85e6c:	01008004 	movi	r4,512
   85e70:	293fe826 	beq	r5,r4,85e14 <rx_descriptor_end+0xfff85db4>
   85e74:	8809883a 	mov	r4,r17
   85e78:	800b883a 	mov	r5,r16
   85e7c:	0086d200 	call	86d20 <__smakebuf_r>
   85e80:	8080030b 	ldhu	r2,12(r16)
   85e84:	80c00417 	ldw	r3,16(r16)
   85e88:	003fe206 	br	85e14 <rx_descriptor_end+0xfff85db4>
   85e8c:	80800517 	ldw	r2,20(r16)
   85e90:	80000215 	stw	zero,8(r16)
   85e94:	0085c83a 	sub	r2,zero,r2
   85e98:	80800615 	stw	r2,24(r16)
   85e9c:	183fe41e 	bne	r3,zero,85e30 <rx_descriptor_end+0xfff85dd0>
   85ea0:	8080030b 	ldhu	r2,12(r16)
   85ea4:	1080200c 	andi	r2,r2,128
   85ea8:	103fe226 	beq	r2,zero,85e34 <rx_descriptor_end+0xfff85dd4>
   85eac:	00bfffc4 	movi	r2,-1
   85eb0:	003fe006 	br	85e34 <rx_descriptor_end+0xfff85dd4>
   85eb4:	008674c0 	call	8674c <__sinit>
   85eb8:	003fd006 	br	85dfc <rx_descriptor_end+0xfff85d9c>
   85ebc:	0005883a 	mov	r2,zero
   85ec0:	003fd906 	br	85e28 <rx_descriptor_end+0xfff85dc8>
   85ec4:	81400c17 	ldw	r5,48(r16)
   85ec8:	28000626 	beq	r5,zero,85ee4 <__swsetup_r+0x118>
   85ecc:	80801004 	addi	r2,r16,64
   85ed0:	28800326 	beq	r5,r2,85ee0 <__swsetup_r+0x114>
   85ed4:	8809883a 	mov	r4,r17
   85ed8:	00868c00 	call	868c0 <_free_r>
   85edc:	8180030b 	ldhu	r6,12(r16)
   85ee0:	80000c15 	stw	zero,48(r16)
   85ee4:	80c00417 	ldw	r3,16(r16)
   85ee8:	00bff6c4 	movi	r2,-37
   85eec:	118c703a 	and	r6,r2,r6
   85ef0:	80000115 	stw	zero,4(r16)
   85ef4:	80c00015 	stw	r3,0(r16)
   85ef8:	003fd806 	br	85e5c <rx_descriptor_end+0xfff85dfc>

00085efc <__register_exitproc>:
   85efc:	00800274 	movhi	r2,9
   85f00:	defffa04 	addi	sp,sp,-24
   85f04:	10a93d04 	addi	r2,r2,-23308
   85f08:	dc000315 	stw	r16,12(sp)
   85f0c:	14000017 	ldw	r16,0(r2)
   85f10:	dc400415 	stw	r17,16(sp)
   85f14:	dfc00515 	stw	ra,20(sp)
   85f18:	80805217 	ldw	r2,328(r16)
   85f1c:	2023883a 	mov	r17,r4
   85f20:	10003626 	beq	r2,zero,85ffc <__register_exitproc+0x100>
   85f24:	10c00117 	ldw	r3,4(r2)
   85f28:	010007c4 	movi	r4,31
   85f2c:	20c00e16 	blt	r4,r3,85f68 <__register_exitproc+0x6c>
   85f30:	1a400044 	addi	r9,r3,1
   85f34:	8800211e 	bne	r17,zero,85fbc <__register_exitproc+0xc0>
   85f38:	18c00084 	addi	r3,r3,2
   85f3c:	18c7883a 	add	r3,r3,r3
   85f40:	18c7883a 	add	r3,r3,r3
   85f44:	12400115 	stw	r9,4(r2)
   85f48:	10c7883a 	add	r3,r2,r3
   85f4c:	19400015 	stw	r5,0(r3)
   85f50:	0005883a 	mov	r2,zero
   85f54:	dfc00517 	ldw	ra,20(sp)
   85f58:	dc400417 	ldw	r17,16(sp)
   85f5c:	dc000317 	ldw	r16,12(sp)
   85f60:	dec00604 	addi	sp,sp,24
   85f64:	f800283a 	ret
   85f68:	00800034 	movhi	r2,0
   85f6c:	10800004 	addi	r2,r2,0
   85f70:	10002526 	beq	r2,zero,86008 <__register_exitproc+0x10c>
   85f74:	01006404 	movi	r4,400
   85f78:	d9400015 	stw	r5,0(sp)
   85f7c:	d9800115 	stw	r6,4(sp)
   85f80:	d9c00215 	stw	r7,8(sp)
   85f84:	00000000 	call	0 <__reset-0x80000>
   85f88:	d9400017 	ldw	r5,0(sp)
   85f8c:	d9800117 	ldw	r6,4(sp)
   85f90:	d9c00217 	ldw	r7,8(sp)
   85f94:	10001c26 	beq	r2,zero,86008 <__register_exitproc+0x10c>
   85f98:	80c05217 	ldw	r3,328(r16)
   85f9c:	10000115 	stw	zero,4(r2)
   85fa0:	02400044 	movi	r9,1
   85fa4:	10c00015 	stw	r3,0(r2)
   85fa8:	80805215 	stw	r2,328(r16)
   85fac:	10006215 	stw	zero,392(r2)
   85fb0:	10006315 	stw	zero,396(r2)
   85fb4:	0007883a 	mov	r3,zero
   85fb8:	883fdf26 	beq	r17,zero,85f38 <rx_descriptor_end+0xfff85ed8>
   85fbc:	18d1883a 	add	r8,r3,r3
   85fc0:	4211883a 	add	r8,r8,r8
   85fc4:	1211883a 	add	r8,r2,r8
   85fc8:	41802215 	stw	r6,136(r8)
   85fcc:	01000044 	movi	r4,1
   85fd0:	11806217 	ldw	r6,392(r2)
   85fd4:	20c8983a 	sll	r4,r4,r3
   85fd8:	310cb03a 	or	r6,r6,r4
   85fdc:	11806215 	stw	r6,392(r2)
   85fe0:	41c04215 	stw	r7,264(r8)
   85fe4:	01800084 	movi	r6,2
   85fe8:	89bfd31e 	bne	r17,r6,85f38 <rx_descriptor_end+0xfff85ed8>
   85fec:	11806317 	ldw	r6,396(r2)
   85ff0:	3108b03a 	or	r4,r6,r4
   85ff4:	11006315 	stw	r4,396(r2)
   85ff8:	003fcf06 	br	85f38 <rx_descriptor_end+0xfff85ed8>
   85ffc:	80805304 	addi	r2,r16,332
   86000:	80805215 	stw	r2,328(r16)
   86004:	003fc706 	br	85f24 <rx_descriptor_end+0xfff85ec4>
   86008:	00bfffc4 	movi	r2,-1
   8600c:	003fd106 	br	85f54 <rx_descriptor_end+0xfff85ef4>

00086010 <__call_exitprocs>:
   86010:	00800274 	movhi	r2,9
   86014:	10a93d04 	addi	r2,r2,-23308
   86018:	10800017 	ldw	r2,0(r2)
   8601c:	defff404 	addi	sp,sp,-48
   86020:	dd800815 	stw	r22,32(sp)
   86024:	d8800015 	stw	r2,0(sp)
   86028:	10805204 	addi	r2,r2,328
   8602c:	dd000615 	stw	r20,24(sp)
   86030:	dc800415 	stw	r18,16(sp)
   86034:	dfc00b15 	stw	ra,44(sp)
   86038:	df000a15 	stw	fp,40(sp)
   8603c:	ddc00915 	stw	r23,36(sp)
   86040:	dd400715 	stw	r21,28(sp)
   86044:	dcc00515 	stw	r19,20(sp)
   86048:	dc400315 	stw	r17,12(sp)
   8604c:	dc000215 	stw	r16,8(sp)
   86050:	2025883a 	mov	r18,r4
   86054:	2829883a 	mov	r20,r5
   86058:	d8800115 	stw	r2,4(sp)
   8605c:	05bfffc4 	movi	r22,-1
   86060:	d8800017 	ldw	r2,0(sp)
   86064:	14c05217 	ldw	r19,328(r2)
   86068:	98001d26 	beq	r19,zero,860e0 <__call_exitprocs+0xd0>
   8606c:	dd400117 	ldw	r21,4(sp)
   86070:	98800117 	ldw	r2,4(r19)
   86074:	173fffc4 	addi	fp,r2,-1
   86078:	e0000d16 	blt	fp,zero,860b0 <__call_exitprocs+0xa0>
   8607c:	14000044 	addi	r16,r2,1
   86080:	8421883a 	add	r16,r16,r16
   86084:	8421883a 	add	r16,r16,r16
   86088:	84402004 	addi	r17,r16,128
   8608c:	9c63883a 	add	r17,r19,r17
   86090:	9c21883a 	add	r16,r19,r16
   86094:	a0001e26 	beq	r20,zero,86110 <__call_exitprocs+0x100>
   86098:	80804017 	ldw	r2,256(r16)
   8609c:	15001c26 	beq	r2,r20,86110 <__call_exitprocs+0x100>
   860a0:	e73fffc4 	addi	fp,fp,-1
   860a4:	843fff04 	addi	r16,r16,-4
   860a8:	8c7fff04 	addi	r17,r17,-4
   860ac:	e5bff91e 	bne	fp,r22,86094 <rx_descriptor_end+0xfff86034>
   860b0:	00800034 	movhi	r2,0
   860b4:	10800004 	addi	r2,r2,0
   860b8:	10000926 	beq	r2,zero,860e0 <__call_exitprocs+0xd0>
   860bc:	98800117 	ldw	r2,4(r19)
   860c0:	1000311e 	bne	r2,zero,86188 <__call_exitprocs+0x178>
   860c4:	98800017 	ldw	r2,0(r19)
   860c8:	10003426 	beq	r2,zero,8619c <__call_exitprocs+0x18c>
   860cc:	9809883a 	mov	r4,r19
   860d0:	a8800015 	stw	r2,0(r21)
   860d4:	00000000 	call	0 <__reset-0x80000>
   860d8:	acc00017 	ldw	r19,0(r21)
   860dc:	983fe41e 	bne	r19,zero,86070 <rx_descriptor_end+0xfff86010>
   860e0:	dfc00b17 	ldw	ra,44(sp)
   860e4:	df000a17 	ldw	fp,40(sp)
   860e8:	ddc00917 	ldw	r23,36(sp)
   860ec:	dd800817 	ldw	r22,32(sp)
   860f0:	dd400717 	ldw	r21,28(sp)
   860f4:	dd000617 	ldw	r20,24(sp)
   860f8:	dcc00517 	ldw	r19,20(sp)
   860fc:	dc800417 	ldw	r18,16(sp)
   86100:	dc400317 	ldw	r17,12(sp)
   86104:	dc000217 	ldw	r16,8(sp)
   86108:	dec00c04 	addi	sp,sp,48
   8610c:	f800283a 	ret
   86110:	98800117 	ldw	r2,4(r19)
   86114:	80c00017 	ldw	r3,0(r16)
   86118:	10bfffc4 	addi	r2,r2,-1
   8611c:	17001526 	beq	r2,fp,86174 <__call_exitprocs+0x164>
   86120:	80000015 	stw	zero,0(r16)
   86124:	183fde26 	beq	r3,zero,860a0 <rx_descriptor_end+0xfff86040>
   86128:	00800044 	movi	r2,1
   8612c:	1708983a 	sll	r4,r2,fp
   86130:	98806217 	ldw	r2,392(r19)
   86134:	9dc00117 	ldw	r23,4(r19)
   86138:	2084703a 	and	r2,r4,r2
   8613c:	1000061e 	bne	r2,zero,86158 <__call_exitprocs+0x148>
   86140:	183ee83a 	callr	r3
   86144:	98800117 	ldw	r2,4(r19)
   86148:	15ffc51e 	bne	r2,r23,86060 <rx_descriptor_end+0xfff86000>
   8614c:	a8800017 	ldw	r2,0(r21)
   86150:	14ffd326 	beq	r2,r19,860a0 <rx_descriptor_end+0xfff86040>
   86154:	003fc206 	br	86060 <rx_descriptor_end+0xfff86000>
   86158:	98806317 	ldw	r2,396(r19)
   8615c:	2084703a 	and	r2,r4,r2
   86160:	1000061e 	bne	r2,zero,8617c <__call_exitprocs+0x16c>
   86164:	89400017 	ldw	r5,0(r17)
   86168:	9009883a 	mov	r4,r18
   8616c:	183ee83a 	callr	r3
   86170:	003ff406 	br	86144 <rx_descriptor_end+0xfff860e4>
   86174:	9f000115 	stw	fp,4(r19)
   86178:	003fea06 	br	86124 <rx_descriptor_end+0xfff860c4>
   8617c:	89000017 	ldw	r4,0(r17)
   86180:	183ee83a 	callr	r3
   86184:	003fef06 	br	86144 <rx_descriptor_end+0xfff860e4>
   86188:	98800017 	ldw	r2,0(r19)
   8618c:	982b883a 	mov	r21,r19
   86190:	1027883a 	mov	r19,r2
   86194:	983fb61e 	bne	r19,zero,86070 <rx_descriptor_end+0xfff86010>
   86198:	003fd106 	br	860e0 <rx_descriptor_end+0xfff86080>
   8619c:	0005883a 	mov	r2,zero
   861a0:	003ffa06 	br	8618c <rx_descriptor_end+0xfff8612c>

000861a4 <_fflush_r>:
   861a4:	defffb04 	addi	sp,sp,-20
   861a8:	dcc00315 	stw	r19,12(sp)
   861ac:	dc000015 	stw	r16,0(sp)
   861b0:	dfc00415 	stw	ra,16(sp)
   861b4:	dc800215 	stw	r18,8(sp)
   861b8:	dc400115 	stw	r17,4(sp)
   861bc:	2027883a 	mov	r19,r4
   861c0:	2821883a 	mov	r16,r5
   861c4:	20000226 	beq	r4,zero,861d0 <_fflush_r+0x2c>
   861c8:	20800e17 	ldw	r2,56(r4)
   861cc:	10005326 	beq	r2,zero,8631c <_fflush_r+0x178>
   861d0:	8080030b 	ldhu	r2,12(r16)
   861d4:	10ffffcc 	andi	r3,r2,65535
   861d8:	18e0001c 	xori	r3,r3,32768
   861dc:	18e00004 	addi	r3,r3,-32768
   861e0:	18002c26 	beq	r3,zero,86294 <_fflush_r+0xf0>
   861e4:	10c0020c 	andi	r3,r2,8
   861e8:	1800321e 	bne	r3,zero,862b4 <_fflush_r+0x110>
   861ec:	80c00117 	ldw	r3,4(r16)
   861f0:	10820014 	ori	r2,r2,2048
   861f4:	8080030d 	sth	r2,12(r16)
   861f8:	00c0570e 	bge	zero,r3,86358 <_fflush_r+0x1b4>
   861fc:	82000a17 	ldw	r8,40(r16)
   86200:	40002426 	beq	r8,zero,86294 <_fflush_r+0xf0>
   86204:	9c400017 	ldw	r17,0(r19)
   86208:	10c4000c 	andi	r3,r2,4096
   8620c:	98000015 	stw	zero,0(r19)
   86210:	18004626 	beq	r3,zero,8632c <_fflush_r+0x188>
   86214:	81801417 	ldw	r6,80(r16)
   86218:	10c0010c 	andi	r3,r2,4
   8621c:	18000626 	beq	r3,zero,86238 <_fflush_r+0x94>
   86220:	80c00117 	ldw	r3,4(r16)
   86224:	80800c17 	ldw	r2,48(r16)
   86228:	30cdc83a 	sub	r6,r6,r3
   8622c:	10000226 	beq	r2,zero,86238 <_fflush_r+0x94>
   86230:	80800f17 	ldw	r2,60(r16)
   86234:	308dc83a 	sub	r6,r6,r2
   86238:	81400717 	ldw	r5,28(r16)
   8623c:	9809883a 	mov	r4,r19
   86240:	000f883a 	mov	r7,zero
   86244:	403ee83a 	callr	r8
   86248:	00ffffc4 	movi	r3,-1
   8624c:	10c04526 	beq	r2,r3,86364 <_fflush_r+0x1c0>
   86250:	80c0030b 	ldhu	r3,12(r16)
   86254:	81000417 	ldw	r4,16(r16)
   86258:	80000115 	stw	zero,4(r16)
   8625c:	197dffcc 	andi	r5,r3,63487
   86260:	8140030d 	sth	r5,12(r16)
   86264:	81000015 	stw	r4,0(r16)
   86268:	18c4000c 	andi	r3,r3,4096
   8626c:	18000126 	beq	r3,zero,86274 <_fflush_r+0xd0>
   86270:	80801415 	stw	r2,80(r16)
   86274:	81400c17 	ldw	r5,48(r16)
   86278:	9c400015 	stw	r17,0(r19)
   8627c:	28000526 	beq	r5,zero,86294 <_fflush_r+0xf0>
   86280:	80801004 	addi	r2,r16,64
   86284:	28800226 	beq	r5,r2,86290 <_fflush_r+0xec>
   86288:	9809883a 	mov	r4,r19
   8628c:	00868c00 	call	868c0 <_free_r>
   86290:	80000c15 	stw	zero,48(r16)
   86294:	0005883a 	mov	r2,zero
   86298:	dfc00417 	ldw	ra,16(sp)
   8629c:	dcc00317 	ldw	r19,12(sp)
   862a0:	dc800217 	ldw	r18,8(sp)
   862a4:	dc400117 	ldw	r17,4(sp)
   862a8:	dc000017 	ldw	r16,0(sp)
   862ac:	dec00504 	addi	sp,sp,20
   862b0:	f800283a 	ret
   862b4:	84800417 	ldw	r18,16(r16)
   862b8:	903ff626 	beq	r18,zero,86294 <rx_descriptor_end+0xfff86234>
   862bc:	84400017 	ldw	r17,0(r16)
   862c0:	108000cc 	andi	r2,r2,3
   862c4:	84800015 	stw	r18,0(r16)
   862c8:	8ca3c83a 	sub	r17,r17,r18
   862cc:	10001526 	beq	r2,zero,86324 <_fflush_r+0x180>
   862d0:	0005883a 	mov	r2,zero
   862d4:	80800215 	stw	r2,8(r16)
   862d8:	04400316 	blt	zero,r17,862e8 <_fflush_r+0x144>
   862dc:	003fed06 	br	86294 <rx_descriptor_end+0xfff86234>
   862e0:	90a5883a 	add	r18,r18,r2
   862e4:	047feb0e 	bge	zero,r17,86294 <rx_descriptor_end+0xfff86234>
   862e8:	80800917 	ldw	r2,36(r16)
   862ec:	81400717 	ldw	r5,28(r16)
   862f0:	880f883a 	mov	r7,r17
   862f4:	900d883a 	mov	r6,r18
   862f8:	9809883a 	mov	r4,r19
   862fc:	103ee83a 	callr	r2
   86300:	88a3c83a 	sub	r17,r17,r2
   86304:	00bff616 	blt	zero,r2,862e0 <rx_descriptor_end+0xfff86280>
   86308:	80c0030b 	ldhu	r3,12(r16)
   8630c:	00bfffc4 	movi	r2,-1
   86310:	18c01014 	ori	r3,r3,64
   86314:	80c0030d 	sth	r3,12(r16)
   86318:	003fdf06 	br	86298 <rx_descriptor_end+0xfff86238>
   8631c:	008674c0 	call	8674c <__sinit>
   86320:	003fab06 	br	861d0 <rx_descriptor_end+0xfff86170>
   86324:	80800517 	ldw	r2,20(r16)
   86328:	003fea06 	br	862d4 <rx_descriptor_end+0xfff86274>
   8632c:	81400717 	ldw	r5,28(r16)
   86330:	000d883a 	mov	r6,zero
   86334:	9809883a 	mov	r4,r19
   86338:	01c00044 	movi	r7,1
   8633c:	403ee83a 	callr	r8
   86340:	100d883a 	mov	r6,r2
   86344:	00bfffc4 	movi	r2,-1
   86348:	30801326 	beq	r6,r2,86398 <_fflush_r+0x1f4>
   8634c:	8080030b 	ldhu	r2,12(r16)
   86350:	82000a17 	ldw	r8,40(r16)
   86354:	003fb006 	br	86218 <rx_descriptor_end+0xfff861b8>
   86358:	80c00f17 	ldw	r3,60(r16)
   8635c:	00ffa716 	blt	zero,r3,861fc <rx_descriptor_end+0xfff8619c>
   86360:	003fcc06 	br	86294 <rx_descriptor_end+0xfff86234>
   86364:	98c00017 	ldw	r3,0(r19)
   86368:	183fb926 	beq	r3,zero,86250 <rx_descriptor_end+0xfff861f0>
   8636c:	01000744 	movi	r4,29
   86370:	19000226 	beq	r3,r4,8637c <_fflush_r+0x1d8>
   86374:	01000584 	movi	r4,22
   86378:	1900101e 	bne	r3,r4,863bc <_fflush_r+0x218>
   8637c:	8080030b 	ldhu	r2,12(r16)
   86380:	80c00417 	ldw	r3,16(r16)
   86384:	80000115 	stw	zero,4(r16)
   86388:	10bdffcc 	andi	r2,r2,63487
   8638c:	8080030d 	sth	r2,12(r16)
   86390:	80c00015 	stw	r3,0(r16)
   86394:	003fb706 	br	86274 <rx_descriptor_end+0xfff86214>
   86398:	98800017 	ldw	r2,0(r19)
   8639c:	103feb26 	beq	r2,zero,8634c <rx_descriptor_end+0xfff862ec>
   863a0:	00c00744 	movi	r3,29
   863a4:	10c00226 	beq	r2,r3,863b0 <_fflush_r+0x20c>
   863a8:	00c00584 	movi	r3,22
   863ac:	10ffd61e 	bne	r2,r3,86308 <rx_descriptor_end+0xfff862a8>
   863b0:	9c400015 	stw	r17,0(r19)
   863b4:	0005883a 	mov	r2,zero
   863b8:	003fb706 	br	86298 <rx_descriptor_end+0xfff86238>
   863bc:	80c0030b 	ldhu	r3,12(r16)
   863c0:	18c01014 	ori	r3,r3,64
   863c4:	80c0030d 	sth	r3,12(r16)
   863c8:	003fb306 	br	86298 <rx_descriptor_end+0xfff86238>

000863cc <fflush>:
   863cc:	20000526 	beq	r4,zero,863e4 <fflush+0x18>
   863d0:	00800274 	movhi	r2,9
   863d4:	10a93e04 	addi	r2,r2,-23304
   863d8:	200b883a 	mov	r5,r4
   863dc:	11000017 	ldw	r4,0(r2)
   863e0:	00861a41 	jmpi	861a4 <_fflush_r>
   863e4:	00800274 	movhi	r2,9
   863e8:	10a93d04 	addi	r2,r2,-23308
   863ec:	11000017 	ldw	r4,0(r2)
   863f0:	01400234 	movhi	r5,8
   863f4:	29586904 	addi	r5,r5,24996
   863f8:	0086c681 	jmpi	86c68 <_fwalk_reent>

000863fc <__fp_lock>:
   863fc:	0005883a 	mov	r2,zero
   86400:	f800283a 	ret

00086404 <__fp_unlock>:
   86404:	0005883a 	mov	r2,zero
   86408:	f800283a 	ret

0008640c <_cleanup_r>:
   8640c:	01400234 	movhi	r5,8
   86410:	295e7004 	addi	r5,r5,31168
   86414:	0086bb01 	jmpi	86bb0 <_fwalk>

00086418 <__sinit.part.1>:
   86418:	defff604 	addi	sp,sp,-40
   8641c:	00c00234 	movhi	r3,8
   86420:	dfc00915 	stw	ra,36(sp)
   86424:	df000815 	stw	fp,32(sp)
   86428:	ddc00715 	stw	r23,28(sp)
   8642c:	dd800615 	stw	r22,24(sp)
   86430:	dd400515 	stw	r21,20(sp)
   86434:	dd000415 	stw	r20,16(sp)
   86438:	dcc00315 	stw	r19,12(sp)
   8643c:	dc800215 	stw	r18,8(sp)
   86440:	dc400115 	stw	r17,4(sp)
   86444:	dc000015 	stw	r16,0(sp)
   86448:	18d90304 	addi	r3,r3,25612
   8644c:	24000117 	ldw	r16,4(r4)
   86450:	20c00f15 	stw	r3,60(r4)
   86454:	07000044 	movi	fp,1
   86458:	00c000c4 	movi	r3,3
   8645c:	2080bb04 	addi	r2,r4,748
   86460:	20c0b915 	stw	r3,740(r4)
   86464:	27000e15 	stw	fp,56(r4)
   86468:	2080ba15 	stw	r2,744(r4)
   8646c:	2000b815 	stw	zero,736(r4)
   86470:	05c00204 	movi	r23,8
   86474:	00800104 	movi	r2,4
   86478:	2025883a 	mov	r18,r4
   8647c:	b80d883a 	mov	r6,r23
   86480:	81001704 	addi	r4,r16,92
   86484:	000b883a 	mov	r5,zero
   86488:	80000015 	stw	zero,0(r16)
   8648c:	80000115 	stw	zero,4(r16)
   86490:	80000215 	stw	zero,8(r16)
   86494:	8080030d 	sth	r2,12(r16)
   86498:	80001915 	stw	zero,100(r16)
   8649c:	8000038d 	sth	zero,14(r16)
   864a0:	80000415 	stw	zero,16(r16)
   864a4:	80000515 	stw	zero,20(r16)
   864a8:	80000615 	stw	zero,24(r16)
   864ac:	00829c80 	call	829c8 <memset>
   864b0:	05800234 	movhi	r22,8
   864b4:	94400217 	ldw	r17,8(r18)
   864b8:	05400234 	movhi	r21,8
   864bc:	05000234 	movhi	r20,8
   864c0:	04c00234 	movhi	r19,8
   864c4:	b59db504 	addi	r22,r22,30420
   864c8:	ad5dcc04 	addi	r21,r21,30512
   864cc:	a51deb04 	addi	r20,r20,30636
   864d0:	9cde0204 	addi	r19,r19,30728
   864d4:	85800815 	stw	r22,32(r16)
   864d8:	85400915 	stw	r21,36(r16)
   864dc:	85000a15 	stw	r20,40(r16)
   864e0:	84c00b15 	stw	r19,44(r16)
   864e4:	84000715 	stw	r16,28(r16)
   864e8:	00800284 	movi	r2,10
   864ec:	89001704 	addi	r4,r17,92
   864f0:	b80d883a 	mov	r6,r23
   864f4:	000b883a 	mov	r5,zero
   864f8:	88000015 	stw	zero,0(r17)
   864fc:	88000115 	stw	zero,4(r17)
   86500:	88000215 	stw	zero,8(r17)
   86504:	8880030d 	sth	r2,12(r17)
   86508:	88001915 	stw	zero,100(r17)
   8650c:	8f00038d 	sth	fp,14(r17)
   86510:	88000415 	stw	zero,16(r17)
   86514:	88000515 	stw	zero,20(r17)
   86518:	88000615 	stw	zero,24(r17)
   8651c:	00829c80 	call	829c8 <memset>
   86520:	94000317 	ldw	r16,12(r18)
   86524:	00800484 	movi	r2,18
   86528:	8c400715 	stw	r17,28(r17)
   8652c:	8d800815 	stw	r22,32(r17)
   86530:	8d400915 	stw	r21,36(r17)
   86534:	8d000a15 	stw	r20,40(r17)
   86538:	8cc00b15 	stw	r19,44(r17)
   8653c:	8080030d 	sth	r2,12(r16)
   86540:	00800084 	movi	r2,2
   86544:	80000015 	stw	zero,0(r16)
   86548:	80000115 	stw	zero,4(r16)
   8654c:	80000215 	stw	zero,8(r16)
   86550:	80001915 	stw	zero,100(r16)
   86554:	8080038d 	sth	r2,14(r16)
   86558:	80000415 	stw	zero,16(r16)
   8655c:	80000515 	stw	zero,20(r16)
   86560:	80000615 	stw	zero,24(r16)
   86564:	81001704 	addi	r4,r16,92
   86568:	000b883a 	mov	r5,zero
   8656c:	b80d883a 	mov	r6,r23
   86570:	00829c80 	call	829c8 <memset>
   86574:	84000715 	stw	r16,28(r16)
   86578:	85800815 	stw	r22,32(r16)
   8657c:	85400915 	stw	r21,36(r16)
   86580:	85000a15 	stw	r20,40(r16)
   86584:	84c00b15 	stw	r19,44(r16)
   86588:	dfc00917 	ldw	ra,36(sp)
   8658c:	df000817 	ldw	fp,32(sp)
   86590:	ddc00717 	ldw	r23,28(sp)
   86594:	dd800617 	ldw	r22,24(sp)
   86598:	dd400517 	ldw	r21,20(sp)
   8659c:	dd000417 	ldw	r20,16(sp)
   865a0:	dcc00317 	ldw	r19,12(sp)
   865a4:	dc800217 	ldw	r18,8(sp)
   865a8:	dc400117 	ldw	r17,4(sp)
   865ac:	dc000017 	ldw	r16,0(sp)
   865b0:	dec00a04 	addi	sp,sp,40
   865b4:	f800283a 	ret

000865b8 <__sfmoreglue>:
   865b8:	defffc04 	addi	sp,sp,-16
   865bc:	dc400115 	stw	r17,4(sp)
   865c0:	2c401a24 	muli	r17,r5,104
   865c4:	dc800215 	stw	r18,8(sp)
   865c8:	2825883a 	mov	r18,r5
   865cc:	89400304 	addi	r5,r17,12
   865d0:	dc000015 	stw	r16,0(sp)
   865d4:	dfc00315 	stw	ra,12(sp)
   865d8:	0086ed80 	call	86ed8 <_malloc_r>
   865dc:	1021883a 	mov	r16,r2
   865e0:	10000726 	beq	r2,zero,86600 <__sfmoreglue+0x48>
   865e4:	11000304 	addi	r4,r2,12
   865e8:	10000015 	stw	zero,0(r2)
   865ec:	14800115 	stw	r18,4(r2)
   865f0:	11000215 	stw	r4,8(r2)
   865f4:	000b883a 	mov	r5,zero
   865f8:	880d883a 	mov	r6,r17
   865fc:	00829c80 	call	829c8 <memset>
   86600:	8005883a 	mov	r2,r16
   86604:	dfc00317 	ldw	ra,12(sp)
   86608:	dc800217 	ldw	r18,8(sp)
   8660c:	dc400117 	ldw	r17,4(sp)
   86610:	dc000017 	ldw	r16,0(sp)
   86614:	dec00404 	addi	sp,sp,16
   86618:	f800283a 	ret

0008661c <__sfp>:
   8661c:	00800274 	movhi	r2,9
   86620:	defffb04 	addi	sp,sp,-20
   86624:	10a93d04 	addi	r2,r2,-23308
   86628:	dc800215 	stw	r18,8(sp)
   8662c:	14800017 	ldw	r18,0(r2)
   86630:	dcc00315 	stw	r19,12(sp)
   86634:	dfc00415 	stw	ra,16(sp)
   86638:	90800e17 	ldw	r2,56(r18)
   8663c:	dc400115 	stw	r17,4(sp)
   86640:	dc000015 	stw	r16,0(sp)
   86644:	2027883a 	mov	r19,r4
   86648:	1000021e 	bne	r2,zero,86654 <__sfp+0x38>
   8664c:	9009883a 	mov	r4,r18
   86650:	00864180 	call	86418 <__sinit.part.1>
   86654:	9480b804 	addi	r18,r18,736
   86658:	047fffc4 	movi	r17,-1
   8665c:	91400117 	ldw	r5,4(r18)
   86660:	94000217 	ldw	r16,8(r18)
   86664:	297fffc4 	addi	r5,r5,-1
   86668:	28000a16 	blt	r5,zero,86694 <__sfp+0x78>
   8666c:	8080030f 	ldh	r2,12(r16)
   86670:	10000c26 	beq	r2,zero,866a4 <__sfp+0x88>
   86674:	80c01d04 	addi	r3,r16,116
   86678:	00000206 	br	86684 <__sfp+0x68>
   8667c:	18bfe60f 	ldh	r2,-104(r3)
   86680:	10000826 	beq	r2,zero,866a4 <__sfp+0x88>
   86684:	297fffc4 	addi	r5,r5,-1
   86688:	1c3ffd04 	addi	r16,r3,-12
   8668c:	18c01a04 	addi	r3,r3,104
   86690:	2c7ffa1e 	bne	r5,r17,8667c <rx_descriptor_end+0xfff8661c>
   86694:	90800017 	ldw	r2,0(r18)
   86698:	10001d26 	beq	r2,zero,86710 <__sfp+0xf4>
   8669c:	1025883a 	mov	r18,r2
   866a0:	003fee06 	br	8665c <rx_descriptor_end+0xfff865fc>
   866a4:	00bfffc4 	movi	r2,-1
   866a8:	8080038d 	sth	r2,14(r16)
   866ac:	00800044 	movi	r2,1
   866b0:	8080030d 	sth	r2,12(r16)
   866b4:	80001915 	stw	zero,100(r16)
   866b8:	80000015 	stw	zero,0(r16)
   866bc:	80000215 	stw	zero,8(r16)
   866c0:	80000115 	stw	zero,4(r16)
   866c4:	80000415 	stw	zero,16(r16)
   866c8:	80000515 	stw	zero,20(r16)
   866cc:	80000615 	stw	zero,24(r16)
   866d0:	81001704 	addi	r4,r16,92
   866d4:	000b883a 	mov	r5,zero
   866d8:	01800204 	movi	r6,8
   866dc:	00829c80 	call	829c8 <memset>
   866e0:	8005883a 	mov	r2,r16
   866e4:	80000c15 	stw	zero,48(r16)
   866e8:	80000d15 	stw	zero,52(r16)
   866ec:	80001115 	stw	zero,68(r16)
   866f0:	80001215 	stw	zero,72(r16)
   866f4:	dfc00417 	ldw	ra,16(sp)
   866f8:	dcc00317 	ldw	r19,12(sp)
   866fc:	dc800217 	ldw	r18,8(sp)
   86700:	dc400117 	ldw	r17,4(sp)
   86704:	dc000017 	ldw	r16,0(sp)
   86708:	dec00504 	addi	sp,sp,20
   8670c:	f800283a 	ret
   86710:	9809883a 	mov	r4,r19
   86714:	01400104 	movi	r5,4
   86718:	00865b80 	call	865b8 <__sfmoreglue>
   8671c:	90800015 	stw	r2,0(r18)
   86720:	103fde1e 	bne	r2,zero,8669c <rx_descriptor_end+0xfff8663c>
   86724:	00800304 	movi	r2,12
   86728:	98800015 	stw	r2,0(r19)
   8672c:	0005883a 	mov	r2,zero
   86730:	003ff006 	br	866f4 <rx_descriptor_end+0xfff86694>

00086734 <_cleanup>:
   86734:	00800274 	movhi	r2,9
   86738:	10a93d04 	addi	r2,r2,-23308
   8673c:	11000017 	ldw	r4,0(r2)
   86740:	01400234 	movhi	r5,8
   86744:	295e7004 	addi	r5,r5,31168
   86748:	0086bb01 	jmpi	86bb0 <_fwalk>

0008674c <__sinit>:
   8674c:	20800e17 	ldw	r2,56(r4)
   86750:	10000126 	beq	r2,zero,86758 <__sinit+0xc>
   86754:	f800283a 	ret
   86758:	00864181 	jmpi	86418 <__sinit.part.1>

0008675c <__sfp_lock_acquire>:
   8675c:	f800283a 	ret

00086760 <__sfp_lock_release>:
   86760:	f800283a 	ret

00086764 <__sinit_lock_acquire>:
   86764:	f800283a 	ret

00086768 <__sinit_lock_release>:
   86768:	f800283a 	ret

0008676c <__fp_lock_all>:
   8676c:	00800274 	movhi	r2,9
   86770:	10a93e04 	addi	r2,r2,-23304
   86774:	11000017 	ldw	r4,0(r2)
   86778:	01400234 	movhi	r5,8
   8677c:	2958ff04 	addi	r5,r5,25596
   86780:	0086bb01 	jmpi	86bb0 <_fwalk>

00086784 <__fp_unlock_all>:
   86784:	00800274 	movhi	r2,9
   86788:	10a93e04 	addi	r2,r2,-23304
   8678c:	11000017 	ldw	r4,0(r2)
   86790:	01400234 	movhi	r5,8
   86794:	29590104 	addi	r5,r5,25604
   86798:	0086bb01 	jmpi	86bb0 <_fwalk>

0008679c <_malloc_trim_r>:
   8679c:	defffb04 	addi	sp,sp,-20
   867a0:	dcc00315 	stw	r19,12(sp)
   867a4:	04c00274 	movhi	r19,9
   867a8:	dc800215 	stw	r18,8(sp)
   867ac:	dc400115 	stw	r17,4(sp)
   867b0:	dc000015 	stw	r16,0(sp)
   867b4:	dfc00415 	stw	ra,16(sp)
   867b8:	2821883a 	mov	r16,r5
   867bc:	9ce83004 	addi	r19,r19,-24384
   867c0:	2025883a 	mov	r18,r4
   867c4:	0087e840 	call	87e84 <__malloc_lock>
   867c8:	98800217 	ldw	r2,8(r19)
   867cc:	14400117 	ldw	r17,4(r2)
   867d0:	00bfff04 	movi	r2,-4
   867d4:	88a2703a 	and	r17,r17,r2
   867d8:	8c21c83a 	sub	r16,r17,r16
   867dc:	8403fbc4 	addi	r16,r16,4079
   867e0:	8020d33a 	srli	r16,r16,12
   867e4:	0083ffc4 	movi	r2,4095
   867e8:	843fffc4 	addi	r16,r16,-1
   867ec:	8020933a 	slli	r16,r16,12
   867f0:	1400060e 	bge	r2,r16,8680c <_malloc_trim_r+0x70>
   867f4:	9009883a 	mov	r4,r18
   867f8:	000b883a 	mov	r5,zero
   867fc:	00876800 	call	87680 <_sbrk_r>
   86800:	98c00217 	ldw	r3,8(r19)
   86804:	1c47883a 	add	r3,r3,r17
   86808:	10c00a26 	beq	r2,r3,86834 <_malloc_trim_r+0x98>
   8680c:	9009883a 	mov	r4,r18
   86810:	0087ea40 	call	87ea4 <__malloc_unlock>
   86814:	0005883a 	mov	r2,zero
   86818:	dfc00417 	ldw	ra,16(sp)
   8681c:	dcc00317 	ldw	r19,12(sp)
   86820:	dc800217 	ldw	r18,8(sp)
   86824:	dc400117 	ldw	r17,4(sp)
   86828:	dc000017 	ldw	r16,0(sp)
   8682c:	dec00504 	addi	sp,sp,20
   86830:	f800283a 	ret
   86834:	9009883a 	mov	r4,r18
   86838:	040bc83a 	sub	r5,zero,r16
   8683c:	00876800 	call	87680 <_sbrk_r>
   86840:	00ffffc4 	movi	r3,-1
   86844:	10c00d26 	beq	r2,r3,8687c <_malloc_trim_r+0xe0>
   86848:	00c00274 	movhi	r3,9
   8684c:	18f02a04 	addi	r3,r3,-16216
   86850:	18800017 	ldw	r2,0(r3)
   86854:	99000217 	ldw	r4,8(r19)
   86858:	8c23c83a 	sub	r17,r17,r16
   8685c:	8c400054 	ori	r17,r17,1
   86860:	1421c83a 	sub	r16,r2,r16
   86864:	24400115 	stw	r17,4(r4)
   86868:	9009883a 	mov	r4,r18
   8686c:	1c000015 	stw	r16,0(r3)
   86870:	0087ea40 	call	87ea4 <__malloc_unlock>
   86874:	00800044 	movi	r2,1
   86878:	003fe706 	br	86818 <rx_descriptor_end+0xfff867b8>
   8687c:	9009883a 	mov	r4,r18
   86880:	000b883a 	mov	r5,zero
   86884:	00876800 	call	87680 <_sbrk_r>
   86888:	99000217 	ldw	r4,8(r19)
   8688c:	014003c4 	movi	r5,15
   86890:	1107c83a 	sub	r3,r2,r4
   86894:	28ffdd0e 	bge	r5,r3,8680c <rx_descriptor_end+0xfff867ac>
   86898:	01400274 	movhi	r5,9
   8689c:	29693f04 	addi	r5,r5,-23300
   868a0:	29400017 	ldw	r5,0(r5)
   868a4:	18c00054 	ori	r3,r3,1
   868a8:	20c00115 	stw	r3,4(r4)
   868ac:	00c00274 	movhi	r3,9
   868b0:	1145c83a 	sub	r2,r2,r5
   868b4:	18f02a04 	addi	r3,r3,-16216
   868b8:	18800015 	stw	r2,0(r3)
   868bc:	003fd306 	br	8680c <rx_descriptor_end+0xfff867ac>

000868c0 <_free_r>:
   868c0:	28004c26 	beq	r5,zero,869f4 <_free_r+0x134>
   868c4:	defffd04 	addi	sp,sp,-12
   868c8:	dc400115 	stw	r17,4(sp)
   868cc:	dc000015 	stw	r16,0(sp)
   868d0:	2023883a 	mov	r17,r4
   868d4:	2821883a 	mov	r16,r5
   868d8:	dfc00215 	stw	ra,8(sp)
   868dc:	0087e840 	call	87e84 <__malloc_lock>
   868e0:	813fff17 	ldw	r4,-4(r16)
   868e4:	00bfff84 	movi	r2,-2
   868e8:	02400274 	movhi	r9,9
   868ec:	81bffe04 	addi	r6,r16,-8
   868f0:	2084703a 	and	r2,r4,r2
   868f4:	4a683004 	addi	r9,r9,-24384
   868f8:	308b883a 	add	r5,r6,r2
   868fc:	2a000117 	ldw	r8,4(r5)
   86900:	49c00217 	ldw	r7,8(r9)
   86904:	00ffff04 	movi	r3,-4
   86908:	40c6703a 	and	r3,r8,r3
   8690c:	39405326 	beq	r7,r5,86a5c <_free_r+0x19c>
   86910:	28c00115 	stw	r3,4(r5)
   86914:	2100004c 	andi	r4,r4,1
   86918:	2000091e 	bne	r4,zero,86940 <_free_r+0x80>
   8691c:	81fffe17 	ldw	r7,-8(r16)
   86920:	4a000204 	addi	r8,r9,8
   86924:	31cdc83a 	sub	r6,r6,r7
   86928:	31000217 	ldw	r4,8(r6)
   8692c:	11c5883a 	add	r2,r2,r7
   86930:	22006126 	beq	r4,r8,86ab8 <_free_r+0x1f8>
   86934:	31c00317 	ldw	r7,12(r6)
   86938:	21c00315 	stw	r7,12(r4)
   8693c:	39000215 	stw	r4,8(r7)
   86940:	28c9883a 	add	r4,r5,r3
   86944:	21c00117 	ldw	r7,4(r4)
   86948:	39c0004c 	andi	r7,r7,1
   8694c:	38000d1e 	bne	r7,zero,86984 <_free_r+0xc4>
   86950:	29000217 	ldw	r4,8(r5)
   86954:	10c5883a 	add	r2,r2,r3
   86958:	00c00274 	movhi	r3,9
   8695c:	18e83204 	addi	r3,r3,-24376
   86960:	20c07526 	beq	r4,r3,86b38 <_free_r+0x278>
   86964:	29c00317 	ldw	r7,12(r5)
   86968:	11400054 	ori	r5,r2,1
   8696c:	3087883a 	add	r3,r6,r2
   86970:	21c00315 	stw	r7,12(r4)
   86974:	39000215 	stw	r4,8(r7)
   86978:	31400115 	stw	r5,4(r6)
   8697c:	18800015 	stw	r2,0(r3)
   86980:	00000406 	br	86994 <_free_r+0xd4>
   86984:	10c00054 	ori	r3,r2,1
   86988:	30c00115 	stw	r3,4(r6)
   8698c:	3087883a 	add	r3,r6,r2
   86990:	18800015 	stw	r2,0(r3)
   86994:	00c07fc4 	movi	r3,511
   86998:	18801736 	bltu	r3,r2,869f8 <_free_r+0x138>
   8699c:	1004d0fa 	srli	r2,r2,3
   869a0:	01400044 	movi	r5,1
   869a4:	49000117 	ldw	r4,4(r9)
   869a8:	1087883a 	add	r3,r2,r2
   869ac:	18c7883a 	add	r3,r3,r3
   869b0:	1005d0ba 	srai	r2,r2,2
   869b4:	18c7883a 	add	r3,r3,r3
   869b8:	1a47883a 	add	r3,r3,r9
   869bc:	19c00217 	ldw	r7,8(r3)
   869c0:	2884983a 	sll	r2,r5,r2
   869c4:	30c00315 	stw	r3,12(r6)
   869c8:	31c00215 	stw	r7,8(r6)
   869cc:	1104b03a 	or	r2,r2,r4
   869d0:	19800215 	stw	r6,8(r3)
   869d4:	48800115 	stw	r2,4(r9)
   869d8:	39800315 	stw	r6,12(r7)
   869dc:	8809883a 	mov	r4,r17
   869e0:	dfc00217 	ldw	ra,8(sp)
   869e4:	dc400117 	ldw	r17,4(sp)
   869e8:	dc000017 	ldw	r16,0(sp)
   869ec:	dec00304 	addi	sp,sp,12
   869f0:	0087ea41 	jmpi	87ea4 <__malloc_unlock>
   869f4:	f800283a 	ret
   869f8:	1006d27a 	srli	r3,r2,9
   869fc:	01000104 	movi	r4,4
   86a00:	20c04036 	bltu	r4,r3,86b04 <_free_r+0x244>
   86a04:	1006d1ba 	srli	r3,r2,6
   86a08:	19400e04 	addi	r5,r3,56
   86a0c:	2947883a 	add	r3,r5,r5
   86a10:	18c7883a 	add	r3,r3,r3
   86a14:	18c7883a 	add	r3,r3,r3
   86a18:	1a49883a 	add	r4,r3,r9
   86a1c:	20c00217 	ldw	r3,8(r4)
   86a20:	01c00274 	movhi	r7,9
   86a24:	39e83004 	addi	r7,r7,-24384
   86a28:	19003b26 	beq	r3,r4,86b18 <_free_r+0x258>
   86a2c:	01ffff04 	movi	r7,-4
   86a30:	19400117 	ldw	r5,4(r3)
   86a34:	29ca703a 	and	r5,r5,r7
   86a38:	1140022e 	bgeu	r2,r5,86a44 <_free_r+0x184>
   86a3c:	18c00217 	ldw	r3,8(r3)
   86a40:	20fffb1e 	bne	r4,r3,86a30 <rx_descriptor_end+0xfff869d0>
   86a44:	18800317 	ldw	r2,12(r3)
   86a48:	30800315 	stw	r2,12(r6)
   86a4c:	30c00215 	stw	r3,8(r6)
   86a50:	11800215 	stw	r6,8(r2)
   86a54:	19800315 	stw	r6,12(r3)
   86a58:	003fe006 	br	869dc <rx_descriptor_end+0xfff8697c>
   86a5c:	2100004c 	andi	r4,r4,1
   86a60:	1885883a 	add	r2,r3,r2
   86a64:	2000071e 	bne	r4,zero,86a84 <_free_r+0x1c4>
   86a68:	817ffe17 	ldw	r5,-8(r16)
   86a6c:	314dc83a 	sub	r6,r6,r5
   86a70:	30c00317 	ldw	r3,12(r6)
   86a74:	31000217 	ldw	r4,8(r6)
   86a78:	1145883a 	add	r2,r2,r5
   86a7c:	20c00315 	stw	r3,12(r4)
   86a80:	19000215 	stw	r4,8(r3)
   86a84:	10c00054 	ori	r3,r2,1
   86a88:	30c00115 	stw	r3,4(r6)
   86a8c:	00c00274 	movhi	r3,9
   86a90:	18e94004 	addi	r3,r3,-23296
   86a94:	18c00017 	ldw	r3,0(r3)
   86a98:	49800215 	stw	r6,8(r9)
   86a9c:	10ffcf36 	bltu	r2,r3,869dc <rx_descriptor_end+0xfff8697c>
   86aa0:	00800274 	movhi	r2,9
   86aa4:	10b00904 	addi	r2,r2,-16348
   86aa8:	11400017 	ldw	r5,0(r2)
   86aac:	8809883a 	mov	r4,r17
   86ab0:	008679c0 	call	8679c <_malloc_trim_r>
   86ab4:	003fc906 	br	869dc <rx_descriptor_end+0xfff8697c>
   86ab8:	28c9883a 	add	r4,r5,r3
   86abc:	21000117 	ldw	r4,4(r4)
   86ac0:	2100004c 	andi	r4,r4,1
   86ac4:	20000a1e 	bne	r4,zero,86af0 <_free_r+0x230>
   86ac8:	29000317 	ldw	r4,12(r5)
   86acc:	29400217 	ldw	r5,8(r5)
   86ad0:	10c5883a 	add	r2,r2,r3
   86ad4:	10c00054 	ori	r3,r2,1
   86ad8:	29000315 	stw	r4,12(r5)
   86adc:	21400215 	stw	r5,8(r4)
   86ae0:	30c00115 	stw	r3,4(r6)
   86ae4:	308d883a 	add	r6,r6,r2
   86ae8:	30800015 	stw	r2,0(r6)
   86aec:	003fbb06 	br	869dc <rx_descriptor_end+0xfff8697c>
   86af0:	10c00054 	ori	r3,r2,1
   86af4:	30c00115 	stw	r3,4(r6)
   86af8:	308d883a 	add	r6,r6,r2
   86afc:	30800015 	stw	r2,0(r6)
   86b00:	003fb606 	br	869dc <rx_descriptor_end+0xfff8697c>
   86b04:	01000504 	movi	r4,20
   86b08:	20c01436 	bltu	r4,r3,86b5c <_free_r+0x29c>
   86b0c:	194016c4 	addi	r5,r3,91
   86b10:	2947883a 	add	r3,r5,r5
   86b14:	003fbe06 	br	86a10 <rx_descriptor_end+0xfff869b0>
   86b18:	280bd0ba 	srai	r5,r5,2
   86b1c:	00800044 	movi	r2,1
   86b20:	39000117 	ldw	r4,4(r7)
   86b24:	114a983a 	sll	r5,r2,r5
   86b28:	1805883a 	mov	r2,r3
   86b2c:	2908b03a 	or	r4,r5,r4
   86b30:	39000115 	stw	r4,4(r7)
   86b34:	003fc406 	br	86a48 <rx_descriptor_end+0xfff869e8>
   86b38:	49800515 	stw	r6,20(r9)
   86b3c:	49800415 	stw	r6,16(r9)
   86b40:	10c00054 	ori	r3,r2,1
   86b44:	31000315 	stw	r4,12(r6)
   86b48:	31000215 	stw	r4,8(r6)
   86b4c:	30c00115 	stw	r3,4(r6)
   86b50:	308d883a 	add	r6,r6,r2
   86b54:	30800015 	stw	r2,0(r6)
   86b58:	003fa006 	br	869dc <rx_descriptor_end+0xfff8697c>
   86b5c:	01001504 	movi	r4,84
   86b60:	20c00436 	bltu	r4,r3,86b74 <_free_r+0x2b4>
   86b64:	1006d33a 	srli	r3,r2,12
   86b68:	19401b84 	addi	r5,r3,110
   86b6c:	2947883a 	add	r3,r5,r5
   86b70:	003fa706 	br	86a10 <rx_descriptor_end+0xfff869b0>
   86b74:	01005504 	movi	r4,340
   86b78:	20c00436 	bltu	r4,r3,86b8c <_free_r+0x2cc>
   86b7c:	1006d3fa 	srli	r3,r2,15
   86b80:	19401dc4 	addi	r5,r3,119
   86b84:	2947883a 	add	r3,r5,r5
   86b88:	003fa106 	br	86a10 <rx_descriptor_end+0xfff869b0>
   86b8c:	01015504 	movi	r4,1364
   86b90:	20c00436 	bltu	r4,r3,86ba4 <_free_r+0x2e4>
   86b94:	1006d4ba 	srli	r3,r2,18
   86b98:	19401f04 	addi	r5,r3,124
   86b9c:	2947883a 	add	r3,r5,r5
   86ba0:	003f9b06 	br	86a10 <rx_descriptor_end+0xfff869b0>
   86ba4:	00c03f04 	movi	r3,252
   86ba8:	01401f84 	movi	r5,126
   86bac:	003f9806 	br	86a10 <rx_descriptor_end+0xfff869b0>

00086bb0 <_fwalk>:
   86bb0:	defff804 	addi	sp,sp,-32
   86bb4:	dd400515 	stw	r21,20(sp)
   86bb8:	2540b804 	addi	r21,r4,736
   86bbc:	dd800615 	stw	r22,24(sp)
   86bc0:	dd000415 	stw	r20,16(sp)
   86bc4:	dfc00715 	stw	ra,28(sp)
   86bc8:	dcc00315 	stw	r19,12(sp)
   86bcc:	dc800215 	stw	r18,8(sp)
   86bd0:	dc400115 	stw	r17,4(sp)
   86bd4:	dc000015 	stw	r16,0(sp)
   86bd8:	2829883a 	mov	r20,r5
   86bdc:	002d883a 	mov	r22,zero
   86be0:	008675c0 	call	8675c <__sfp_lock_acquire>
   86be4:	a8001426 	beq	r21,zero,86c38 <_fwalk+0x88>
   86be8:	04ffffc4 	movi	r19,-1
   86bec:	ac400117 	ldw	r17,4(r21)
   86bf0:	ac800217 	ldw	r18,8(r21)
   86bf4:	8c7fffc4 	addi	r17,r17,-1
   86bf8:	88000d16 	blt	r17,zero,86c30 <_fwalk+0x80>
   86bfc:	94000304 	addi	r16,r18,12
   86c00:	94800384 	addi	r18,r18,14
   86c04:	80c0000f 	ldh	r3,0(r16)
   86c08:	8c7fffc4 	addi	r17,r17,-1
   86c0c:	813ffd04 	addi	r4,r16,-12
   86c10:	18000426 	beq	r3,zero,86c24 <_fwalk+0x74>
   86c14:	90c0000f 	ldh	r3,0(r18)
   86c18:	1cc00226 	beq	r3,r19,86c24 <_fwalk+0x74>
   86c1c:	a03ee83a 	callr	r20
   86c20:	b0acb03a 	or	r22,r22,r2
   86c24:	84001a04 	addi	r16,r16,104
   86c28:	94801a04 	addi	r18,r18,104
   86c2c:	8cfff51e 	bne	r17,r19,86c04 <rx_descriptor_end+0xfff86ba4>
   86c30:	ad400017 	ldw	r21,0(r21)
   86c34:	a83fed1e 	bne	r21,zero,86bec <rx_descriptor_end+0xfff86b8c>
   86c38:	00867600 	call	86760 <__sfp_lock_release>
   86c3c:	b005883a 	mov	r2,r22
   86c40:	dfc00717 	ldw	ra,28(sp)
   86c44:	dd800617 	ldw	r22,24(sp)
   86c48:	dd400517 	ldw	r21,20(sp)
   86c4c:	dd000417 	ldw	r20,16(sp)
   86c50:	dcc00317 	ldw	r19,12(sp)
   86c54:	dc800217 	ldw	r18,8(sp)
   86c58:	dc400117 	ldw	r17,4(sp)
   86c5c:	dc000017 	ldw	r16,0(sp)
   86c60:	dec00804 	addi	sp,sp,32
   86c64:	f800283a 	ret

00086c68 <_fwalk_reent>:
   86c68:	defff804 	addi	sp,sp,-32
   86c6c:	dd400515 	stw	r21,20(sp)
   86c70:	2540b804 	addi	r21,r4,736
   86c74:	dd800615 	stw	r22,24(sp)
   86c78:	dd000415 	stw	r20,16(sp)
   86c7c:	dcc00315 	stw	r19,12(sp)
   86c80:	dfc00715 	stw	ra,28(sp)
   86c84:	dc800215 	stw	r18,8(sp)
   86c88:	dc400115 	stw	r17,4(sp)
   86c8c:	dc000015 	stw	r16,0(sp)
   86c90:	2027883a 	mov	r19,r4
   86c94:	2829883a 	mov	r20,r5
   86c98:	002d883a 	mov	r22,zero
   86c9c:	008675c0 	call	8675c <__sfp_lock_acquire>
   86ca0:	a8001326 	beq	r21,zero,86cf0 <_fwalk_reent+0x88>
   86ca4:	04bfffc4 	movi	r18,-1
   86ca8:	ac400117 	ldw	r17,4(r21)
   86cac:	ac000217 	ldw	r16,8(r21)
   86cb0:	8c7fffc4 	addi	r17,r17,-1
   86cb4:	88000c16 	blt	r17,zero,86ce8 <_fwalk_reent+0x80>
   86cb8:	84000304 	addi	r16,r16,12
   86cbc:	80c0000f 	ldh	r3,0(r16)
   86cc0:	8c7fffc4 	addi	r17,r17,-1
   86cc4:	817ffd04 	addi	r5,r16,-12
   86cc8:	18000526 	beq	r3,zero,86ce0 <_fwalk_reent+0x78>
   86ccc:	80c0008f 	ldh	r3,2(r16)
   86cd0:	9809883a 	mov	r4,r19
   86cd4:	1c800226 	beq	r3,r18,86ce0 <_fwalk_reent+0x78>
   86cd8:	a03ee83a 	callr	r20
   86cdc:	b0acb03a 	or	r22,r22,r2
   86ce0:	84001a04 	addi	r16,r16,104
   86ce4:	8cbff51e 	bne	r17,r18,86cbc <rx_descriptor_end+0xfff86c5c>
   86ce8:	ad400017 	ldw	r21,0(r21)
   86cec:	a83fee1e 	bne	r21,zero,86ca8 <rx_descriptor_end+0xfff86c48>
   86cf0:	00867600 	call	86760 <__sfp_lock_release>
   86cf4:	b005883a 	mov	r2,r22
   86cf8:	dfc00717 	ldw	ra,28(sp)
   86cfc:	dd800617 	ldw	r22,24(sp)
   86d00:	dd400517 	ldw	r21,20(sp)
   86d04:	dd000417 	ldw	r20,16(sp)
   86d08:	dcc00317 	ldw	r19,12(sp)
   86d0c:	dc800217 	ldw	r18,8(sp)
   86d10:	dc400117 	ldw	r17,4(sp)
   86d14:	dc000017 	ldw	r16,0(sp)
   86d18:	dec00804 	addi	sp,sp,32
   86d1c:	f800283a 	ret

00086d20 <__smakebuf_r>:
   86d20:	2880030b 	ldhu	r2,12(r5)
   86d24:	10c0008c 	andi	r3,r2,2
   86d28:	1800401e 	bne	r3,zero,86e2c <__smakebuf_r+0x10c>
   86d2c:	deffec04 	addi	sp,sp,-80
   86d30:	dc000f15 	stw	r16,60(sp)
   86d34:	2821883a 	mov	r16,r5
   86d38:	2940038f 	ldh	r5,14(r5)
   86d3c:	dc401015 	stw	r17,64(sp)
   86d40:	dfc01315 	stw	ra,76(sp)
   86d44:	dcc01215 	stw	r19,72(sp)
   86d48:	dc801115 	stw	r18,68(sp)
   86d4c:	2023883a 	mov	r17,r4
   86d50:	28001b16 	blt	r5,zero,86dc0 <__smakebuf_r+0xa0>
   86d54:	d80d883a 	mov	r6,sp
   86d58:	00879d40 	call	879d4 <_fstat_r>
   86d5c:	10001716 	blt	r2,zero,86dbc <__smakebuf_r+0x9c>
   86d60:	d8800117 	ldw	r2,4(sp)
   86d64:	00e00014 	movui	r3,32768
   86d68:	10bc000c 	andi	r2,r2,61440
   86d6c:	10c03726 	beq	r2,r3,86e4c <__smakebuf_r+0x12c>
   86d70:	80c0030b 	ldhu	r3,12(r16)
   86d74:	18c20014 	ori	r3,r3,2048
   86d78:	80c0030d 	sth	r3,12(r16)
   86d7c:	00c80004 	movi	r3,8192
   86d80:	10c03c1e 	bne	r2,r3,86e74 <__smakebuf_r+0x154>
   86d84:	8140038f 	ldh	r5,14(r16)
   86d88:	8809883a 	mov	r4,r17
   86d8c:	0087a2c0 	call	87a2c <_isatty_r>
   86d90:	10004e26 	beq	r2,zero,86ecc <__smakebuf_r+0x1ac>
   86d94:	8080030b 	ldhu	r2,12(r16)
   86d98:	04c00044 	movi	r19,1
   86d9c:	80c010c4 	addi	r3,r16,67
   86da0:	14c4b03a 	or	r2,r2,r19
   86da4:	8080030d 	sth	r2,12(r16)
   86da8:	80c00015 	stw	r3,0(r16)
   86dac:	80c00415 	stw	r3,16(r16)
   86db0:	84c00515 	stw	r19,20(r16)
   86db4:	04810004 	movi	r18,1024
   86db8:	00000706 	br	86dd8 <__smakebuf_r+0xb8>
   86dbc:	8080030b 	ldhu	r2,12(r16)
   86dc0:	10c0200c 	andi	r3,r2,128
   86dc4:	18001f1e 	bne	r3,zero,86e44 <__smakebuf_r+0x124>
   86dc8:	04810004 	movi	r18,1024
   86dcc:	10820014 	ori	r2,r2,2048
   86dd0:	8080030d 	sth	r2,12(r16)
   86dd4:	0027883a 	mov	r19,zero
   86dd8:	8809883a 	mov	r4,r17
   86ddc:	900b883a 	mov	r5,r18
   86de0:	0086ed80 	call	86ed8 <_malloc_r>
   86de4:	10002e26 	beq	r2,zero,86ea0 <__smakebuf_r+0x180>
   86de8:	80c0030b 	ldhu	r3,12(r16)
   86dec:	01000234 	movhi	r4,8
   86df0:	21190304 	addi	r4,r4,25612
   86df4:	89000f15 	stw	r4,60(r17)
   86df8:	18c02014 	ori	r3,r3,128
   86dfc:	80c0030d 	sth	r3,12(r16)
   86e00:	80800015 	stw	r2,0(r16)
   86e04:	80800415 	stw	r2,16(r16)
   86e08:	84800515 	stw	r18,20(r16)
   86e0c:	98001c1e 	bne	r19,zero,86e80 <__smakebuf_r+0x160>
   86e10:	dfc01317 	ldw	ra,76(sp)
   86e14:	dcc01217 	ldw	r19,72(sp)
   86e18:	dc801117 	ldw	r18,68(sp)
   86e1c:	dc401017 	ldw	r17,64(sp)
   86e20:	dc000f17 	ldw	r16,60(sp)
   86e24:	dec01404 	addi	sp,sp,80
   86e28:	f800283a 	ret
   86e2c:	288010c4 	addi	r2,r5,67
   86e30:	28800015 	stw	r2,0(r5)
   86e34:	28800415 	stw	r2,16(r5)
   86e38:	00800044 	movi	r2,1
   86e3c:	28800515 	stw	r2,20(r5)
   86e40:	f800283a 	ret
   86e44:	04801004 	movi	r18,64
   86e48:	003fe006 	br	86dcc <rx_descriptor_end+0xfff86d6c>
   86e4c:	81000a17 	ldw	r4,40(r16)
   86e50:	00c00234 	movhi	r3,8
   86e54:	18ddeb04 	addi	r3,r3,30636
   86e58:	20ffc51e 	bne	r4,r3,86d70 <rx_descriptor_end+0xfff86d10>
   86e5c:	80c0030b 	ldhu	r3,12(r16)
   86e60:	01010004 	movi	r4,1024
   86e64:	81001315 	stw	r4,76(r16)
   86e68:	1906b03a 	or	r3,r3,r4
   86e6c:	80c0030d 	sth	r3,12(r16)
   86e70:	003fc206 	br	86d7c <rx_descriptor_end+0xfff86d1c>
   86e74:	0027883a 	mov	r19,zero
   86e78:	04810004 	movi	r18,1024
   86e7c:	003fd606 	br	86dd8 <rx_descriptor_end+0xfff86d78>
   86e80:	8140038f 	ldh	r5,14(r16)
   86e84:	8809883a 	mov	r4,r17
   86e88:	0087a2c0 	call	87a2c <_isatty_r>
   86e8c:	103fe026 	beq	r2,zero,86e10 <rx_descriptor_end+0xfff86db0>
   86e90:	8080030b 	ldhu	r2,12(r16)
   86e94:	10800054 	ori	r2,r2,1
   86e98:	8080030d 	sth	r2,12(r16)
   86e9c:	003fdc06 	br	86e10 <rx_descriptor_end+0xfff86db0>
   86ea0:	8080030b 	ldhu	r2,12(r16)
   86ea4:	10c0800c 	andi	r3,r2,512
   86ea8:	183fd91e 	bne	r3,zero,86e10 <rx_descriptor_end+0xfff86db0>
   86eac:	10800094 	ori	r2,r2,2
   86eb0:	80c010c4 	addi	r3,r16,67
   86eb4:	8080030d 	sth	r2,12(r16)
   86eb8:	00800044 	movi	r2,1
   86ebc:	80c00015 	stw	r3,0(r16)
   86ec0:	80c00415 	stw	r3,16(r16)
   86ec4:	80800515 	stw	r2,20(r16)
   86ec8:	003fd106 	br	86e10 <rx_descriptor_end+0xfff86db0>
   86ecc:	04c00044 	movi	r19,1
   86ed0:	04810004 	movi	r18,1024
   86ed4:	003fc006 	br	86dd8 <rx_descriptor_end+0xfff86d78>

00086ed8 <_malloc_r>:
   86ed8:	defff504 	addi	sp,sp,-44
   86edc:	dc800315 	stw	r18,12(sp)
   86ee0:	dfc00a15 	stw	ra,40(sp)
   86ee4:	df000915 	stw	fp,36(sp)
   86ee8:	ddc00815 	stw	r23,32(sp)
   86eec:	dd800715 	stw	r22,28(sp)
   86ef0:	dd400615 	stw	r21,24(sp)
   86ef4:	dd000515 	stw	r20,20(sp)
   86ef8:	dcc00415 	stw	r19,16(sp)
   86efc:	dc400215 	stw	r17,8(sp)
   86f00:	dc000115 	stw	r16,4(sp)
   86f04:	288002c4 	addi	r2,r5,11
   86f08:	00c00584 	movi	r3,22
   86f0c:	2025883a 	mov	r18,r4
   86f10:	18802a2e 	bgeu	r3,r2,86fbc <_malloc_r+0xe4>
   86f14:	047ffe04 	movi	r17,-8
   86f18:	1462703a 	and	r17,r2,r17
   86f1c:	88009e16 	blt	r17,zero,87198 <_malloc_r+0x2c0>
   86f20:	89409d36 	bltu	r17,r5,87198 <_malloc_r+0x2c0>
   86f24:	0087e840 	call	87e84 <__malloc_lock>
   86f28:	00807dc4 	movi	r2,503
   86f2c:	14402736 	bltu	r2,r17,86fcc <_malloc_r+0xf4>
   86f30:	8806d0fa 	srli	r3,r17,3
   86f34:	04c00274 	movhi	r19,9
   86f38:	9ce83004 	addi	r19,r19,-24384
   86f3c:	18c5883a 	add	r2,r3,r3
   86f40:	1085883a 	add	r2,r2,r2
   86f44:	1085883a 	add	r2,r2,r2
   86f48:	9885883a 	add	r2,r19,r2
   86f4c:	14000317 	ldw	r16,12(r2)
   86f50:	80814a26 	beq	r16,r2,8747c <_malloc_r+0x5a4>
   86f54:	80c00117 	ldw	r3,4(r16)
   86f58:	81000317 	ldw	r4,12(r16)
   86f5c:	00bfff04 	movi	r2,-4
   86f60:	1884703a 	and	r2,r3,r2
   86f64:	81400217 	ldw	r5,8(r16)
   86f68:	8085883a 	add	r2,r16,r2
   86f6c:	10c00117 	ldw	r3,4(r2)
   86f70:	29000315 	stw	r4,12(r5)
   86f74:	21400215 	stw	r5,8(r4)
   86f78:	18c00054 	ori	r3,r3,1
   86f7c:	10c00115 	stw	r3,4(r2)
   86f80:	9009883a 	mov	r4,r18
   86f84:	0087ea40 	call	87ea4 <__malloc_unlock>
   86f88:	80800204 	addi	r2,r16,8
   86f8c:	dfc00a17 	ldw	ra,40(sp)
   86f90:	df000917 	ldw	fp,36(sp)
   86f94:	ddc00817 	ldw	r23,32(sp)
   86f98:	dd800717 	ldw	r22,28(sp)
   86f9c:	dd400617 	ldw	r21,24(sp)
   86fa0:	dd000517 	ldw	r20,20(sp)
   86fa4:	dcc00417 	ldw	r19,16(sp)
   86fa8:	dc800317 	ldw	r18,12(sp)
   86fac:	dc400217 	ldw	r17,8(sp)
   86fb0:	dc000117 	ldw	r16,4(sp)
   86fb4:	dec00b04 	addi	sp,sp,44
   86fb8:	f800283a 	ret
   86fbc:	04400404 	movi	r17,16
   86fc0:	89407536 	bltu	r17,r5,87198 <_malloc_r+0x2c0>
   86fc4:	0087e840 	call	87e84 <__malloc_lock>
   86fc8:	003fd906 	br	86f30 <rx_descriptor_end+0xfff86ed0>
   86fcc:	8806d27a 	srli	r3,r17,9
   86fd0:	18007526 	beq	r3,zero,871a8 <_malloc_r+0x2d0>
   86fd4:	00800104 	movi	r2,4
   86fd8:	10c0ef36 	bltu	r2,r3,87398 <_malloc_r+0x4c0>
   86fdc:	8806d1ba 	srli	r3,r17,6
   86fe0:	19c00e04 	addi	r7,r3,56
   86fe4:	39cb883a 	add	r5,r7,r7
   86fe8:	04c00274 	movhi	r19,9
   86fec:	294b883a 	add	r5,r5,r5
   86ff0:	9ce83004 	addi	r19,r19,-24384
   86ff4:	294b883a 	add	r5,r5,r5
   86ff8:	994b883a 	add	r5,r19,r5
   86ffc:	2c000317 	ldw	r16,12(r5)
   87000:	2c000e26 	beq	r5,r16,8703c <_malloc_r+0x164>
   87004:	80800117 	ldw	r2,4(r16)
   87008:	01bfff04 	movi	r6,-4
   8700c:	010003c4 	movi	r4,15
   87010:	1184703a 	and	r2,r2,r6
   87014:	1447c83a 	sub	r3,r2,r17
   87018:	20c00716 	blt	r4,r3,87038 <_malloc_r+0x160>
   8701c:	1800650e 	bge	r3,zero,871b4 <_malloc_r+0x2dc>
   87020:	84000317 	ldw	r16,12(r16)
   87024:	2c000526 	beq	r5,r16,8703c <_malloc_r+0x164>
   87028:	80800117 	ldw	r2,4(r16)
   8702c:	1184703a 	and	r2,r2,r6
   87030:	1447c83a 	sub	r3,r2,r17
   87034:	20fff90e 	bge	r4,r3,8701c <rx_descriptor_end+0xfff86fbc>
   87038:	39ffffc4 	addi	r7,r7,-1
   8703c:	38c00044 	addi	r3,r7,1
   87040:	01800274 	movhi	r6,9
   87044:	9c000417 	ldw	r16,16(r19)
   87048:	31a83004 	addi	r6,r6,-24384
   8704c:	32400204 	addi	r9,r6,8
   87050:	82410326 	beq	r16,r9,87460 <_malloc_r+0x588>
   87054:	81000117 	ldw	r4,4(r16)
   87058:	00bfff04 	movi	r2,-4
   8705c:	208e703a 	and	r7,r4,r2
   87060:	3c45c83a 	sub	r2,r7,r17
   87064:	010003c4 	movi	r4,15
   87068:	2080ee16 	blt	r4,r2,87424 <_malloc_r+0x54c>
   8706c:	32400515 	stw	r9,20(r6)
   87070:	32400415 	stw	r9,16(r6)
   87074:	1000510e 	bge	r2,zero,871bc <_malloc_r+0x2e4>
   87078:	00807fc4 	movi	r2,511
   8707c:	11c0ce36 	bltu	r2,r7,873b8 <_malloc_r+0x4e0>
   87080:	3808d0fa 	srli	r4,r7,3
   87084:	01c00044 	movi	r7,1
   87088:	30800117 	ldw	r2,4(r6)
   8708c:	210b883a 	add	r5,r4,r4
   87090:	294b883a 	add	r5,r5,r5
   87094:	2009d0ba 	srai	r4,r4,2
   87098:	294b883a 	add	r5,r5,r5
   8709c:	298b883a 	add	r5,r5,r6
   870a0:	2a000217 	ldw	r8,8(r5)
   870a4:	3908983a 	sll	r4,r7,r4
   870a8:	81400315 	stw	r5,12(r16)
   870ac:	82000215 	stw	r8,8(r16)
   870b0:	2088b03a 	or	r4,r4,r2
   870b4:	2c000215 	stw	r16,8(r5)
   870b8:	31000115 	stw	r4,4(r6)
   870bc:	44000315 	stw	r16,12(r8)
   870c0:	1805d0ba 	srai	r2,r3,2
   870c4:	01400044 	movi	r5,1
   870c8:	288a983a 	sll	r5,r5,r2
   870cc:	21404336 	bltu	r4,r5,871dc <_malloc_r+0x304>
   870d0:	2144703a 	and	r2,r4,r5
   870d4:	10000a1e 	bne	r2,zero,87100 <_malloc_r+0x228>
   870d8:	00bfff04 	movi	r2,-4
   870dc:	294b883a 	add	r5,r5,r5
   870e0:	1886703a 	and	r3,r3,r2
   870e4:	2144703a 	and	r2,r4,r5
   870e8:	18c00104 	addi	r3,r3,4
   870ec:	1000041e 	bne	r2,zero,87100 <_malloc_r+0x228>
   870f0:	294b883a 	add	r5,r5,r5
   870f4:	2144703a 	and	r2,r4,r5
   870f8:	18c00104 	addi	r3,r3,4
   870fc:	103ffc26 	beq	r2,zero,870f0 <rx_descriptor_end+0xfff87090>
   87100:	023fff04 	movi	r8,-4
   87104:	01c003c4 	movi	r7,15
   87108:	18c5883a 	add	r2,r3,r3
   8710c:	1085883a 	add	r2,r2,r2
   87110:	1085883a 	add	r2,r2,r2
   87114:	9895883a 	add	r10,r19,r2
   87118:	52c00304 	addi	r11,r10,12
   8711c:	1819883a 	mov	r12,r3
   87120:	5c000017 	ldw	r16,0(r11)
   87124:	59bffd04 	addi	r6,r11,-12
   87128:	8180041e 	bne	r16,r6,8713c <_malloc_r+0x264>
   8712c:	0000ce06 	br	87468 <_malloc_r+0x590>
   87130:	2000d70e 	bge	r4,zero,87490 <_malloc_r+0x5b8>
   87134:	84000317 	ldw	r16,12(r16)
   87138:	8180cb26 	beq	r16,r6,87468 <_malloc_r+0x590>
   8713c:	80800117 	ldw	r2,4(r16)
   87140:	1204703a 	and	r2,r2,r8
   87144:	1449c83a 	sub	r4,r2,r17
   87148:	393ff90e 	bge	r7,r4,87130 <rx_descriptor_end+0xfff870d0>
   8714c:	80800317 	ldw	r2,12(r16)
   87150:	80c00217 	ldw	r3,8(r16)
   87154:	89400054 	ori	r5,r17,1
   87158:	81400115 	stw	r5,4(r16)
   8715c:	18800315 	stw	r2,12(r3)
   87160:	10c00215 	stw	r3,8(r2)
   87164:	8463883a 	add	r17,r16,r17
   87168:	9c400515 	stw	r17,20(r19)
   8716c:	9c400415 	stw	r17,16(r19)
   87170:	20800054 	ori	r2,r4,1
   87174:	88800115 	stw	r2,4(r17)
   87178:	8a400315 	stw	r9,12(r17)
   8717c:	8a400215 	stw	r9,8(r17)
   87180:	8923883a 	add	r17,r17,r4
   87184:	89000015 	stw	r4,0(r17)
   87188:	9009883a 	mov	r4,r18
   8718c:	0087ea40 	call	87ea4 <__malloc_unlock>
   87190:	80800204 	addi	r2,r16,8
   87194:	003f7d06 	br	86f8c <rx_descriptor_end+0xfff86f2c>
   87198:	00800304 	movi	r2,12
   8719c:	90800015 	stw	r2,0(r18)
   871a0:	0005883a 	mov	r2,zero
   871a4:	003f7906 	br	86f8c <rx_descriptor_end+0xfff86f2c>
   871a8:	01401f84 	movi	r5,126
   871ac:	01c00fc4 	movi	r7,63
   871b0:	003f8d06 	br	86fe8 <rx_descriptor_end+0xfff86f88>
   871b4:	81000317 	ldw	r4,12(r16)
   871b8:	003f6a06 	br	86f64 <rx_descriptor_end+0xfff86f04>
   871bc:	81c5883a 	add	r2,r16,r7
   871c0:	10c00117 	ldw	r3,4(r2)
   871c4:	9009883a 	mov	r4,r18
   871c8:	18c00054 	ori	r3,r3,1
   871cc:	10c00115 	stw	r3,4(r2)
   871d0:	0087ea40 	call	87ea4 <__malloc_unlock>
   871d4:	80800204 	addi	r2,r16,8
   871d8:	003f6c06 	br	86f8c <rx_descriptor_end+0xfff86f2c>
   871dc:	9c000217 	ldw	r16,8(r19)
   871e0:	00bfff04 	movi	r2,-4
   871e4:	85800117 	ldw	r22,4(r16)
   871e8:	b0ac703a 	and	r22,r22,r2
   871ec:	b4400336 	bltu	r22,r17,871fc <_malloc_r+0x324>
   871f0:	b445c83a 	sub	r2,r22,r17
   871f4:	00c003c4 	movi	r3,15
   871f8:	18805d16 	blt	r3,r2,87370 <_malloc_r+0x498>
   871fc:	05c00274 	movhi	r23,9
   87200:	00800274 	movhi	r2,9
   87204:	bde93f04 	addi	r23,r23,-23300
   87208:	10b00904 	addi	r2,r2,-16348
   8720c:	15400017 	ldw	r21,0(r2)
   87210:	b9000017 	ldw	r4,0(r23)
   87214:	00ffffc4 	movi	r3,-1
   87218:	858d883a 	add	r6,r16,r22
   8721c:	8d6b883a 	add	r21,r17,r21
   87220:	20c0e426 	beq	r4,r3,875b4 <_malloc_r+0x6dc>
   87224:	ad4403c4 	addi	r21,r21,4111
   87228:	00fc0004 	movi	r3,-4096
   8722c:	a8ea703a 	and	r21,r21,r3
   87230:	9009883a 	mov	r4,r18
   87234:	a80b883a 	mov	r5,r21
   87238:	d9800015 	stw	r6,0(sp)
   8723c:	00876800 	call	87680 <_sbrk_r>
   87240:	00ffffc4 	movi	r3,-1
   87244:	1029883a 	mov	r20,r2
   87248:	d9800017 	ldw	r6,0(sp)
   8724c:	10c0a426 	beq	r2,r3,874e0 <_malloc_r+0x608>
   87250:	1180a236 	bltu	r2,r6,874dc <_malloc_r+0x604>
   87254:	07000274 	movhi	fp,9
   87258:	e7302a04 	addi	fp,fp,-16216
   8725c:	e0c00017 	ldw	r3,0(fp)
   87260:	a8c7883a 	add	r3,r21,r3
   87264:	e0c00015 	stw	r3,0(fp)
   87268:	3500da26 	beq	r6,r20,875d4 <_malloc_r+0x6fc>
   8726c:	b9000017 	ldw	r4,0(r23)
   87270:	00bfffc4 	movi	r2,-1
   87274:	2080e426 	beq	r4,r2,87608 <_malloc_r+0x730>
   87278:	a185c83a 	sub	r2,r20,r6
   8727c:	1885883a 	add	r2,r3,r2
   87280:	e0800015 	stw	r2,0(fp)
   87284:	a0c001cc 	andi	r3,r20,7
   87288:	1800b526 	beq	r3,zero,87560 <_malloc_r+0x688>
   8728c:	a0e9c83a 	sub	r20,r20,r3
   87290:	00840204 	movi	r2,4104
   87294:	a5000204 	addi	r20,r20,8
   87298:	10c7c83a 	sub	r3,r2,r3
   8729c:	a545883a 	add	r2,r20,r21
   872a0:	1083ffcc 	andi	r2,r2,4095
   872a4:	18abc83a 	sub	r21,r3,r2
   872a8:	9009883a 	mov	r4,r18
   872ac:	a80b883a 	mov	r5,r21
   872b0:	00876800 	call	87680 <_sbrk_r>
   872b4:	00ffffc4 	movi	r3,-1
   872b8:	10c0d026 	beq	r2,r3,875fc <_malloc_r+0x724>
   872bc:	1507c83a 	sub	r3,r2,r20
   872c0:	a8c7883a 	add	r3,r21,r3
   872c4:	18c00054 	ori	r3,r3,1
   872c8:	e0800017 	ldw	r2,0(fp)
   872cc:	9d000215 	stw	r20,8(r19)
   872d0:	a0c00115 	stw	r3,4(r20)
   872d4:	a887883a 	add	r3,r21,r2
   872d8:	e0c00015 	stw	r3,0(fp)
   872dc:	84c00e26 	beq	r16,r19,87318 <_malloc_r+0x440>
   872e0:	018003c4 	movi	r6,15
   872e4:	3580a02e 	bgeu	r6,r22,87568 <_malloc_r+0x690>
   872e8:	81400117 	ldw	r5,4(r16)
   872ec:	013ffe04 	movi	r4,-8
   872f0:	b0bffd04 	addi	r2,r22,-12
   872f4:	1104703a 	and	r2,r2,r4
   872f8:	2900004c 	andi	r4,r5,1
   872fc:	1108b03a 	or	r4,r2,r4
   87300:	81000115 	stw	r4,4(r16)
   87304:	01400144 	movi	r5,5
   87308:	8089883a 	add	r4,r16,r2
   8730c:	21400115 	stw	r5,4(r4)
   87310:	21400215 	stw	r5,8(r4)
   87314:	3080c036 	bltu	r6,r2,87618 <_malloc_r+0x740>
   87318:	00800274 	movhi	r2,9
   8731c:	10b00804 	addi	r2,r2,-16352
   87320:	11000017 	ldw	r4,0(r2)
   87324:	20c0012e 	bgeu	r4,r3,8732c <_malloc_r+0x454>
   87328:	10c00015 	stw	r3,0(r2)
   8732c:	00800274 	movhi	r2,9
   87330:	10b00704 	addi	r2,r2,-16356
   87334:	11000017 	ldw	r4,0(r2)
   87338:	9c000217 	ldw	r16,8(r19)
   8733c:	20c0012e 	bgeu	r4,r3,87344 <_malloc_r+0x46c>
   87340:	10c00015 	stw	r3,0(r2)
   87344:	80c00117 	ldw	r3,4(r16)
   87348:	00bfff04 	movi	r2,-4
   8734c:	1886703a 	and	r3,r3,r2
   87350:	1c45c83a 	sub	r2,r3,r17
   87354:	1c400236 	bltu	r3,r17,87360 <_malloc_r+0x488>
   87358:	00c003c4 	movi	r3,15
   8735c:	18800416 	blt	r3,r2,87370 <_malloc_r+0x498>
   87360:	9009883a 	mov	r4,r18
   87364:	0087ea40 	call	87ea4 <__malloc_unlock>
   87368:	0005883a 	mov	r2,zero
   8736c:	003f0706 	br	86f8c <rx_descriptor_end+0xfff86f2c>
   87370:	88c00054 	ori	r3,r17,1
   87374:	80c00115 	stw	r3,4(r16)
   87378:	8463883a 	add	r17,r16,r17
   8737c:	10800054 	ori	r2,r2,1
   87380:	9c400215 	stw	r17,8(r19)
   87384:	88800115 	stw	r2,4(r17)
   87388:	9009883a 	mov	r4,r18
   8738c:	0087ea40 	call	87ea4 <__malloc_unlock>
   87390:	80800204 	addi	r2,r16,8
   87394:	003efd06 	br	86f8c <rx_descriptor_end+0xfff86f2c>
   87398:	00800504 	movi	r2,20
   8739c:	10c0482e 	bgeu	r2,r3,874c0 <_malloc_r+0x5e8>
   873a0:	00801504 	movi	r2,84
   873a4:	10c06836 	bltu	r2,r3,87548 <_malloc_r+0x670>
   873a8:	8806d33a 	srli	r3,r17,12
   873ac:	19c01b84 	addi	r7,r3,110
   873b0:	39cb883a 	add	r5,r7,r7
   873b4:	003f0c06 	br	86fe8 <rx_descriptor_end+0xfff86f88>
   873b8:	3804d27a 	srli	r2,r7,9
   873bc:	01000104 	movi	r4,4
   873c0:	2080422e 	bgeu	r4,r2,874cc <_malloc_r+0x5f4>
   873c4:	01000504 	movi	r4,20
   873c8:	20807c36 	bltu	r4,r2,875bc <_malloc_r+0x6e4>
   873cc:	110016c4 	addi	r4,r2,91
   873d0:	210b883a 	add	r5,r4,r4
   873d4:	294b883a 	add	r5,r5,r5
   873d8:	294b883a 	add	r5,r5,r5
   873dc:	994b883a 	add	r5,r19,r5
   873e0:	28800217 	ldw	r2,8(r5)
   873e4:	02000274 	movhi	r8,9
   873e8:	42283004 	addi	r8,r8,-24384
   873ec:	11406326 	beq	r2,r5,8757c <_malloc_r+0x6a4>
   873f0:	01bfff04 	movi	r6,-4
   873f4:	11000117 	ldw	r4,4(r2)
   873f8:	2188703a 	and	r4,r4,r6
   873fc:	3900022e 	bgeu	r7,r4,87408 <_malloc_r+0x530>
   87400:	10800217 	ldw	r2,8(r2)
   87404:	28bffb1e 	bne	r5,r2,873f4 <rx_descriptor_end+0xfff87394>
   87408:	11800317 	ldw	r6,12(r2)
   8740c:	99000117 	ldw	r4,4(r19)
   87410:	81800315 	stw	r6,12(r16)
   87414:	80800215 	stw	r2,8(r16)
   87418:	34000215 	stw	r16,8(r6)
   8741c:	14000315 	stw	r16,12(r2)
   87420:	003f2706 	br	870c0 <rx_descriptor_end+0xfff87060>
   87424:	88c00054 	ori	r3,r17,1
   87428:	80c00115 	stw	r3,4(r16)
   8742c:	8463883a 	add	r17,r16,r17
   87430:	34400515 	stw	r17,20(r6)
   87434:	34400415 	stw	r17,16(r6)
   87438:	10c00054 	ori	r3,r2,1
   8743c:	8a400315 	stw	r9,12(r17)
   87440:	8a400215 	stw	r9,8(r17)
   87444:	88c00115 	stw	r3,4(r17)
   87448:	88a3883a 	add	r17,r17,r2
   8744c:	88800015 	stw	r2,0(r17)
   87450:	9009883a 	mov	r4,r18
   87454:	0087ea40 	call	87ea4 <__malloc_unlock>
   87458:	80800204 	addi	r2,r16,8
   8745c:	003ecb06 	br	86f8c <rx_descriptor_end+0xfff86f2c>
   87460:	31000117 	ldw	r4,4(r6)
   87464:	003f1606 	br	870c0 <rx_descriptor_end+0xfff87060>
   87468:	63000044 	addi	r12,r12,1
   8746c:	608000cc 	andi	r2,r12,3
   87470:	5ac00204 	addi	r11,r11,8
   87474:	103f2a1e 	bne	r2,zero,87120 <rx_descriptor_end+0xfff870c0>
   87478:	00002106 	br	87500 <_malloc_r+0x628>
   8747c:	80800204 	addi	r2,r16,8
   87480:	84000517 	ldw	r16,20(r16)
   87484:	143eb31e 	bne	r2,r16,86f54 <rx_descriptor_end+0xfff86ef4>
   87488:	18c00084 	addi	r3,r3,2
   8748c:	003eec06 	br	87040 <rx_descriptor_end+0xfff86fe0>
   87490:	8085883a 	add	r2,r16,r2
   87494:	10c00117 	ldw	r3,4(r2)
   87498:	81000317 	ldw	r4,12(r16)
   8749c:	81400217 	ldw	r5,8(r16)
   874a0:	18c00054 	ori	r3,r3,1
   874a4:	10c00115 	stw	r3,4(r2)
   874a8:	29000315 	stw	r4,12(r5)
   874ac:	21400215 	stw	r5,8(r4)
   874b0:	9009883a 	mov	r4,r18
   874b4:	0087ea40 	call	87ea4 <__malloc_unlock>
   874b8:	80800204 	addi	r2,r16,8
   874bc:	003eb306 	br	86f8c <rx_descriptor_end+0xfff86f2c>
   874c0:	19c016c4 	addi	r7,r3,91
   874c4:	39cb883a 	add	r5,r7,r7
   874c8:	003ec706 	br	86fe8 <rx_descriptor_end+0xfff86f88>
   874cc:	3804d1ba 	srli	r2,r7,6
   874d0:	11000e04 	addi	r4,r2,56
   874d4:	210b883a 	add	r5,r4,r4
   874d8:	003fbe06 	br	873d4 <rx_descriptor_end+0xfff87374>
   874dc:	84ff5d26 	beq	r16,r19,87254 <rx_descriptor_end+0xfff871f4>
   874e0:	9c000217 	ldw	r16,8(r19)
   874e4:	00bfff04 	movi	r2,-4
   874e8:	80c00117 	ldw	r3,4(r16)
   874ec:	1886703a 	and	r3,r3,r2
   874f0:	003f9706 	br	87350 <rx_descriptor_end+0xfff872f0>
   874f4:	52800017 	ldw	r10,0(r10)
   874f8:	18ffffc4 	addi	r3,r3,-1
   874fc:	50805c1e 	bne	r10,r2,87670 <_malloc_r+0x798>
   87500:	190000cc 	andi	r4,r3,3
   87504:	50bffe04 	addi	r2,r10,-8
   87508:	203ffa1e 	bne	r4,zero,874f4 <rx_descriptor_end+0xfff87494>
   8750c:	98800117 	ldw	r2,4(r19)
   87510:	0146303a 	nor	r3,zero,r5
   87514:	1884703a 	and	r2,r3,r2
   87518:	98800115 	stw	r2,4(r19)
   8751c:	294b883a 	add	r5,r5,r5
   87520:	117f2e36 	bltu	r2,r5,871dc <rx_descriptor_end+0xfff8717c>
   87524:	283f2d26 	beq	r5,zero,871dc <rx_descriptor_end+0xfff8717c>
   87528:	1146703a 	and	r3,r2,r5
   8752c:	1800521e 	bne	r3,zero,87678 <_malloc_r+0x7a0>
   87530:	6007883a 	mov	r3,r12
   87534:	294b883a 	add	r5,r5,r5
   87538:	1148703a 	and	r4,r2,r5
   8753c:	18c00104 	addi	r3,r3,4
   87540:	203ffc26 	beq	r4,zero,87534 <rx_descriptor_end+0xfff874d4>
   87544:	003ef006 	br	87108 <rx_descriptor_end+0xfff870a8>
   87548:	00805504 	movi	r2,340
   8754c:	10c01336 	bltu	r2,r3,8759c <_malloc_r+0x6c4>
   87550:	8806d3fa 	srli	r3,r17,15
   87554:	19c01dc4 	addi	r7,r3,119
   87558:	39cb883a 	add	r5,r7,r7
   8755c:	003ea206 	br	86fe8 <rx_descriptor_end+0xfff86f88>
   87560:	00c40004 	movi	r3,4096
   87564:	003f4d06 	br	8729c <rx_descriptor_end+0xfff8723c>
   87568:	00800044 	movi	r2,1
   8756c:	a0800115 	stw	r2,4(r20)
   87570:	a021883a 	mov	r16,r20
   87574:	0007883a 	mov	r3,zero
   87578:	003f7506 	br	87350 <rx_descriptor_end+0xfff872f0>
   8757c:	200bd0ba 	srai	r5,r4,2
   87580:	01800044 	movi	r6,1
   87584:	41000117 	ldw	r4,4(r8)
   87588:	314a983a 	sll	r5,r6,r5
   8758c:	100d883a 	mov	r6,r2
   87590:	2908b03a 	or	r4,r5,r4
   87594:	41000115 	stw	r4,4(r8)
   87598:	003f9d06 	br	87410 <rx_descriptor_end+0xfff873b0>
   8759c:	00815504 	movi	r2,1364
   875a0:	10c01336 	bltu	r2,r3,875f0 <_malloc_r+0x718>
   875a4:	8806d4ba 	srli	r3,r17,18
   875a8:	19c01f04 	addi	r7,r3,124
   875ac:	39cb883a 	add	r5,r7,r7
   875b0:	003e8d06 	br	86fe8 <rx_descriptor_end+0xfff86f88>
   875b4:	ad400404 	addi	r21,r21,16
   875b8:	003f1d06 	br	87230 <rx_descriptor_end+0xfff871d0>
   875bc:	01001504 	movi	r4,84
   875c0:	20801c36 	bltu	r4,r2,87634 <_malloc_r+0x75c>
   875c4:	3804d33a 	srli	r2,r7,12
   875c8:	11001b84 	addi	r4,r2,110
   875cc:	210b883a 	add	r5,r4,r4
   875d0:	003f8006 	br	873d4 <rx_descriptor_end+0xfff87374>
   875d4:	3083ffcc 	andi	r2,r6,4095
   875d8:	103f241e 	bne	r2,zero,8726c <rx_descriptor_end+0xfff8720c>
   875dc:	99000217 	ldw	r4,8(r19)
   875e0:	ad85883a 	add	r2,r21,r22
   875e4:	10800054 	ori	r2,r2,1
   875e8:	20800115 	stw	r2,4(r4)
   875ec:	003f4a06 	br	87318 <rx_descriptor_end+0xfff872b8>
   875f0:	01403f04 	movi	r5,252
   875f4:	01c01f84 	movi	r7,126
   875f8:	003e7b06 	br	86fe8 <rx_descriptor_end+0xfff86f88>
   875fc:	00c00044 	movi	r3,1
   87600:	002b883a 	mov	r21,zero
   87604:	003f3006 	br	872c8 <rx_descriptor_end+0xfff87268>
   87608:	00800274 	movhi	r2,9
   8760c:	10a93f04 	addi	r2,r2,-23300
   87610:	15000015 	stw	r20,0(r2)
   87614:	003f1b06 	br	87284 <rx_descriptor_end+0xfff87224>
   87618:	9009883a 	mov	r4,r18
   8761c:	81400204 	addi	r5,r16,8
   87620:	00868c00 	call	868c0 <_free_r>
   87624:	00800274 	movhi	r2,9
   87628:	10b02a04 	addi	r2,r2,-16216
   8762c:	10c00017 	ldw	r3,0(r2)
   87630:	003f3906 	br	87318 <rx_descriptor_end+0xfff872b8>
   87634:	01005504 	movi	r4,340
   87638:	20800436 	bltu	r4,r2,8764c <_malloc_r+0x774>
   8763c:	3804d3fa 	srli	r2,r7,15
   87640:	11001dc4 	addi	r4,r2,119
   87644:	210b883a 	add	r5,r4,r4
   87648:	003f6206 	br	873d4 <rx_descriptor_end+0xfff87374>
   8764c:	01015504 	movi	r4,1364
   87650:	20800436 	bltu	r4,r2,87664 <_malloc_r+0x78c>
   87654:	3804d4ba 	srli	r2,r7,18
   87658:	11001f04 	addi	r4,r2,124
   8765c:	210b883a 	add	r5,r4,r4
   87660:	003f5c06 	br	873d4 <rx_descriptor_end+0xfff87374>
   87664:	01403f04 	movi	r5,252
   87668:	01001f84 	movi	r4,126
   8766c:	003f5906 	br	873d4 <rx_descriptor_end+0xfff87374>
   87670:	98800117 	ldw	r2,4(r19)
   87674:	003fa906 	br	8751c <rx_descriptor_end+0xfff874bc>
   87678:	6007883a 	mov	r3,r12
   8767c:	003ea206 	br	87108 <rx_descriptor_end+0xfff870a8>

00087680 <_sbrk_r>:
   87680:	defffd04 	addi	sp,sp,-12
   87684:	dc000015 	stw	r16,0(sp)
   87688:	04000274 	movhi	r16,9
   8768c:	dc400115 	stw	r17,4(sp)
   87690:	84300604 	addi	r16,r16,-16360
   87694:	2023883a 	mov	r17,r4
   87698:	2809883a 	mov	r4,r5
   8769c:	dfc00215 	stw	ra,8(sp)
   876a0:	80000015 	stw	zero,0(r16)
   876a4:	00880100 	call	88010 <sbrk>
   876a8:	00ffffc4 	movi	r3,-1
   876ac:	10c00526 	beq	r2,r3,876c4 <_sbrk_r+0x44>
   876b0:	dfc00217 	ldw	ra,8(sp)
   876b4:	dc400117 	ldw	r17,4(sp)
   876b8:	dc000017 	ldw	r16,0(sp)
   876bc:	dec00304 	addi	sp,sp,12
   876c0:	f800283a 	ret
   876c4:	80c00017 	ldw	r3,0(r16)
   876c8:	183ff926 	beq	r3,zero,876b0 <rx_descriptor_end+0xfff87650>
   876cc:	88c00015 	stw	r3,0(r17)
   876d0:	003ff706 	br	876b0 <rx_descriptor_end+0xfff87650>

000876d4 <__sread>:
   876d4:	defffe04 	addi	sp,sp,-8
   876d8:	dc000015 	stw	r16,0(sp)
   876dc:	2821883a 	mov	r16,r5
   876e0:	2940038f 	ldh	r5,14(r5)
   876e4:	dfc00115 	stw	ra,4(sp)
   876e8:	0087adc0 	call	87adc <_read_r>
   876ec:	10000716 	blt	r2,zero,8770c <__sread+0x38>
   876f0:	80c01417 	ldw	r3,80(r16)
   876f4:	1887883a 	add	r3,r3,r2
   876f8:	80c01415 	stw	r3,80(r16)
   876fc:	dfc00117 	ldw	ra,4(sp)
   87700:	dc000017 	ldw	r16,0(sp)
   87704:	dec00204 	addi	sp,sp,8
   87708:	f800283a 	ret
   8770c:	80c0030b 	ldhu	r3,12(r16)
   87710:	18fbffcc 	andi	r3,r3,61439
   87714:	80c0030d 	sth	r3,12(r16)
   87718:	dfc00117 	ldw	ra,4(sp)
   8771c:	dc000017 	ldw	r16,0(sp)
   87720:	dec00204 	addi	sp,sp,8
   87724:	f800283a 	ret

00087728 <__seofread>:
   87728:	0005883a 	mov	r2,zero
   8772c:	f800283a 	ret

00087730 <__swrite>:
   87730:	2880030b 	ldhu	r2,12(r5)
   87734:	defffb04 	addi	sp,sp,-20
   87738:	dcc00315 	stw	r19,12(sp)
   8773c:	dc800215 	stw	r18,8(sp)
   87740:	dc400115 	stw	r17,4(sp)
   87744:	dc000015 	stw	r16,0(sp)
   87748:	dfc00415 	stw	ra,16(sp)
   8774c:	10c0400c 	andi	r3,r2,256
   87750:	2821883a 	mov	r16,r5
   87754:	2027883a 	mov	r19,r4
   87758:	3025883a 	mov	r18,r6
   8775c:	3823883a 	mov	r17,r7
   87760:	18000526 	beq	r3,zero,87778 <__swrite+0x48>
   87764:	2940038f 	ldh	r5,14(r5)
   87768:	000d883a 	mov	r6,zero
   8776c:	01c00084 	movi	r7,2
   87770:	0087a800 	call	87a80 <_lseek_r>
   87774:	8080030b 	ldhu	r2,12(r16)
   87778:	8140038f 	ldh	r5,14(r16)
   8777c:	10bbffcc 	andi	r2,r2,61439
   87780:	9809883a 	mov	r4,r19
   87784:	900d883a 	mov	r6,r18
   87788:	880f883a 	mov	r7,r17
   8778c:	8080030d 	sth	r2,12(r16)
   87790:	dfc00417 	ldw	ra,16(sp)
   87794:	dcc00317 	ldw	r19,12(sp)
   87798:	dc800217 	ldw	r18,8(sp)
   8779c:	dc400117 	ldw	r17,4(sp)
   877a0:	dc000017 	ldw	r16,0(sp)
   877a4:	dec00504 	addi	sp,sp,20
   877a8:	00878101 	jmpi	87810 <_write_r>

000877ac <__sseek>:
   877ac:	defffe04 	addi	sp,sp,-8
   877b0:	dc000015 	stw	r16,0(sp)
   877b4:	2821883a 	mov	r16,r5
   877b8:	2940038f 	ldh	r5,14(r5)
   877bc:	dfc00115 	stw	ra,4(sp)
   877c0:	0087a800 	call	87a80 <_lseek_r>
   877c4:	00ffffc4 	movi	r3,-1
   877c8:	10c00826 	beq	r2,r3,877ec <__sseek+0x40>
   877cc:	80c0030b 	ldhu	r3,12(r16)
   877d0:	80801415 	stw	r2,80(r16)
   877d4:	18c40014 	ori	r3,r3,4096
   877d8:	80c0030d 	sth	r3,12(r16)
   877dc:	dfc00117 	ldw	ra,4(sp)
   877e0:	dc000017 	ldw	r16,0(sp)
   877e4:	dec00204 	addi	sp,sp,8
   877e8:	f800283a 	ret
   877ec:	80c0030b 	ldhu	r3,12(r16)
   877f0:	18fbffcc 	andi	r3,r3,61439
   877f4:	80c0030d 	sth	r3,12(r16)
   877f8:	dfc00117 	ldw	ra,4(sp)
   877fc:	dc000017 	ldw	r16,0(sp)
   87800:	dec00204 	addi	sp,sp,8
   87804:	f800283a 	ret

00087808 <__sclose>:
   87808:	2940038f 	ldh	r5,14(r5)
   8780c:	008786c1 	jmpi	8786c <_close_r>

00087810 <_write_r>:
   87810:	defffd04 	addi	sp,sp,-12
   87814:	dc000015 	stw	r16,0(sp)
   87818:	04000274 	movhi	r16,9
   8781c:	dc400115 	stw	r17,4(sp)
   87820:	84300604 	addi	r16,r16,-16360
   87824:	2023883a 	mov	r17,r4
   87828:	2809883a 	mov	r4,r5
   8782c:	300b883a 	mov	r5,r6
   87830:	380d883a 	mov	r6,r7
   87834:	dfc00215 	stw	ra,8(sp)
   87838:	80000015 	stw	zero,0(r16)
   8783c:	00881100 	call	88110 <write>
   87840:	00ffffc4 	movi	r3,-1
   87844:	10c00526 	beq	r2,r3,8785c <_write_r+0x4c>
   87848:	dfc00217 	ldw	ra,8(sp)
   8784c:	dc400117 	ldw	r17,4(sp)
   87850:	dc000017 	ldw	r16,0(sp)
   87854:	dec00304 	addi	sp,sp,12
   87858:	f800283a 	ret
   8785c:	80c00017 	ldw	r3,0(r16)
   87860:	183ff926 	beq	r3,zero,87848 <rx_descriptor_end+0xfff877e8>
   87864:	88c00015 	stw	r3,0(r17)
   87868:	003ff706 	br	87848 <rx_descriptor_end+0xfff877e8>

0008786c <_close_r>:
   8786c:	defffd04 	addi	sp,sp,-12
   87870:	dc000015 	stw	r16,0(sp)
   87874:	04000274 	movhi	r16,9
   87878:	dc400115 	stw	r17,4(sp)
   8787c:	84300604 	addi	r16,r16,-16360
   87880:	2023883a 	mov	r17,r4
   87884:	2809883a 	mov	r4,r5
   87888:	dfc00215 	stw	ra,8(sp)
   8788c:	80000015 	stw	zero,0(r16)
   87890:	0084a300 	call	84a30 <close>
   87894:	00ffffc4 	movi	r3,-1
   87898:	10c00526 	beq	r2,r3,878b0 <_close_r+0x44>
   8789c:	dfc00217 	ldw	ra,8(sp)
   878a0:	dc400117 	ldw	r17,4(sp)
   878a4:	dc000017 	ldw	r16,0(sp)
   878a8:	dec00304 	addi	sp,sp,12
   878ac:	f800283a 	ret
   878b0:	80c00017 	ldw	r3,0(r16)
   878b4:	183ff926 	beq	r3,zero,8789c <rx_descriptor_end+0xfff8783c>
   878b8:	88c00015 	stw	r3,0(r17)
   878bc:	003ff706 	br	8789c <rx_descriptor_end+0xfff8783c>

000878c0 <_fclose_r>:
   878c0:	28003226 	beq	r5,zero,8798c <_fclose_r+0xcc>
   878c4:	defffc04 	addi	sp,sp,-16
   878c8:	dc400115 	stw	r17,4(sp)
   878cc:	2023883a 	mov	r17,r4
   878d0:	dc000015 	stw	r16,0(sp)
   878d4:	dfc00315 	stw	ra,12(sp)
   878d8:	dc800215 	stw	r18,8(sp)
   878dc:	2821883a 	mov	r16,r5
   878e0:	008675c0 	call	8675c <__sfp_lock_acquire>
   878e4:	88000226 	beq	r17,zero,878f0 <_fclose_r+0x30>
   878e8:	88800e17 	ldw	r2,56(r17)
   878ec:	10002926 	beq	r2,zero,87994 <_fclose_r+0xd4>
   878f0:	8080030f 	ldh	r2,12(r16)
   878f4:	10002226 	beq	r2,zero,87980 <_fclose_r+0xc0>
   878f8:	8809883a 	mov	r4,r17
   878fc:	800b883a 	mov	r5,r16
   87900:	00861a40 	call	861a4 <_fflush_r>
   87904:	1025883a 	mov	r18,r2
   87908:	80800b17 	ldw	r2,44(r16)
   8790c:	10000426 	beq	r2,zero,87920 <_fclose_r+0x60>
   87910:	81400717 	ldw	r5,28(r16)
   87914:	8809883a 	mov	r4,r17
   87918:	103ee83a 	callr	r2
   8791c:	10002616 	blt	r2,zero,879b8 <_fclose_r+0xf8>
   87920:	8080030b 	ldhu	r2,12(r16)
   87924:	1080200c 	andi	r2,r2,128
   87928:	10001f1e 	bne	r2,zero,879a8 <_fclose_r+0xe8>
   8792c:	81400c17 	ldw	r5,48(r16)
   87930:	28000526 	beq	r5,zero,87948 <_fclose_r+0x88>
   87934:	80801004 	addi	r2,r16,64
   87938:	28800226 	beq	r5,r2,87944 <_fclose_r+0x84>
   8793c:	8809883a 	mov	r4,r17
   87940:	00868c00 	call	868c0 <_free_r>
   87944:	80000c15 	stw	zero,48(r16)
   87948:	81401117 	ldw	r5,68(r16)
   8794c:	28000326 	beq	r5,zero,8795c <_fclose_r+0x9c>
   87950:	8809883a 	mov	r4,r17
   87954:	00868c00 	call	868c0 <_free_r>
   87958:	80001115 	stw	zero,68(r16)
   8795c:	8000030d 	sth	zero,12(r16)
   87960:	00867600 	call	86760 <__sfp_lock_release>
   87964:	9005883a 	mov	r2,r18
   87968:	dfc00317 	ldw	ra,12(sp)
   8796c:	dc800217 	ldw	r18,8(sp)
   87970:	dc400117 	ldw	r17,4(sp)
   87974:	dc000017 	ldw	r16,0(sp)
   87978:	dec00404 	addi	sp,sp,16
   8797c:	f800283a 	ret
   87980:	00867600 	call	86760 <__sfp_lock_release>
   87984:	0005883a 	mov	r2,zero
   87988:	003ff706 	br	87968 <rx_descriptor_end+0xfff87908>
   8798c:	0005883a 	mov	r2,zero
   87990:	f800283a 	ret
   87994:	8809883a 	mov	r4,r17
   87998:	008674c0 	call	8674c <__sinit>
   8799c:	8080030f 	ldh	r2,12(r16)
   879a0:	103fd51e 	bne	r2,zero,878f8 <rx_descriptor_end+0xfff87898>
   879a4:	003ff606 	br	87980 <rx_descriptor_end+0xfff87920>
   879a8:	81400417 	ldw	r5,16(r16)
   879ac:	8809883a 	mov	r4,r17
   879b0:	00868c00 	call	868c0 <_free_r>
   879b4:	003fdd06 	br	8792c <rx_descriptor_end+0xfff878cc>
   879b8:	04bfffc4 	movi	r18,-1
   879bc:	003fd806 	br	87920 <rx_descriptor_end+0xfff878c0>

000879c0 <fclose>:
   879c0:	00800274 	movhi	r2,9
   879c4:	10a93e04 	addi	r2,r2,-23304
   879c8:	200b883a 	mov	r5,r4
   879cc:	11000017 	ldw	r4,0(r2)
   879d0:	00878c01 	jmpi	878c0 <_fclose_r>

000879d4 <_fstat_r>:
   879d4:	defffd04 	addi	sp,sp,-12
   879d8:	dc000015 	stw	r16,0(sp)
   879dc:	04000274 	movhi	r16,9
   879e0:	dc400115 	stw	r17,4(sp)
   879e4:	84300604 	addi	r16,r16,-16360
   879e8:	2023883a 	mov	r17,r4
   879ec:	2809883a 	mov	r4,r5
   879f0:	300b883a 	mov	r5,r6
   879f4:	dfc00215 	stw	ra,8(sp)
   879f8:	80000015 	stw	zero,0(r16)
   879fc:	0087bbc0 	call	87bbc <fstat>
   87a00:	00ffffc4 	movi	r3,-1
   87a04:	10c00526 	beq	r2,r3,87a1c <_fstat_r+0x48>
   87a08:	dfc00217 	ldw	ra,8(sp)
   87a0c:	dc400117 	ldw	r17,4(sp)
   87a10:	dc000017 	ldw	r16,0(sp)
   87a14:	dec00304 	addi	sp,sp,12
   87a18:	f800283a 	ret
   87a1c:	80c00017 	ldw	r3,0(r16)
   87a20:	183ff926 	beq	r3,zero,87a08 <rx_descriptor_end+0xfff879a8>
   87a24:	88c00015 	stw	r3,0(r17)
   87a28:	003ff706 	br	87a08 <rx_descriptor_end+0xfff879a8>

00087a2c <_isatty_r>:
   87a2c:	defffd04 	addi	sp,sp,-12
   87a30:	dc000015 	stw	r16,0(sp)
   87a34:	04000274 	movhi	r16,9
   87a38:	dc400115 	stw	r17,4(sp)
   87a3c:	84300604 	addi	r16,r16,-16360
   87a40:	2023883a 	mov	r17,r4
   87a44:	2809883a 	mov	r4,r5
   87a48:	dfc00215 	stw	ra,8(sp)
   87a4c:	80000015 	stw	zero,0(r16)
   87a50:	0087cbc0 	call	87cbc <isatty>
   87a54:	00ffffc4 	movi	r3,-1
   87a58:	10c00526 	beq	r2,r3,87a70 <_isatty_r+0x44>
   87a5c:	dfc00217 	ldw	ra,8(sp)
   87a60:	dc400117 	ldw	r17,4(sp)
   87a64:	dc000017 	ldw	r16,0(sp)
   87a68:	dec00304 	addi	sp,sp,12
   87a6c:	f800283a 	ret
   87a70:	80c00017 	ldw	r3,0(r16)
   87a74:	183ff926 	beq	r3,zero,87a5c <rx_descriptor_end+0xfff879fc>
   87a78:	88c00015 	stw	r3,0(r17)
   87a7c:	003ff706 	br	87a5c <rx_descriptor_end+0xfff879fc>

00087a80 <_lseek_r>:
   87a80:	defffd04 	addi	sp,sp,-12
   87a84:	dc000015 	stw	r16,0(sp)
   87a88:	04000274 	movhi	r16,9
   87a8c:	dc400115 	stw	r17,4(sp)
   87a90:	84300604 	addi	r16,r16,-16360
   87a94:	2023883a 	mov	r17,r4
   87a98:	2809883a 	mov	r4,r5
   87a9c:	300b883a 	mov	r5,r6
   87aa0:	380d883a 	mov	r6,r7
   87aa4:	dfc00215 	stw	ra,8(sp)
   87aa8:	80000015 	stw	zero,0(r16)
   87aac:	0087db00 	call	87db0 <lseek>
   87ab0:	00ffffc4 	movi	r3,-1
   87ab4:	10c00526 	beq	r2,r3,87acc <_lseek_r+0x4c>
   87ab8:	dfc00217 	ldw	ra,8(sp)
   87abc:	dc400117 	ldw	r17,4(sp)
   87ac0:	dc000017 	ldw	r16,0(sp)
   87ac4:	dec00304 	addi	sp,sp,12
   87ac8:	f800283a 	ret
   87acc:	80c00017 	ldw	r3,0(r16)
   87ad0:	183ff926 	beq	r3,zero,87ab8 <rx_descriptor_end+0xfff87a58>
   87ad4:	88c00015 	stw	r3,0(r17)
   87ad8:	003ff706 	br	87ab8 <rx_descriptor_end+0xfff87a58>

00087adc <_read_r>:
   87adc:	defffd04 	addi	sp,sp,-12
   87ae0:	dc000015 	stw	r16,0(sp)
   87ae4:	04000274 	movhi	r16,9
   87ae8:	dc400115 	stw	r17,4(sp)
   87aec:	84300604 	addi	r16,r16,-16360
   87af0:	2023883a 	mov	r17,r4
   87af4:	2809883a 	mov	r4,r5
   87af8:	300b883a 	mov	r5,r6
   87afc:	380d883a 	mov	r6,r7
   87b00:	dfc00215 	stw	ra,8(sp)
   87b04:	80000015 	stw	zero,0(r16)
   87b08:	0087f140 	call	87f14 <read>
   87b0c:	00ffffc4 	movi	r3,-1
   87b10:	10c00526 	beq	r2,r3,87b28 <_read_r+0x4c>
   87b14:	dfc00217 	ldw	ra,8(sp)
   87b18:	dc400117 	ldw	r17,4(sp)
   87b1c:	dc000017 	ldw	r16,0(sp)
   87b20:	dec00304 	addi	sp,sp,12
   87b24:	f800283a 	ret
   87b28:	80c00017 	ldw	r3,0(r16)
   87b2c:	183ff926 	beq	r3,zero,87b14 <rx_descriptor_end+0xfff87ab4>
   87b30:	88c00015 	stw	r3,0(r17)
   87b34:	003ff706 	br	87b14 <rx_descriptor_end+0xfff87ab4>

00087b38 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   87b38:	defffd04 	addi	sp,sp,-12
   87b3c:	df000215 	stw	fp,8(sp)
   87b40:	df000204 	addi	fp,sp,8
   87b44:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   87b48:	0001883a 	nop
   87b4c:	e0bfff17 	ldw	r2,-4(fp)
   87b50:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   87b54:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   87b58:	10000226 	beq	r2,zero,87b64 <_exit+0x2c>
    ALT_SIM_FAIL();
   87b5c:	002af070 	cmpltui	zero,zero,43969
   87b60:	00000106 	br	87b68 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   87b64:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   87b68:	003fff06 	br	87b68 <rx_descriptor_end+0xfff87b08>

00087b6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   87b6c:	defffe04 	addi	sp,sp,-8
   87b70:	dfc00115 	stw	ra,4(sp)
   87b74:	df000015 	stw	fp,0(sp)
   87b78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   87b7c:	00800274 	movhi	r2,9
   87b80:	10a93904 	addi	r2,r2,-23324
   87b84:	10800017 	ldw	r2,0(r2)
   87b88:	10000526 	beq	r2,zero,87ba0 <alt_get_errno+0x34>
   87b8c:	00800274 	movhi	r2,9
   87b90:	10a93904 	addi	r2,r2,-23324
   87b94:	10800017 	ldw	r2,0(r2)
   87b98:	103ee83a 	callr	r2
   87b9c:	00000206 	br	87ba8 <alt_get_errno+0x3c>
   87ba0:	00800274 	movhi	r2,9
   87ba4:	10b00604 	addi	r2,r2,-16360
}
   87ba8:	e037883a 	mov	sp,fp
   87bac:	dfc00117 	ldw	ra,4(sp)
   87bb0:	df000017 	ldw	fp,0(sp)
   87bb4:	dec00204 	addi	sp,sp,8
   87bb8:	f800283a 	ret

00087bbc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   87bbc:	defffb04 	addi	sp,sp,-20
   87bc0:	dfc00415 	stw	ra,16(sp)
   87bc4:	df000315 	stw	fp,12(sp)
   87bc8:	df000304 	addi	fp,sp,12
   87bcc:	e13ffe15 	stw	r4,-8(fp)
   87bd0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   87bd4:	e0bffe17 	ldw	r2,-8(fp)
   87bd8:	10000616 	blt	r2,zero,87bf4 <fstat+0x38>
   87bdc:	e0bffe17 	ldw	r2,-8(fp)
   87be0:	10c00324 	muli	r3,r2,12
   87be4:	00800274 	movhi	r2,9
   87be8:	10a6c704 	addi	r2,r2,-25828
   87bec:	1885883a 	add	r2,r3,r2
   87bf0:	00000106 	br	87bf8 <fstat+0x3c>
   87bf4:	0005883a 	mov	r2,zero
   87bf8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   87bfc:	e0bffd17 	ldw	r2,-12(fp)
   87c00:	10001026 	beq	r2,zero,87c44 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   87c04:	e0bffd17 	ldw	r2,-12(fp)
   87c08:	10800017 	ldw	r2,0(r2)
   87c0c:	10800817 	ldw	r2,32(r2)
   87c10:	10000726 	beq	r2,zero,87c30 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   87c14:	e0bffd17 	ldw	r2,-12(fp)
   87c18:	10800017 	ldw	r2,0(r2)
   87c1c:	10800817 	ldw	r2,32(r2)
   87c20:	e13ffd17 	ldw	r4,-12(fp)
   87c24:	e17fff17 	ldw	r5,-4(fp)
   87c28:	103ee83a 	callr	r2
   87c2c:	00000a06 	br	87c58 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   87c30:	e0bfff17 	ldw	r2,-4(fp)
   87c34:	00c80004 	movi	r3,8192
   87c38:	10c00115 	stw	r3,4(r2)
      return 0;
   87c3c:	0005883a 	mov	r2,zero
   87c40:	00000506 	br	87c58 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   87c44:	0087b6c0 	call	87b6c <alt_get_errno>
   87c48:	1007883a 	mov	r3,r2
   87c4c:	00801444 	movi	r2,81
   87c50:	18800015 	stw	r2,0(r3)
    return -1;
   87c54:	00bfffc4 	movi	r2,-1
  }
}
   87c58:	e037883a 	mov	sp,fp
   87c5c:	dfc00117 	ldw	ra,4(sp)
   87c60:	df000017 	ldw	fp,0(sp)
   87c64:	dec00204 	addi	sp,sp,8
   87c68:	f800283a 	ret

00087c6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   87c6c:	defffe04 	addi	sp,sp,-8
   87c70:	dfc00115 	stw	ra,4(sp)
   87c74:	df000015 	stw	fp,0(sp)
   87c78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   87c7c:	00800274 	movhi	r2,9
   87c80:	10a93904 	addi	r2,r2,-23324
   87c84:	10800017 	ldw	r2,0(r2)
   87c88:	10000526 	beq	r2,zero,87ca0 <alt_get_errno+0x34>
   87c8c:	00800274 	movhi	r2,9
   87c90:	10a93904 	addi	r2,r2,-23324
   87c94:	10800017 	ldw	r2,0(r2)
   87c98:	103ee83a 	callr	r2
   87c9c:	00000206 	br	87ca8 <alt_get_errno+0x3c>
   87ca0:	00800274 	movhi	r2,9
   87ca4:	10b00604 	addi	r2,r2,-16360
}
   87ca8:	e037883a 	mov	sp,fp
   87cac:	dfc00117 	ldw	ra,4(sp)
   87cb0:	df000017 	ldw	fp,0(sp)
   87cb4:	dec00204 	addi	sp,sp,8
   87cb8:	f800283a 	ret

00087cbc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   87cbc:	deffed04 	addi	sp,sp,-76
   87cc0:	dfc01215 	stw	ra,72(sp)
   87cc4:	df001115 	stw	fp,68(sp)
   87cc8:	df001104 	addi	fp,sp,68
   87ccc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   87cd0:	e0bfff17 	ldw	r2,-4(fp)
   87cd4:	10000616 	blt	r2,zero,87cf0 <isatty+0x34>
   87cd8:	e0bfff17 	ldw	r2,-4(fp)
   87cdc:	10c00324 	muli	r3,r2,12
   87ce0:	00800274 	movhi	r2,9
   87ce4:	10a6c704 	addi	r2,r2,-25828
   87ce8:	1885883a 	add	r2,r3,r2
   87cec:	00000106 	br	87cf4 <isatty+0x38>
   87cf0:	0005883a 	mov	r2,zero
   87cf4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   87cf8:	e0bfef17 	ldw	r2,-68(fp)
   87cfc:	10000e26 	beq	r2,zero,87d38 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   87d00:	e0bfef17 	ldw	r2,-68(fp)
   87d04:	10800017 	ldw	r2,0(r2)
   87d08:	10800817 	ldw	r2,32(r2)
   87d0c:	1000021e 	bne	r2,zero,87d18 <isatty+0x5c>
    {
      return 1;
   87d10:	00800044 	movi	r2,1
   87d14:	00000d06 	br	87d4c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   87d18:	e0bff004 	addi	r2,fp,-64
   87d1c:	e13fff17 	ldw	r4,-4(fp)
   87d20:	100b883a 	mov	r5,r2
   87d24:	0087bbc0 	call	87bbc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   87d28:	e0bff117 	ldw	r2,-60(fp)
   87d2c:	10880020 	cmpeqi	r2,r2,8192
   87d30:	10803fcc 	andi	r2,r2,255
   87d34:	00000506 	br	87d4c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   87d38:	0087c6c0 	call	87c6c <alt_get_errno>
   87d3c:	1007883a 	mov	r3,r2
   87d40:	00801444 	movi	r2,81
   87d44:	18800015 	stw	r2,0(r3)
    return 0;
   87d48:	0005883a 	mov	r2,zero
  }
}
   87d4c:	e037883a 	mov	sp,fp
   87d50:	dfc00117 	ldw	ra,4(sp)
   87d54:	df000017 	ldw	fp,0(sp)
   87d58:	dec00204 	addi	sp,sp,8
   87d5c:	f800283a 	ret

00087d60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   87d60:	defffe04 	addi	sp,sp,-8
   87d64:	dfc00115 	stw	ra,4(sp)
   87d68:	df000015 	stw	fp,0(sp)
   87d6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   87d70:	00800274 	movhi	r2,9
   87d74:	10a93904 	addi	r2,r2,-23324
   87d78:	10800017 	ldw	r2,0(r2)
   87d7c:	10000526 	beq	r2,zero,87d94 <alt_get_errno+0x34>
   87d80:	00800274 	movhi	r2,9
   87d84:	10a93904 	addi	r2,r2,-23324
   87d88:	10800017 	ldw	r2,0(r2)
   87d8c:	103ee83a 	callr	r2
   87d90:	00000206 	br	87d9c <alt_get_errno+0x3c>
   87d94:	00800274 	movhi	r2,9
   87d98:	10b00604 	addi	r2,r2,-16360
}
   87d9c:	e037883a 	mov	sp,fp
   87da0:	dfc00117 	ldw	ra,4(sp)
   87da4:	df000017 	ldw	fp,0(sp)
   87da8:	dec00204 	addi	sp,sp,8
   87dac:	f800283a 	ret

00087db0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   87db0:	defff904 	addi	sp,sp,-28
   87db4:	dfc00615 	stw	ra,24(sp)
   87db8:	df000515 	stw	fp,20(sp)
   87dbc:	df000504 	addi	fp,sp,20
   87dc0:	e13ffd15 	stw	r4,-12(fp)
   87dc4:	e17ffe15 	stw	r5,-8(fp)
   87dc8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   87dcc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   87dd0:	e0bffd17 	ldw	r2,-12(fp)
   87dd4:	10000616 	blt	r2,zero,87df0 <lseek+0x40>
   87dd8:	e0bffd17 	ldw	r2,-12(fp)
   87ddc:	10c00324 	muli	r3,r2,12
   87de0:	00800274 	movhi	r2,9
   87de4:	10a6c704 	addi	r2,r2,-25828
   87de8:	1885883a 	add	r2,r3,r2
   87dec:	00000106 	br	87df4 <lseek+0x44>
   87df0:	0005883a 	mov	r2,zero
   87df4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   87df8:	e0bffc17 	ldw	r2,-16(fp)
   87dfc:	10001026 	beq	r2,zero,87e40 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   87e00:	e0bffc17 	ldw	r2,-16(fp)
   87e04:	10800017 	ldw	r2,0(r2)
   87e08:	10800717 	ldw	r2,28(r2)
   87e0c:	10000926 	beq	r2,zero,87e34 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   87e10:	e0bffc17 	ldw	r2,-16(fp)
   87e14:	10800017 	ldw	r2,0(r2)
   87e18:	10800717 	ldw	r2,28(r2)
   87e1c:	e13ffc17 	ldw	r4,-16(fp)
   87e20:	e17ffe17 	ldw	r5,-8(fp)
   87e24:	e1bfff17 	ldw	r6,-4(fp)
   87e28:	103ee83a 	callr	r2
   87e2c:	e0bffb15 	stw	r2,-20(fp)
   87e30:	00000506 	br	87e48 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   87e34:	00bfde84 	movi	r2,-134
   87e38:	e0bffb15 	stw	r2,-20(fp)
   87e3c:	00000206 	br	87e48 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   87e40:	00bfebc4 	movi	r2,-81
   87e44:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   87e48:	e0bffb17 	ldw	r2,-20(fp)
   87e4c:	1000070e 	bge	r2,zero,87e6c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   87e50:	0087d600 	call	87d60 <alt_get_errno>
   87e54:	1007883a 	mov	r3,r2
   87e58:	e0bffb17 	ldw	r2,-20(fp)
   87e5c:	0085c83a 	sub	r2,zero,r2
   87e60:	18800015 	stw	r2,0(r3)
    rc = -1;
   87e64:	00bfffc4 	movi	r2,-1
   87e68:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   87e6c:	e0bffb17 	ldw	r2,-20(fp)
}
   87e70:	e037883a 	mov	sp,fp
   87e74:	dfc00117 	ldw	ra,4(sp)
   87e78:	df000017 	ldw	fp,0(sp)
   87e7c:	dec00204 	addi	sp,sp,8
   87e80:	f800283a 	ret

00087e84 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   87e84:	defffe04 	addi	sp,sp,-8
   87e88:	df000115 	stw	fp,4(sp)
   87e8c:	df000104 	addi	fp,sp,4
   87e90:	e13fff15 	stw	r4,-4(fp)
}
   87e94:	e037883a 	mov	sp,fp
   87e98:	df000017 	ldw	fp,0(sp)
   87e9c:	dec00104 	addi	sp,sp,4
   87ea0:	f800283a 	ret

00087ea4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   87ea4:	defffe04 	addi	sp,sp,-8
   87ea8:	df000115 	stw	fp,4(sp)
   87eac:	df000104 	addi	fp,sp,4
   87eb0:	e13fff15 	stw	r4,-4(fp)
}
   87eb4:	e037883a 	mov	sp,fp
   87eb8:	df000017 	ldw	fp,0(sp)
   87ebc:	dec00104 	addi	sp,sp,4
   87ec0:	f800283a 	ret

00087ec4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   87ec4:	defffe04 	addi	sp,sp,-8
   87ec8:	dfc00115 	stw	ra,4(sp)
   87ecc:	df000015 	stw	fp,0(sp)
   87ed0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   87ed4:	00800274 	movhi	r2,9
   87ed8:	10a93904 	addi	r2,r2,-23324
   87edc:	10800017 	ldw	r2,0(r2)
   87ee0:	10000526 	beq	r2,zero,87ef8 <alt_get_errno+0x34>
   87ee4:	00800274 	movhi	r2,9
   87ee8:	10a93904 	addi	r2,r2,-23324
   87eec:	10800017 	ldw	r2,0(r2)
   87ef0:	103ee83a 	callr	r2
   87ef4:	00000206 	br	87f00 <alt_get_errno+0x3c>
   87ef8:	00800274 	movhi	r2,9
   87efc:	10b00604 	addi	r2,r2,-16360
}
   87f00:	e037883a 	mov	sp,fp
   87f04:	dfc00117 	ldw	ra,4(sp)
   87f08:	df000017 	ldw	fp,0(sp)
   87f0c:	dec00204 	addi	sp,sp,8
   87f10:	f800283a 	ret

00087f14 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   87f14:	defff904 	addi	sp,sp,-28
   87f18:	dfc00615 	stw	ra,24(sp)
   87f1c:	df000515 	stw	fp,20(sp)
   87f20:	df000504 	addi	fp,sp,20
   87f24:	e13ffd15 	stw	r4,-12(fp)
   87f28:	e17ffe15 	stw	r5,-8(fp)
   87f2c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   87f30:	e0bffd17 	ldw	r2,-12(fp)
   87f34:	10000616 	blt	r2,zero,87f50 <read+0x3c>
   87f38:	e0bffd17 	ldw	r2,-12(fp)
   87f3c:	10c00324 	muli	r3,r2,12
   87f40:	00800274 	movhi	r2,9
   87f44:	10a6c704 	addi	r2,r2,-25828
   87f48:	1885883a 	add	r2,r3,r2
   87f4c:	00000106 	br	87f54 <read+0x40>
   87f50:	0005883a 	mov	r2,zero
   87f54:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   87f58:	e0bffb17 	ldw	r2,-20(fp)
   87f5c:	10002226 	beq	r2,zero,87fe8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   87f60:	e0bffb17 	ldw	r2,-20(fp)
   87f64:	10800217 	ldw	r2,8(r2)
   87f68:	108000cc 	andi	r2,r2,3
   87f6c:	10800060 	cmpeqi	r2,r2,1
   87f70:	1000181e 	bne	r2,zero,87fd4 <read+0xc0>
        (fd->dev->read))
   87f74:	e0bffb17 	ldw	r2,-20(fp)
   87f78:	10800017 	ldw	r2,0(r2)
   87f7c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   87f80:	10001426 	beq	r2,zero,87fd4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   87f84:	e0bffb17 	ldw	r2,-20(fp)
   87f88:	10800017 	ldw	r2,0(r2)
   87f8c:	10800517 	ldw	r2,20(r2)
   87f90:	e0ffff17 	ldw	r3,-4(fp)
   87f94:	e13ffb17 	ldw	r4,-20(fp)
   87f98:	e17ffe17 	ldw	r5,-8(fp)
   87f9c:	180d883a 	mov	r6,r3
   87fa0:	103ee83a 	callr	r2
   87fa4:	e0bffc15 	stw	r2,-16(fp)
   87fa8:	e0bffc17 	ldw	r2,-16(fp)
   87fac:	1000070e 	bge	r2,zero,87fcc <read+0xb8>
        {
          ALT_ERRNO = -rval;
   87fb0:	0087ec40 	call	87ec4 <alt_get_errno>
   87fb4:	1007883a 	mov	r3,r2
   87fb8:	e0bffc17 	ldw	r2,-16(fp)
   87fbc:	0085c83a 	sub	r2,zero,r2
   87fc0:	18800015 	stw	r2,0(r3)
          return -1;
   87fc4:	00bfffc4 	movi	r2,-1
   87fc8:	00000c06 	br	87ffc <read+0xe8>
        }
        return rval;
   87fcc:	e0bffc17 	ldw	r2,-16(fp)
   87fd0:	00000a06 	br	87ffc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   87fd4:	0087ec40 	call	87ec4 <alt_get_errno>
   87fd8:	1007883a 	mov	r3,r2
   87fdc:	00800344 	movi	r2,13
   87fe0:	18800015 	stw	r2,0(r3)
   87fe4:	00000406 	br	87ff8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   87fe8:	0087ec40 	call	87ec4 <alt_get_errno>
   87fec:	1007883a 	mov	r3,r2
   87ff0:	00801444 	movi	r2,81
   87ff4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   87ff8:	00bfffc4 	movi	r2,-1
}
   87ffc:	e037883a 	mov	sp,fp
   88000:	dfc00117 	ldw	ra,4(sp)
   88004:	df000017 	ldw	fp,0(sp)
   88008:	dec00204 	addi	sp,sp,8
   8800c:	f800283a 	ret

00088010 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   88010:	defff904 	addi	sp,sp,-28
   88014:	df000615 	stw	fp,24(sp)
   88018:	df000604 	addi	fp,sp,24
   8801c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   88020:	0005303a 	rdctl	r2,status
   88024:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   88028:	e0fffc17 	ldw	r3,-16(fp)
   8802c:	00bfff84 	movi	r2,-2
   88030:	1884703a 	and	r2,r3,r2
   88034:	1001703a 	wrctl	status,r2
  
  return context;
   88038:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8803c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   88040:	d0a00f17 	ldw	r2,-32708(gp)
   88044:	10c000c4 	addi	r3,r2,3
   88048:	00bfff04 	movi	r2,-4
   8804c:	1884703a 	and	r2,r3,r2
   88050:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   88054:	d0e00f17 	ldw	r3,-32708(gp)
   88058:	e0bfff17 	ldw	r2,-4(fp)
   8805c:	1887883a 	add	r3,r3,r2
   88060:	00800374 	movhi	r2,13
   88064:	10ac0004 	addi	r2,r2,-20480
   88068:	10c0062e 	bgeu	r2,r3,88084 <sbrk+0x74>
   8806c:	e0bffa17 	ldw	r2,-24(fp)
   88070:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   88074:	e0bffd17 	ldw	r2,-12(fp)
   88078:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8807c:	00bfffc4 	movi	r2,-1
   88080:	00000b06 	br	880b0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   88084:	d0a00f17 	ldw	r2,-32708(gp)
   88088:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   8808c:	d0e00f17 	ldw	r3,-32708(gp)
   88090:	e0bfff17 	ldw	r2,-4(fp)
   88094:	1885883a 	add	r2,r3,r2
   88098:	d0a00f15 	stw	r2,-32708(gp)
   8809c:	e0bffa17 	ldw	r2,-24(fp)
   880a0:	e0bffe15 	stw	r2,-8(fp)
   880a4:	e0bffe17 	ldw	r2,-8(fp)
   880a8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   880ac:	e0bffb17 	ldw	r2,-20(fp)
} 
   880b0:	e037883a 	mov	sp,fp
   880b4:	df000017 	ldw	fp,0(sp)
   880b8:	dec00104 	addi	sp,sp,4
   880bc:	f800283a 	ret

000880c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   880c0:	defffe04 	addi	sp,sp,-8
   880c4:	dfc00115 	stw	ra,4(sp)
   880c8:	df000015 	stw	fp,0(sp)
   880cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   880d0:	00800274 	movhi	r2,9
   880d4:	10a93904 	addi	r2,r2,-23324
   880d8:	10800017 	ldw	r2,0(r2)
   880dc:	10000526 	beq	r2,zero,880f4 <alt_get_errno+0x34>
   880e0:	00800274 	movhi	r2,9
   880e4:	10a93904 	addi	r2,r2,-23324
   880e8:	10800017 	ldw	r2,0(r2)
   880ec:	103ee83a 	callr	r2
   880f0:	00000206 	br	880fc <alt_get_errno+0x3c>
   880f4:	00800274 	movhi	r2,9
   880f8:	10b00604 	addi	r2,r2,-16360
}
   880fc:	e037883a 	mov	sp,fp
   88100:	dfc00117 	ldw	ra,4(sp)
   88104:	df000017 	ldw	fp,0(sp)
   88108:	dec00204 	addi	sp,sp,8
   8810c:	f800283a 	ret

00088110 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   88110:	defff904 	addi	sp,sp,-28
   88114:	dfc00615 	stw	ra,24(sp)
   88118:	df000515 	stw	fp,20(sp)
   8811c:	df000504 	addi	fp,sp,20
   88120:	e13ffd15 	stw	r4,-12(fp)
   88124:	e17ffe15 	stw	r5,-8(fp)
   88128:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8812c:	e0bffd17 	ldw	r2,-12(fp)
   88130:	10000616 	blt	r2,zero,8814c <write+0x3c>
   88134:	e0bffd17 	ldw	r2,-12(fp)
   88138:	10c00324 	muli	r3,r2,12
   8813c:	00800274 	movhi	r2,9
   88140:	10a6c704 	addi	r2,r2,-25828
   88144:	1885883a 	add	r2,r3,r2
   88148:	00000106 	br	88150 <write+0x40>
   8814c:	0005883a 	mov	r2,zero
   88150:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   88154:	e0bffb17 	ldw	r2,-20(fp)
   88158:	10002126 	beq	r2,zero,881e0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8815c:	e0bffb17 	ldw	r2,-20(fp)
   88160:	10800217 	ldw	r2,8(r2)
   88164:	108000cc 	andi	r2,r2,3
   88168:	10001826 	beq	r2,zero,881cc <write+0xbc>
   8816c:	e0bffb17 	ldw	r2,-20(fp)
   88170:	10800017 	ldw	r2,0(r2)
   88174:	10800617 	ldw	r2,24(r2)
   88178:	10001426 	beq	r2,zero,881cc <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8817c:	e0bffb17 	ldw	r2,-20(fp)
   88180:	10800017 	ldw	r2,0(r2)
   88184:	10800617 	ldw	r2,24(r2)
   88188:	e0ffff17 	ldw	r3,-4(fp)
   8818c:	e13ffb17 	ldw	r4,-20(fp)
   88190:	e17ffe17 	ldw	r5,-8(fp)
   88194:	180d883a 	mov	r6,r3
   88198:	103ee83a 	callr	r2
   8819c:	e0bffc15 	stw	r2,-16(fp)
   881a0:	e0bffc17 	ldw	r2,-16(fp)
   881a4:	1000070e 	bge	r2,zero,881c4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   881a8:	00880c00 	call	880c0 <alt_get_errno>
   881ac:	1007883a 	mov	r3,r2
   881b0:	e0bffc17 	ldw	r2,-16(fp)
   881b4:	0085c83a 	sub	r2,zero,r2
   881b8:	18800015 	stw	r2,0(r3)
        return -1;
   881bc:	00bfffc4 	movi	r2,-1
   881c0:	00000c06 	br	881f4 <write+0xe4>
      }
      return rval;
   881c4:	e0bffc17 	ldw	r2,-16(fp)
   881c8:	00000a06 	br	881f4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   881cc:	00880c00 	call	880c0 <alt_get_errno>
   881d0:	1007883a 	mov	r3,r2
   881d4:	00800344 	movi	r2,13
   881d8:	18800015 	stw	r2,0(r3)
   881dc:	00000406 	br	881f0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   881e0:	00880c00 	call	880c0 <alt_get_errno>
   881e4:	1007883a 	mov	r3,r2
   881e8:	00801444 	movi	r2,81
   881ec:	18800015 	stw	r2,0(r3)
  }
  return -1;
   881f0:	00bfffc4 	movi	r2,-1
}
   881f4:	e037883a 	mov	sp,fp
   881f8:	dfc00117 	ldw	ra,4(sp)
   881fc:	df000017 	ldw	fp,0(sp)
   88200:	dec00204 	addi	sp,sp,8
   88204:	f800283a 	ret
